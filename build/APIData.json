{
  "alerting": {
    "DELETE /api/v2/alerting/interactionstats/alerts/{alertId}": {
      "functionName": "DeleteAlertingInteractionstatsAlert",
      "signature": "DeleteAlertingInteractionstatsAlert(alertId)",
      "parameters": [
        {
          "name": "alertId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/alerting/interactionstats/rules/{ruleId}": {
      "functionName": "DeleteAlertingInteractionstatsRule",
      "signature": "DeleteAlertingInteractionstatsRule(ruleId)",
      "parameters": [
        {
          "name": "ruleId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/alerting/alerts/active": {
      "functionName": "GetAlertingAlertsActive",
      "signature": "GetAlertingAlertsActive()",
      "return": "ActiveAlertCount"
    },
    "GET /api/v2/alerting/interactionstats/alerts/{alertId}": {
      "functionName": "GetAlertingInteractionstatsAlert",
      "signature": "GetAlertingInteractionstatsAlert(alertId, expand)",
      "parameters": [
        {
          "name": "alertId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "InteractionStatsAlert"
    },
    "GET /api/v2/alerting/interactionstats/alerts": {
      "functionName": "GetAlertingInteractionstatsAlerts",
      "signature": "GetAlertingInteractionstatsAlerts(expand)",
      "parameters": [
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "InteractionStatsAlertContainer"
    },
    "GET /api/v2/alerting/interactionstats/alerts/unread": {
      "functionName": "GetAlertingInteractionstatsAlertsUnread",
      "signature": "GetAlertingInteractionstatsAlertsUnread()",
      "return": "UnreadMetric"
    },
    "GET /api/v2/alerting/interactionstats/rules/{ruleId}": {
      "functionName": "GetAlertingInteractionstatsRule",
      "signature": "GetAlertingInteractionstatsRule(ruleId, expand)",
      "parameters": [
        {
          "name": "ruleId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "InteractionStatsRule"
    },
    "GET /api/v2/alerting/interactionstats/rules": {
      "functionName": "GetAlertingInteractionstatsRules",
      "signature": "GetAlertingInteractionstatsRules(expand)",
      "parameters": [
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "InteractionStatsRuleContainer"
    },
    "POST /api/v2/alerting/interactionstats/rules": {
      "functionName": "PostAlertingInteractionstatsRules",
      "signature": "PostAlertingInteractionstatsRules(body, expand)",
      "parameters": [
        {
          "name": "body",
          "type": "InteractionStatsRule"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "InteractionStatsRule"
    },
    "PUT /api/v2/alerting/interactionstats/alerts/{alertId}": {
      "functionName": "PutAlertingInteractionstatsAlert",
      "signature": "PutAlertingInteractionstatsAlert(alertId, body, expand)",
      "parameters": [
        {
          "name": "alertId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UnreadStatus"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "UnreadStatus"
    },
    "PUT /api/v2/alerting/interactionstats/rules/{ruleId}": {
      "functionName": "PutAlertingInteractionstatsRule",
      "signature": "PutAlertingInteractionstatsRule(ruleId, body, expand)",
      "parameters": [
        {
          "name": "ruleId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "InteractionStatsRule"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "InteractionStatsRule"
    }
  },
  "analytics": {
    "DELETE /api/v2/analytics/conversations/details/jobs/{jobId}": {
      "functionName": "DeleteAnalyticsConversationsDetailsJob",
      "signature": "DeleteAnalyticsConversationsDetailsJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/analytics/reporting/schedules/{scheduleId}": {
      "functionName": "DeleteAnalyticsReportingSchedule",
      "signature": "DeleteAnalyticsReportingSchedule(scheduleId)",
      "parameters": [
        {
          "name": "scheduleId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/analytics/users/details/jobs/{jobId}": {
      "functionName": "DeleteAnalyticsUsersDetailsJob",
      "signature": "DeleteAnalyticsUsersDetailsJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/analytics/botflows/{botFlowId}/reportingturns": {
      "functionName": "GetAnalyticsBotflowReportingturns",
      "signature": "GetAnalyticsBotflowReportingturns(botFlowId, after, pageSize, actionId, sessionId)",
      "parameters": [
        {
          "name": "botFlowId",
          "type": "string"
        },
        {
          "name": "after",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "string"
        },
        {
          "name": "actionId",
          "type": "string"
        },
        {
          "name": "sessionId",
          "type": "string"
        }
      ],
      "return": "ReportingTurnsResponse"
    },
    "GET /api/v2/analytics/conversations/{conversationId}/details": {
      "functionName": "GetAnalyticsConversationDetails",
      "signature": "GetAnalyticsConversationDetails(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "AnalyticsConversationWithoutAttributes"
    },
    "GET /api/v2/analytics/conversations/details": {
      "functionName": "GetAnalyticsConversationsDetails",
      "signature": "GetAnalyticsConversationsDetails(id)",
      "parameters": [
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "AnalyticsConversationWithoutAttributesMultiGetResponse"
    },
    "GET /api/v2/analytics/conversations/details/jobs/{jobId}": {
      "functionName": "GetAnalyticsConversationsDetailsJob",
      "signature": "GetAnalyticsConversationsDetailsJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        }
      ],
      "return": "AsyncQueryStatus"
    },
    "GET /api/v2/analytics/conversations/details/jobs/{jobId}/results": {
      "functionName": "GetAnalyticsConversationsDetailsJobResults",
      "signature": "GetAnalyticsConversationsDetailsJobResults(jobId, cursor, pageSize)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        },
        {
          "name": "cursor",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "AnalyticsConversationAsyncQueryResponse"
    },
    "GET /api/v2/analytics/conversations/details/jobs/availability": {
      "functionName": "GetAnalyticsConversationsDetailsJobsAvailability",
      "signature": "GetAnalyticsConversationsDetailsJobsAvailability()",
      "return": "DataAvailabilityResponse"
    },
    "GET /api/v2/analytics/reporting/exports": {
      "functionName": "GetAnalyticsReportingExports",
      "signature": "GetAnalyticsReportingExports(pageNumber, pageSize)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "ReportingExportJobListing"
    },
    "GET /api/v2/analytics/reporting/exports/metadata": {
      "functionName": "GetAnalyticsReportingExportsMetadata",
      "signature": "GetAnalyticsReportingExportsMetadata()",
      "return": "ReportingExportMetadataJobListing"
    },
    "GET /api/v2/analytics/reporting/metadata": {
      "functionName": "GetAnalyticsReportingMetadata",
      "signature": "GetAnalyticsReportingMetadata(pageNumber, pageSize, locale)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "locale",
          "type": "string"
        }
      ],
      "return": "ReportMetaDataEntityListing"
    },
    "GET /api/v2/analytics/reporting/{reportId}/metadata": {
      "functionName": "GetAnalyticsReportingReportIdMetadata",
      "signature": "GetAnalyticsReportingReportIdMetadata(reportId, locale)",
      "parameters": [
        {
          "name": "reportId",
          "type": "string"
        },
        {
          "name": "locale",
          "type": "string"
        }
      ],
      "return": "ReportMetaData"
    },
    "GET /api/v2/analytics/reporting/reportformats": {
      "functionName": "GetAnalyticsReportingReportformats",
      "signature": "GetAnalyticsReportingReportformats()",
      "return": "List&lt;string&gt;"
    },
    "GET /api/v2/analytics/reporting/schedules/{scheduleId}": {
      "functionName": "GetAnalyticsReportingSchedule",
      "signature": "GetAnalyticsReportingSchedule(scheduleId)",
      "parameters": [
        {
          "name": "scheduleId",
          "type": "string"
        }
      ],
      "return": "ReportSchedule"
    },
    "GET /api/v2/analytics/reporting/schedules/{scheduleId}/history": {
      "functionName": "GetAnalyticsReportingScheduleHistory",
      "signature": "GetAnalyticsReportingScheduleHistory(scheduleId, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "scheduleId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "ReportRunEntryEntityDomainListing"
    },
    "GET /api/v2/analytics/reporting/schedules/{scheduleId}/history/latest": {
      "functionName": "GetAnalyticsReportingScheduleHistoryLatest",
      "signature": "GetAnalyticsReportingScheduleHistoryLatest(scheduleId)",
      "parameters": [
        {
          "name": "scheduleId",
          "type": "string"
        }
      ],
      "return": "ReportRunEntry"
    },
    "GET /api/v2/analytics/reporting/schedules/{scheduleId}/history/{runId}": {
      "functionName": "GetAnalyticsReportingScheduleHistoryRunId",
      "signature": "GetAnalyticsReportingScheduleHistoryRunId(runId, scheduleId)",
      "parameters": [
        {
          "name": "runId",
          "type": "string"
        },
        {
          "name": "scheduleId",
          "type": "string"
        }
      ],
      "return": "ReportRunEntry"
    },
    "GET /api/v2/analytics/reporting/schedules": {
      "functionName": "GetAnalyticsReportingSchedules",
      "signature": "GetAnalyticsReportingSchedules(pageNumber, pageSize)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "ReportScheduleEntityListing"
    },
    "GET /api/v2/analytics/reporting/settings": {
      "functionName": "GetAnalyticsReportingSettings",
      "signature": "GetAnalyticsReportingSettings()",
      "return": "AnalyticsReportingSettings"
    },
    "GET /api/v2/analytics/reporting/timeperiods": {
      "functionName": "GetAnalyticsReportingTimeperiods",
      "signature": "GetAnalyticsReportingTimeperiods()",
      "return": "List&lt;string&gt;"
    },
    "GET /api/v2/analytics/users/details/jobs/{jobId}": {
      "functionName": "GetAnalyticsUsersDetailsJob",
      "signature": "GetAnalyticsUsersDetailsJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        }
      ],
      "return": "AsyncQueryStatus"
    },
    "GET /api/v2/analytics/users/details/jobs/{jobId}/results": {
      "functionName": "GetAnalyticsUsersDetailsJobResults",
      "signature": "GetAnalyticsUsersDetailsJobResults(jobId, cursor, pageSize)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        },
        {
          "name": "cursor",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "AnalyticsUserDetailsAsyncQueryResponse"
    },
    "GET /api/v2/analytics/users/details/jobs/availability": {
      "functionName": "GetAnalyticsUsersDetailsJobsAvailability",
      "signature": "GetAnalyticsUsersDetailsJobsAvailability()",
      "return": "DataAvailabilityResponse"
    },
    "PATCH /api/v2/analytics/reporting/settings": {
      "functionName": "PatchAnalyticsReportingSettings",
      "signature": "PatchAnalyticsReportingSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AnalyticsReportingSettings"
        }
      ],
      "return": "AnalyticsReportingSettings"
    },
    "POST /api/v2/analytics/bots/aggregates/query": {
      "functionName": "PostAnalyticsBotsAggregatesQuery",
      "signature": "PostAnalyticsBotsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BotAggregationQuery"
        }
      ],
      "return": "BotAggregateQueryResponse"
    },
    "POST /api/v2/analytics/conversations/{conversationId}/details/properties": {
      "functionName": "PostAnalyticsConversationDetailsProperties",
      "signature": "PostAnalyticsConversationDetailsProperties(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "PropertyIndexRequest"
        }
      ],
      "return": "PropertyIndexRequest"
    },
    "POST /api/v2/analytics/conversations/aggregates/query": {
      "functionName": "PostAnalyticsConversationsAggregatesQuery",
      "signature": "PostAnalyticsConversationsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ConversationAggregationQuery"
        }
      ],
      "return": "ConversationAggregateQueryResponse"
    },
    "POST /api/v2/analytics/conversations/details/jobs": {
      "functionName": "PostAnalyticsConversationsDetailsJobs",
      "signature": "PostAnalyticsConversationsDetailsJobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AsyncConversationQuery"
        }
      ],
      "return": "AsyncQueryResponse"
    },
    "POST /api/v2/analytics/conversations/details/query": {
      "functionName": "PostAnalyticsConversationsDetailsQuery",
      "signature": "PostAnalyticsConversationsDetailsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ConversationQuery"
        }
      ],
      "return": "AnalyticsConversationQueryResponse"
    },
    "POST /api/v2/analytics/conversations/transcripts/query": {
      "functionName": "PostAnalyticsConversationsTranscriptsQuery",
      "signature": "PostAnalyticsConversationsTranscriptsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TranscriptConversationDetailSearchRequest"
        }
      ],
      "return": "AnalyticsConversationWithoutAttributesMultiGetResponse"
    },
    "POST /api/v2/analytics/evaluations/aggregates/query": {
      "functionName": "PostAnalyticsEvaluationsAggregatesQuery",
      "signature": "PostAnalyticsEvaluationsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "EvaluationAggregationQuery"
        }
      ],
      "return": "EvaluationAggregateQueryResponse"
    },
    "POST /api/v2/analytics/flows/aggregates/query": {
      "functionName": "PostAnalyticsFlowsAggregatesQuery",
      "signature": "PostAnalyticsFlowsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "FlowAggregationQuery"
        }
      ],
      "return": "FlowAggregateQueryResponse"
    },
    "POST /api/v2/analytics/flows/observations/query": {
      "functionName": "PostAnalyticsFlowsObservationsQuery",
      "signature": "PostAnalyticsFlowsObservationsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "FlowObservationQuery"
        }
      ],
      "return": "FlowObservationQueryResponse"
    },
    "POST /api/v2/analytics/journeys/aggregates/query": {
      "functionName": "PostAnalyticsJourneysAggregatesQuery",
      "signature": "PostAnalyticsJourneysAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "JourneyAggregationQuery"
        }
      ],
      "return": "JourneyAggregateQueryResponse"
    },
    "POST /api/v2/analytics/queues/observations/query": {
      "functionName": "PostAnalyticsQueuesObservationsQuery",
      "signature": "PostAnalyticsQueuesObservationsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "QueueObservationQuery"
        }
      ],
      "return": "QueueObservationQueryResponse"
    },
    "POST /api/v2/analytics/reporting/exports": {
      "functionName": "PostAnalyticsReportingExports",
      "signature": "PostAnalyticsReportingExports(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ReportingExportJobRequest"
        }
      ],
      "return": "ReportingExportJobResponse"
    },
    "POST /api/v2/analytics/reporting/schedules/{scheduleId}/runreport": {
      "functionName": "PostAnalyticsReportingScheduleRunreport",
      "signature": "PostAnalyticsReportingScheduleRunreport(scheduleId)",
      "parameters": [
        {
          "name": "scheduleId",
          "type": "string"
        }
      ],
      "return": "RunNowResponse"
    },
    "POST /api/v2/analytics/reporting/schedules": {
      "functionName": "PostAnalyticsReportingSchedules",
      "signature": "PostAnalyticsReportingSchedules(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ReportSchedule"
        }
      ],
      "return": "ReportSchedule"
    },
    "POST /api/v2/analytics/surveys/aggregates/query": {
      "functionName": "PostAnalyticsSurveysAggregatesQuery",
      "signature": "PostAnalyticsSurveysAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SurveyAggregationQuery"
        }
      ],
      "return": "SurveyAggregateQueryResponse"
    },
    "POST /api/v2/analytics/transcripts/aggregates/query": {
      "functionName": "PostAnalyticsTranscriptsAggregatesQuery",
      "signature": "PostAnalyticsTranscriptsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TranscriptAggregationQuery"
        }
      ],
      "return": "TranscriptAggregateQueryResponse"
    },
    "POST /api/v2/analytics/users/aggregates/query": {
      "functionName": "PostAnalyticsUsersAggregatesQuery",
      "signature": "PostAnalyticsUsersAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UserAggregationQuery"
        }
      ],
      "return": "UserAggregateQueryResponse"
    },
    "POST /api/v2/analytics/users/details/jobs": {
      "functionName": "PostAnalyticsUsersDetailsJobs",
      "signature": "PostAnalyticsUsersDetailsJobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AsyncUserDetailsQuery"
        }
      ],
      "return": "AsyncQueryResponse"
    },
    "POST /api/v2/analytics/users/details/query": {
      "functionName": "PostAnalyticsUsersDetailsQuery",
      "signature": "PostAnalyticsUsersDetailsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UserDetailsQuery"
        }
      ],
      "return": "AnalyticsUserDetailsQueryResponse"
    },
    "POST /api/v2/analytics/users/observations/query": {
      "functionName": "PostAnalyticsUsersObservationsQuery",
      "signature": "PostAnalyticsUsersObservationsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UserObservationQuery"
        }
      ],
      "return": "UserObservationQueryResponse"
    },
    "PUT /api/v2/analytics/reporting/schedules/{scheduleId}": {
      "functionName": "PutAnalyticsReportingSchedule",
      "signature": "PutAnalyticsReportingSchedule(scheduleId, body)",
      "parameters": [
        {
          "name": "scheduleId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ReportSchedule"
        }
      ],
      "return": "ReportSchedule"
    }
  },
  "architect": {
    "DELETE /api/v2/architect/emergencygroups/{emergencyGroupId}": {
      "functionName": "DeleteArchitectEmergencygroup",
      "signature": "DeleteArchitectEmergencygroup(emergencyGroupId)",
      "parameters": [
        {
          "name": "emergencyGroupId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/architect/ivrs/{ivrId}": {
      "functionName": "DeleteArchitectIvr",
      "signature": "DeleteArchitectIvr(ivrId)",
      "parameters": [
        {
          "name": "ivrId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/architect/prompts/{promptId}": {
      "functionName": "DeleteArchitectPrompt",
      "signature": "DeleteArchitectPrompt(promptId, allResources)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        },
        {
          "name": "allResources",
          "type": "bool?"
        }
      ]
    },
    "DELETE /api/v2/architect/prompts/{promptId}/resources/{languageCode}": {
      "functionName": "DeleteArchitectPromptResource",
      "signature": "DeleteArchitectPromptResource(promptId, languageCode)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/architect/prompts/{promptId}/resources/{languageCode}/audio": {
      "functionName": "DeleteArchitectPromptResourceAudio",
      "signature": "DeleteArchitectPromptResourceAudio(promptId, languageCode)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/architect/prompts": {
      "functionName": "DeleteArchitectPrompts",
      "signature": "DeleteArchitectPrompts(id)",
      "parameters": [
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "Operation"
    },
    "DELETE /api/v2/architect/schedules/{scheduleId}": {
      "functionName": "DeleteArchitectSchedule",
      "signature": "DeleteArchitectSchedule(scheduleId)",
      "parameters": [
        {
          "name": "scheduleId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/architect/schedulegroups/{scheduleGroupId}": {
      "functionName": "DeleteArchitectSchedulegroup",
      "signature": "DeleteArchitectSchedulegroup(scheduleGroupId)",
      "parameters": [
        {
          "name": "scheduleGroupId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/architect/systemprompts/{promptId}/resources/{languageCode}": {
      "functionName": "DeleteArchitectSystempromptResource",
      "signature": "DeleteArchitectSystempromptResource(promptId, languageCode)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/flows/{flowId}": {
      "functionName": "DeleteFlow",
      "signature": "DeleteFlow(flowId)",
      "parameters": [
        {
          "name": "flowId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/flows": {
      "functionName": "DeleteFlows",
      "signature": "DeleteFlows(id)",
      "parameters": [
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "Operation"
    },
    "DELETE /api/v2/flows/datatables/{datatableId}": {
      "functionName": "DeleteFlowsDatatable",
      "signature": "DeleteFlowsDatatable(datatableId, force)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "string"
        },
        {
          "name": "force",
          "type": "bool?"
        }
      ]
    },
    "DELETE /api/v2/flows/datatables/{datatableId}/rows/{rowId}": {
      "functionName": "DeleteFlowsDatatableRow",
      "signature": "DeleteFlowsDatatableRow(datatableId, rowId)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "string"
        },
        {
          "name": "rowId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/flows/milestones/{milestoneId}": {
      "functionName": "DeleteFlowsMilestone",
      "signature": "DeleteFlowsMilestone(milestoneId)",
      "parameters": [
        {
          "name": "milestoneId",
          "type": "string"
        }
      ],
      "return": "Empty"
    },
    "GET /api/v2/architect/dependencytracking": {
      "functionName": "GetArchitectDependencytracking",
      "signature": "GetArchitectDependencytracking(name, pageNumber, pageSize, objectType, consumedResources, consumingResources, consumedResourceType, consumingResourceType)",
      "parameters": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "objectType",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "consumedResources",
          "type": "bool?"
        },
        {
          "name": "consumingResources",
          "type": "bool?"
        },
        {
          "name": "consumedResourceType",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "consumingResourceType",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "DependencyObjectEntityListing"
    },
    "GET /api/v2/architect/dependencytracking/build": {
      "functionName": "GetArchitectDependencytrackingBuild",
      "signature": "GetArchitectDependencytrackingBuild()",
      "return": "DependencyStatus"
    },
    "GET /api/v2/architect/dependencytracking/consumedresources": {
      "functionName": "GetArchitectDependencytrackingConsumedresources",
      "signature": "GetArchitectDependencytrackingConsumedresources(id, version, objectType, resourceType, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "id",
          "type": "string"
        },
        {
          "name": "version",
          "type": "string"
        },
        {
          "name": "objectType",
          "type": "string"
        },
        {
          "name": "resourceType",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "ConsumedResourcesEntityListing"
    },
    "GET /api/v2/architect/dependencytracking/consumingresources": {
      "functionName": "GetArchitectDependencytrackingConsumingresources",
      "signature": "GetArchitectDependencytrackingConsumingresources(id, objectType, resourceType, version, pageNumber, pageSize, flowFilter)",
      "parameters": [
        {
          "name": "id",
          "type": "string"
        },
        {
          "name": "objectType",
          "type": "string"
        },
        {
          "name": "resourceType",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "version",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "flowFilter",
          "type": "string"
        }
      ],
      "return": "ConsumingResourcesEntityListing"
    },
    "GET /api/v2/architect/dependencytracking/deletedresourceconsumers": {
      "functionName": "GetArchitectDependencytrackingDeletedresourceconsumers",
      "signature": "GetArchitectDependencytrackingDeletedresourceconsumers(name, objectType, flowFilter, consumedResources, consumedResourceType, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "objectType",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "flowFilter",
          "type": "string"
        },
        {
          "name": "consumedResources",
          "type": "bool?"
        },
        {
          "name": "consumedResourceType",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "DependencyObjectEntityListing"
    },
    "GET /api/v2/architect/dependencytracking/object": {
      "functionName": "GetArchitectDependencytrackingObject",
      "signature": "GetArchitectDependencytrackingObject(id, version, objectType, consumedResources, consumingResources, consumedResourceType, consumingResourceType, consumedResourceRequest)",
      "parameters": [
        {
          "name": "id",
          "type": "string"
        },
        {
          "name": "version",
          "type": "string"
        },
        {
          "name": "objectType",
          "type": "string"
        },
        {
          "name": "consumedResources",
          "type": "bool?"
        },
        {
          "name": "consumingResources",
          "type": "bool?"
        },
        {
          "name": "consumedResourceType",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "consumingResourceType",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "consumedResourceRequest",
          "type": "bool?"
        }
      ],
      "return": "DependencyObject"
    },
    "GET /api/v2/architect/dependencytracking/types/{typeId}": {
      "functionName": "GetArchitectDependencytrackingType",
      "signature": "GetArchitectDependencytrackingType(typeId)",
      "parameters": [
        {
          "name": "typeId",
          "type": "string"
        }
      ],
      "return": "DependencyType"
    },
    "GET /api/v2/architect/dependencytracking/types": {
      "functionName": "GetArchitectDependencytrackingTypes",
      "signature": "GetArchitectDependencytrackingTypes(pageNumber, pageSize)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "DependencyTypeEntityListing"
    },
    "GET /api/v2/architect/dependencytracking/updatedresourceconsumers": {
      "functionName": "GetArchitectDependencytrackingUpdatedresourceconsumers",
      "signature": "GetArchitectDependencytrackingUpdatedresourceconsumers(name, objectType, consumedResources, consumedResourceType, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "objectType",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "consumedResources",
          "type": "bool?"
        },
        {
          "name": "consumedResourceType",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "DependencyObjectEntityListing"
    },
    "GET /api/v2/architect/emergencygroups/{emergencyGroupId}": {
      "functionName": "GetArchitectEmergencygroup",
      "signature": "GetArchitectEmergencygroup(emergencyGroupId)",
      "parameters": [
        {
          "name": "emergencyGroupId",
          "type": "string"
        }
      ],
      "return": "EmergencyGroup"
    },
    "GET /api/v2/architect/emergencygroups": {
      "functionName": "GetArchitectEmergencygroups",
      "signature": "GetArchitectEmergencygroups(pageNumber, pageSize, sortBy, sortOrder, name)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        }
      ],
      "return": "EmergencyGroupListing"
    },
    "GET /api/v2/architect/ivrs/{ivrId}": {
      "functionName": "GetArchitectIvr",
      "signature": "GetArchitectIvr(ivrId)",
      "parameters": [
        {
          "name": "ivrId",
          "type": "string"
        }
      ],
      "return": "IVR"
    },
    "GET /api/v2/architect/ivrs": {
      "functionName": "GetArchitectIvrs",
      "signature": "GetArchitectIvrs(pageNumber, pageSize, sortBy, sortOrder, name)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        }
      ],
      "return": "IVREntityListing"
    },
    "GET /api/v2/architect/prompts/{promptId}": {
      "functionName": "GetArchitectPrompt",
      "signature": "GetArchitectPrompt(promptId)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        }
      ],
      "return": "Prompt"
    },
    "GET /api/v2/architect/prompts/{promptId}/history/{historyId}": {
      "functionName": "GetArchitectPromptHistoryHistoryId",
      "signature": "GetArchitectPromptHistoryHistoryId(promptId, historyId, pageNumber, pageSize, sortOrder, sortBy, action)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        },
        {
          "name": "historyId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "action",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "HistoryListing"
    },
    "GET /api/v2/architect/prompts/{promptId}/resources/{languageCode}": {
      "functionName": "GetArchitectPromptResource",
      "signature": "GetArchitectPromptResource(promptId, languageCode)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        }
      ],
      "return": "PromptAsset"
    },
    "GET /api/v2/architect/prompts/{promptId}/resources": {
      "functionName": "GetArchitectPromptResources",
      "signature": "GetArchitectPromptResources(promptId, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "PromptAssetEntityListing"
    },
    "GET /api/v2/architect/prompts": {
      "functionName": "GetArchitectPrompts",
      "signature": "GetArchitectPrompts(pageNumber, pageSize, name, description, nameOrDescription, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "name",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "description",
          "type": "string"
        },
        {
          "name": "nameOrDescription",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "PromptEntityListing"
    },
    "GET /api/v2/architect/schedules/{scheduleId}": {
      "functionName": "GetArchitectSchedule",
      "signature": "GetArchitectSchedule(scheduleId)",
      "parameters": [
        {
          "name": "scheduleId",
          "type": "string"
        }
      ],
      "return": "Schedule"
    },
    "GET /api/v2/architect/schedulegroups/{scheduleGroupId}": {
      "functionName": "GetArchitectSchedulegroup",
      "signature": "GetArchitectSchedulegroup(scheduleGroupId)",
      "parameters": [
        {
          "name": "scheduleGroupId",
          "type": "string"
        }
      ],
      "return": "ScheduleGroup"
    },
    "GET /api/v2/architect/schedulegroups": {
      "functionName": "GetArchitectSchedulegroups",
      "signature": "GetArchitectSchedulegroups(pageNumber, pageSize, sortBy, sortOrder, name, scheduleIds, divisionId)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "scheduleIds",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "ScheduleGroupEntityListing"
    },
    "GET /api/v2/architect/schedules": {
      "functionName": "GetArchitectSchedules",
      "signature": "GetArchitectSchedules(pageNumber, pageSize, sortBy, sortOrder, name, divisionId)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "ScheduleEntityListing"
    },
    "GET /api/v2/architect/systemprompts/{promptId}": {
      "functionName": "GetArchitectSystemprompt",
      "signature": "GetArchitectSystemprompt(promptId)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        }
      ],
      "return": "SystemPrompt"
    },
    "GET /api/v2/architect/systemprompts/{promptId}/history/{historyId}": {
      "functionName": "GetArchitectSystempromptHistoryHistoryId",
      "signature": "GetArchitectSystempromptHistoryHistoryId(promptId, historyId, pageNumber, pageSize, sortOrder, sortBy, action)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        },
        {
          "name": "historyId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "action",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "HistoryListing"
    },
    "GET /api/v2/architect/systemprompts/{promptId}/resources/{languageCode}": {
      "functionName": "GetArchitectSystempromptResource",
      "signature": "GetArchitectSystempromptResource(promptId, languageCode)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        }
      ],
      "return": "SystemPromptAsset"
    },
    "GET /api/v2/architect/systemprompts/{promptId}/resources": {
      "functionName": "GetArchitectSystempromptResources",
      "signature": "GetArchitectSystempromptResources(promptId, pageNumber, pageSize, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "SystemPromptAssetEntityListing"
    },
    "GET /api/v2/architect/systemprompts": {
      "functionName": "GetArchitectSystemprompts",
      "signature": "GetArchitectSystemprompts(pageNumber, pageSize, sortBy, sortOrder, name, description, nameOrDescription)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "description",
          "type": "string"
        },
        {
          "name": "nameOrDescription",
          "type": "string"
        }
      ],
      "return": "SystemPromptEntityListing"
    },
    "GET /api/v2/flows/{flowId}": {
      "functionName": "GetFlow",
      "signature": "GetFlow(flowId, deleted)",
      "parameters": [
        {
          "name": "flowId",
          "type": "string"
        },
        {
          "name": "deleted",
          "type": "bool?"
        }
      ],
      "return": "Flow"
    },
    "GET /api/v2/flows/{flowId}/history/{historyId}": {
      "functionName": "GetFlowHistoryHistoryId",
      "signature": "GetFlowHistoryHistoryId(flowId, historyId, pageNumber, pageSize, sortOrder, sortBy, action)",
      "parameters": [
        {
          "name": "flowId",
          "type": "string"
        },
        {
          "name": "historyId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "action",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "HistoryListing"
    },
    "GET /api/v2/flows/{flowId}/latestconfiguration": {
      "functionName": "GetFlowLatestconfiguration",
      "signature": "GetFlowLatestconfiguration(flowId, deleted)",
      "parameters": [
        {
          "name": "flowId",
          "type": "string"
        },
        {
          "name": "deleted",
          "type": "bool?"
        }
      ],
      "return": "Object"
    },
    "GET /api/v2/flows/{flowId}/versions/{versionId}": {
      "functionName": "GetFlowVersion",
      "signature": "GetFlowVersion(flowId, versionId, deleted)",
      "parameters": [
        {
          "name": "flowId",
          "type": "string"
        },
        {
          "name": "versionId",
          "type": "string"
        },
        {
          "name": "deleted",
          "type": "string"
        }
      ],
      "return": "FlowVersion"
    },
    "GET /api/v2/flows/{flowId}/versions/{versionId}/configuration": {
      "functionName": "GetFlowVersionConfiguration",
      "signature": "GetFlowVersionConfiguration(flowId, versionId, deleted)",
      "parameters": [
        {
          "name": "flowId",
          "type": "string"
        },
        {
          "name": "versionId",
          "type": "string"
        },
        {
          "name": "deleted",
          "type": "string"
        }
      ],
      "return": "Object"
    },
    "GET /api/v2/flows/{flowId}/versions": {
      "functionName": "GetFlowVersions",
      "signature": "GetFlowVersions(flowId, pageNumber, pageSize, deleted)",
      "parameters": [
        {
          "name": "flowId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "deleted",
          "type": "bool?"
        }
      ],
      "return": "FlowVersionEntityListing"
    },
    "GET /api/v2/flows": {
      "functionName": "GetFlows",
      "signature": "GetFlows(type, pageNumber, pageSize, sortBy, sortOrder, id, name, description, nameOrDescription, publishVersionId, editableBy, lockedBy, lockedByClientId, secure, deleted, includeSchemas, publishedAfter, publishedBefore, divisionId)",
      "parameters": [
        {
          "name": "type",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "description",
          "type": "string"
        },
        {
          "name": "nameOrDescription",
          "type": "string"
        },
        {
          "name": "publishVersionId",
          "type": "string"
        },
        {
          "name": "editableBy",
          "type": "string"
        },
        {
          "name": "lockedBy",
          "type": "string"
        },
        {
          "name": "lockedByClientId",
          "type": "string"
        },
        {
          "name": "secure",
          "type": "string"
        },
        {
          "name": "deleted",
          "type": "bool?"
        },
        {
          "name": "includeSchemas",
          "type": "bool?"
        },
        {
          "name": "publishedAfter",
          "type": "string"
        },
        {
          "name": "publishedBefore",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "FlowEntityListing"
    },
    "GET /api/v2/flows/datatables/{datatableId}": {
      "functionName": "GetFlowsDatatable",
      "signature": "GetFlowsDatatable(datatableId, expand)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "DataTable"
    },
    "GET /api/v2/flows/datatables/{datatableId}/export/jobs/{exportJobId}": {
      "functionName": "GetFlowsDatatableExportJob",
      "signature": "GetFlowsDatatableExportJob(datatableId, exportJobId)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "string"
        },
        {
          "name": "exportJobId",
          "type": "string"
        }
      ],
      "return": "DataTableExportJob"
    },
    "GET /api/v2/flows/datatables/{datatableId}/import/jobs/{importJobId}": {
      "functionName": "GetFlowsDatatableImportJob",
      "signature": "GetFlowsDatatableImportJob(datatableId, importJobId)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "string"
        },
        {
          "name": "importJobId",
          "type": "string"
        }
      ],
      "return": "DataTableImportJob"
    },
    "GET /api/v2/flows/datatables/{datatableId}/import/jobs": {
      "functionName": "GetFlowsDatatableImportJobs",
      "signature": "GetFlowsDatatableImportJobs(datatableId, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "DataTableImportEntityListing"
    },
    "GET /api/v2/flows/datatables/{datatableId}/rows/{rowId}": {
      "functionName": "GetFlowsDatatableRow",
      "signature": "GetFlowsDatatableRow(datatableId, rowId, showbrief)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "string"
        },
        {
          "name": "rowId",
          "type": "string"
        },
        {
          "name": "showbrief",
          "type": "bool?"
        }
      ],
      "return": "Dictionary&lt;string, Object&gt;"
    },
    "GET /api/v2/flows/datatables/{datatableId}/rows": {
      "functionName": "GetFlowsDatatableRows",
      "signature": "GetFlowsDatatableRows(datatableId, pageNumber, pageSize, showbrief)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "showbrief",
          "type": "bool?"
        }
      ],
      "return": "DataTableRowEntityListing"
    },
    "GET /api/v2/flows/datatables": {
      "functionName": "GetFlowsDatatables",
      "signature": "GetFlowsDatatables(expand, pageNumber, pageSize, sortBy, sortOrder, divisionId, name)",
      "parameters": [
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "name",
          "type": "string"
        }
      ],
      "return": "DataTablesDomainEntityListing"
    },
    "GET /api/v2/flows/datatables/divisionviews/{datatableId}": {
      "functionName": "GetFlowsDatatablesDivisionview",
      "signature": "GetFlowsDatatablesDivisionview(datatableId, expand)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "DataTable"
    },
    "GET /api/v2/flows/datatables/divisionviews": {
      "functionName": "GetFlowsDatatablesDivisionviews",
      "signature": "GetFlowsDatatablesDivisionviews(expand, pageNumber, pageSize, sortBy, sortOrder, divisionId, name)",
      "parameters": [
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "name",
          "type": "string"
        }
      ],
      "return": "DataTablesDomainEntityListing"
    },
    "GET /api/v2/flows/divisionviews": {
      "functionName": "GetFlowsDivisionviews",
      "signature": "GetFlowsDivisionviews(type, pageNumber, pageSize, sortBy, sortOrder, id, name, publishVersionId, publishedAfter, publishedBefore, divisionId, includeSchemas)",
      "parameters": [
        {
          "name": "type",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "publishVersionId",
          "type": "string"
        },
        {
          "name": "publishedAfter",
          "type": "string"
        },
        {
          "name": "publishedBefore",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "includeSchemas",
          "type": "bool?"
        }
      ],
      "return": "FlowDivisionViewEntityListing"
    },
    "GET /api/v2/flows/executions/{flowExecutionId}": {
      "functionName": "GetFlowsExecution",
      "signature": "GetFlowsExecution(flowExecutionId)",
      "parameters": [
        {
          "name": "flowExecutionId",
          "type": "string"
        }
      ],
      "return": "FlowRuntimeExecution"
    },
    "GET /api/v2/flows/milestones/{milestoneId}": {
      "functionName": "GetFlowsMilestone",
      "signature": "GetFlowsMilestone(milestoneId)",
      "parameters": [
        {
          "name": "milestoneId",
          "type": "string"
        }
      ],
      "return": "FlowMilestone"
    },
    "GET /api/v2/flows/milestones": {
      "functionName": "GetFlowsMilestones",
      "signature": "GetFlowsMilestones(pageNumber, pageSize, sortBy, sortOrder, id, name, description, nameOrDescription, divisionId)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "description",
          "type": "string"
        },
        {
          "name": "nameOrDescription",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "FlowMilestoneListing"
    },
    "GET /api/v2/flows/milestones/divisionviews": {
      "functionName": "GetFlowsMilestonesDivisionviews",
      "signature": "GetFlowsMilestonesDivisionviews(pageNumber, pageSize, sortBy, sortOrder, id, name, divisionId)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "FlowMilestoneDivisionViewEntityListing"
    },
    "GET /api/v2/flows/outcomes/{flowOutcomeId}": {
      "functionName": "GetFlowsOutcome",
      "signature": "GetFlowsOutcome(flowOutcomeId)",
      "parameters": [
        {
          "name": "flowOutcomeId",
          "type": "string"
        }
      ],
      "return": "FlowOutcome"
    },
    "GET /api/v2/flows/outcomes": {
      "functionName": "GetFlowsOutcomes",
      "signature": "GetFlowsOutcomes(pageNumber, pageSize, sortBy, sortOrder, id, name, description, nameOrDescription, divisionId)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "description",
          "type": "string"
        },
        {
          "name": "nameOrDescription",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "FlowOutcomeListing"
    },
    "GET /api/v2/flows/outcomes/divisionviews": {
      "functionName": "GetFlowsOutcomesDivisionviews",
      "signature": "GetFlowsOutcomesDivisionviews(pageNumber, pageSize, sortBy, sortOrder, id, name, divisionId)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "FlowOutcomeDivisionViewEntityListing"
    },
    "POST /api/v2/architect/dependencytracking/build": {
      "functionName": "PostArchitectDependencytrackingBuild",
      "signature": "PostArchitectDependencytrackingBuild()"
    },
    "POST /api/v2/architect/emergencygroups": {
      "functionName": "PostArchitectEmergencygroups",
      "signature": "PostArchitectEmergencygroups(body)",
      "parameters": [
        {
          "name": "body",
          "type": "EmergencyGroup"
        }
      ],
      "return": "EmergencyGroup"
    },
    "POST /api/v2/architect/ivrs": {
      "functionName": "PostArchitectIvrs",
      "signature": "PostArchitectIvrs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "IVR"
        }
      ],
      "return": "IVR"
    },
    "POST /api/v2/architect/prompts/{promptId}/history": {
      "functionName": "PostArchitectPromptHistory",
      "signature": "PostArchitectPromptHistory(promptId)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        }
      ],
      "return": "Operation"
    },
    "POST /api/v2/architect/prompts/{promptId}/resources": {
      "functionName": "PostArchitectPromptResources",
      "signature": "PostArchitectPromptResources(promptId, body)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "PromptAssetCreate"
        }
      ],
      "return": "PromptAsset"
    },
    "POST /api/v2/architect/prompts": {
      "functionName": "PostArchitectPrompts",
      "signature": "PostArchitectPrompts(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Prompt"
        }
      ],
      "return": "Prompt"
    },
    "POST /api/v2/architect/schedulegroups": {
      "functionName": "PostArchitectSchedulegroups",
      "signature": "PostArchitectSchedulegroups(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ScheduleGroup"
        }
      ],
      "return": "ScheduleGroup"
    },
    "POST /api/v2/architect/schedules": {
      "functionName": "PostArchitectSchedules",
      "signature": "PostArchitectSchedules(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Schedule"
        }
      ],
      "return": "Schedule"
    },
    "POST /api/v2/architect/systemprompts/{promptId}/history": {
      "functionName": "PostArchitectSystempromptHistory",
      "signature": "PostArchitectSystempromptHistory(promptId)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        }
      ],
      "return": "Operation"
    },
    "POST /api/v2/architect/systemprompts/{promptId}/resources": {
      "functionName": "PostArchitectSystempromptResources",
      "signature": "PostArchitectSystempromptResources(promptId, body)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "SystemPromptAsset"
        }
      ],
      "return": "SystemPromptAsset"
    },
    "POST /api/v2/flows/{flowId}/history": {
      "functionName": "PostFlowHistory",
      "signature": "PostFlowHistory(flowId)",
      "parameters": [
        {
          "name": "flowId",
          "type": "string"
        }
      ],
      "return": "Operation"
    },
    "POST /api/v2/flows/{flowId}/versions": {
      "functionName": "PostFlowVersions",
      "signature": "PostFlowVersions(flowId, body)",
      "parameters": [
        {
          "name": "flowId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Object"
        }
      ],
      "return": "FlowVersion"
    },
    "POST /api/v2/flows": {
      "functionName": "PostFlows",
      "signature": "PostFlows(body, language)",
      "parameters": [
        {
          "name": "body",
          "type": "Flow"
        },
        {
          "name": "language",
          "type": "string"
        }
      ],
      "return": "Flow"
    },
    "POST /api/v2/flows/actions/checkin": {
      "functionName": "PostFlowsActionsCheckin",
      "signature": "PostFlowsActionsCheckin(flow)",
      "parameters": [
        {
          "name": "flow",
          "type": "string"
        }
      ],
      "return": "Operation"
    },
    "POST /api/v2/flows/actions/checkout": {
      "functionName": "PostFlowsActionsCheckout",
      "signature": "PostFlowsActionsCheckout(flow)",
      "parameters": [
        {
          "name": "flow",
          "type": "string"
        }
      ],
      "return": "Flow"
    },
    "POST /api/v2/flows/actions/deactivate": {
      "functionName": "PostFlowsActionsDeactivate",
      "signature": "PostFlowsActionsDeactivate(flow)",
      "parameters": [
        {
          "name": "flow",
          "type": "string"
        }
      ],
      "return": "Flow"
    },
    "POST /api/v2/flows/actions/publish": {
      "functionName": "PostFlowsActionsPublish",
      "signature": "PostFlowsActionsPublish(flow, version)",
      "parameters": [
        {
          "name": "flow",
          "type": "string"
        },
        {
          "name": "version",
          "type": "string"
        }
      ],
      "return": "Operation"
    },
    "POST /api/v2/flows/actions/revert": {
      "functionName": "PostFlowsActionsRevert",
      "signature": "PostFlowsActionsRevert(flow)",
      "parameters": [
        {
          "name": "flow",
          "type": "string"
        }
      ],
      "return": "Flow"
    },
    "POST /api/v2/flows/actions/unlock": {
      "functionName": "PostFlowsActionsUnlock",
      "signature": "PostFlowsActionsUnlock(flow)",
      "parameters": [
        {
          "name": "flow",
          "type": "string"
        }
      ],
      "return": "Flow"
    },
    "POST /api/v2/flows/datatables/{datatableId}/export/jobs": {
      "functionName": "PostFlowsDatatableExportJobs",
      "signature": "PostFlowsDatatableExportJobs(datatableId)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "string"
        }
      ],
      "return": "DataTableExportJob"
    },
    "POST /api/v2/flows/datatables/{datatableId}/import/jobs": {
      "functionName": "PostFlowsDatatableImportJobs",
      "signature": "PostFlowsDatatableImportJobs(datatableId, body)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DataTableImportJob"
        }
      ],
      "return": "DataTableImportJob"
    },
    "POST /api/v2/flows/datatables/{datatableId}/rows": {
      "functionName": "PostFlowsDatatableRows",
      "signature": "PostFlowsDatatableRows(datatableId, dataTableRow)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "string"
        },
        {
          "name": "dataTableRow",
          "type": "Object"
        }
      ],
      "return": "Dictionary&lt;string, Object&gt;"
    },
    "POST /api/v2/flows/datatables": {
      "functionName": "PostFlowsDatatables",
      "signature": "PostFlowsDatatables(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DataTable"
        }
      ],
      "return": "DataTable"
    },
    "POST /api/v2/flows/executions": {
      "functionName": "PostFlowsExecutions",
      "signature": "PostFlowsExecutions(flowLaunchRequest)",
      "parameters": [
        {
          "name": "flowLaunchRequest",
          "type": "FlowExecutionLaunchRequest"
        }
      ],
      "return": "FlowExecutionLaunchResponse"
    },
    "POST /api/v2/flows/milestones": {
      "functionName": "PostFlowsMilestones",
      "signature": "PostFlowsMilestones(body)",
      "parameters": [
        {
          "name": "body",
          "type": "FlowMilestone"
        }
      ],
      "return": "FlowMilestone"
    },
    "POST /api/v2/flows/outcomes": {
      "functionName": "PostFlowsOutcomes",
      "signature": "PostFlowsOutcomes(body)",
      "parameters": [
        {
          "name": "body",
          "type": "FlowOutcome"
        }
      ],
      "return": "FlowOutcome"
    },
    "PUT /api/v2/architect/emergencygroups/{emergencyGroupId}": {
      "functionName": "PutArchitectEmergencygroup",
      "signature": "PutArchitectEmergencygroup(emergencyGroupId, body)",
      "parameters": [
        {
          "name": "emergencyGroupId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "EmergencyGroup"
        }
      ],
      "return": "EmergencyGroup"
    },
    "PUT /api/v2/architect/ivrs/{ivrId}": {
      "functionName": "PutArchitectIvr",
      "signature": "PutArchitectIvr(ivrId, body)",
      "parameters": [
        {
          "name": "ivrId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "IVR"
        }
      ],
      "return": "IVR"
    },
    "PUT /api/v2/architect/prompts/{promptId}": {
      "functionName": "PutArchitectPrompt",
      "signature": "PutArchitectPrompt(promptId, body)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Prompt"
        }
      ],
      "return": "Prompt"
    },
    "PUT /api/v2/architect/prompts/{promptId}/resources/{languageCode}": {
      "functionName": "PutArchitectPromptResource",
      "signature": "PutArchitectPromptResource(promptId, languageCode, body)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        },
        {
          "name": "body",
          "type": "PromptAsset"
        }
      ],
      "return": "PromptAsset"
    },
    "PUT /api/v2/architect/schedules/{scheduleId}": {
      "functionName": "PutArchitectSchedule",
      "signature": "PutArchitectSchedule(scheduleId, body)",
      "parameters": [
        {
          "name": "scheduleId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Schedule"
        }
      ],
      "return": "Schedule"
    },
    "PUT /api/v2/architect/schedulegroups/{scheduleGroupId}": {
      "functionName": "PutArchitectSchedulegroup",
      "signature": "PutArchitectSchedulegroup(scheduleGroupId, body)",
      "parameters": [
        {
          "name": "scheduleGroupId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ScheduleGroup"
        }
      ],
      "return": "ScheduleGroup"
    },
    "PUT /api/v2/architect/systemprompts/{promptId}/resources/{languageCode}": {
      "functionName": "PutArchitectSystempromptResource",
      "signature": "PutArchitectSystempromptResource(promptId, languageCode, body)",
      "parameters": [
        {
          "name": "promptId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        },
        {
          "name": "body",
          "type": "SystemPromptAsset"
        }
      ],
      "return": "SystemPromptAsset"
    },
    "PUT /api/v2/flows/{flowId}": {
      "functionName": "PutFlow",
      "signature": "PutFlow(flowId, body)",
      "parameters": [
        {
          "name": "flowId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Flow"
        }
      ],
      "return": "Flow"
    },
    "PUT /api/v2/flows/datatables/{datatableId}": {
      "functionName": "PutFlowsDatatable",
      "signature": "PutFlowsDatatable(datatableId, body, expand)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DataTable"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "DataTable"
    },
    "PUT /api/v2/flows/datatables/{datatableId}/rows/{rowId}": {
      "functionName": "PutFlowsDatatableRow",
      "signature": "PutFlowsDatatableRow(datatableId, rowId, body)",
      "parameters": [
        {
          "name": "datatableId",
          "type": "string"
        },
        {
          "name": "rowId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Object"
        }
      ],
      "return": "Dictionary&lt;string, Object&gt;"
    },
    "PUT /api/v2/flows/milestones/{milestoneId}": {
      "functionName": "PutFlowsMilestone",
      "signature": "PutFlowsMilestone(milestoneId, body)",
      "parameters": [
        {
          "name": "milestoneId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "FlowMilestone"
        }
      ],
      "return": "FlowMilestone"
    },
    "PUT /api/v2/flows/outcomes/{flowOutcomeId}": {
      "functionName": "PutFlowsOutcome",
      "signature": "PutFlowsOutcome(flowOutcomeId, body)",
      "parameters": [
        {
          "name": "flowOutcomeId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "FlowOutcome"
        }
      ],
      "return": "Operation"
    }
  },
  "audit": {
    "GET /api/v2/audits/query/realtime/servicemapping": {
      "functionName": "GetAuditsQueryRealtimeServicemapping",
      "signature": "GetAuditsQueryRealtimeServicemapping()",
      "return": "AuditQueryServiceMapping"
    },
    "GET /api/v2/audits/query/servicemapping": {
      "functionName": "GetAuditsQueryServicemapping",
      "signature": "GetAuditsQueryServicemapping()",
      "return": "AuditQueryServiceMapping"
    },
    "GET /api/v2/audits/query/{transactionId}": {
      "functionName": "GetAuditsQueryTransactionId",
      "signature": "GetAuditsQueryTransactionId(transactionId)",
      "parameters": [
        {
          "name": "transactionId",
          "type": "string"
        }
      ],
      "return": "AuditQueryExecutionStatusResponse"
    },
    "GET /api/v2/audits/query/{transactionId}/results": {
      "functionName": "GetAuditsQueryTransactionIdResults",
      "signature": "GetAuditsQueryTransactionIdResults(transactionId, cursor, pageSize, expand)",
      "parameters": [
        {
          "name": "transactionId",
          "type": "string"
        },
        {
          "name": "cursor",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "AuditQueryExecutionResultsResponse"
    },
    "POST /api/v2/audits/query": {
      "functionName": "PostAuditsQuery",
      "signature": "PostAuditsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AuditQueryRequest"
        }
      ],
      "return": "AuditQueryExecutionStatusResponse"
    },
    "POST /api/v2/audits/query/realtime": {
      "functionName": "PostAuditsQueryRealtime",
      "signature": "PostAuditsQueryRealtime(body, expand)",
      "parameters": [
        {
          "name": "body",
          "type": "AuditRealtimeQueryRequest"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "AuditRealtimeQueryResultsResponse"
    }
  },
  "authorization": {
    "DELETE /api/v2/authorization/divisions/{divisionId}": {
      "functionName": "DeleteAuthorizationDivision",
      "signature": "DeleteAuthorizationDivision(divisionId, force)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "string"
        },
        {
          "name": "force",
          "type": "bool?"
        }
      ]
    },
    "DELETE /api/v2/authorization/roles/{roleId}": {
      "functionName": "DeleteAuthorizationRole",
      "signature": "DeleteAuthorizationRole(roleId)",
      "parameters": [
        {
          "name": "roleId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}": {
      "functionName": "DeleteAuthorizationSubjectDivisionRole",
      "signature": "DeleteAuthorizationSubjectDivisionRole(subjectId, divisionId, roleId)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "string"
        },
        {
          "name": "roleId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/authorization/divisions/{divisionId}": {
      "functionName": "GetAuthorizationDivision",
      "signature": "GetAuthorizationDivision(divisionId, objectCount)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "string"
        },
        {
          "name": "objectCount",
          "type": "bool?"
        }
      ],
      "return": "AuthzDivision"
    },
    "GET /api/v2/authorization/divisions/{divisionId}/grants": {
      "functionName": "GetAuthorizationDivisionGrants",
      "signature": "GetAuthorizationDivisionGrants(divisionId, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "AuthzDivisionGrantEntityListing"
    },
    "GET /api/v2/authorization/divisions": {
      "functionName": "GetAuthorizationDivisions",
      "signature": "GetAuthorizationDivisions(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, objectCount, id, name)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        },
        {
          "name": "objectCount",
          "type": "bool?"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "name",
          "type": "string"
        }
      ],
      "return": "AuthzDivisionEntityListing"
    },
    "GET /api/v2/authorization/divisions/home": {
      "functionName": "GetAuthorizationDivisionsHome",
      "signature": "GetAuthorizationDivisionsHome()",
      "return": "AuthzDivision"
    },
    "GET /api/v2/authorization/divisions/limit": {
      "functionName": "GetAuthorizationDivisionsLimit",
      "signature": "GetAuthorizationDivisionsLimit()",
      "return": "int?"
    },
    "GET /api/v2/authorization/divisionspermitted/me": {
      "functionName": "GetAuthorizationDivisionspermittedMe",
      "signature": "GetAuthorizationDivisionspermittedMe(permission, name)",
      "parameters": [
        {
          "name": "permission",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        }
      ],
      "return": "List&lt;AuthzDivision&gt;"
    },
    "GET /api/v2/authorization/divisionspermitted/paged/me": {
      "functionName": "GetAuthorizationDivisionspermittedPagedMe",
      "signature": "GetAuthorizationDivisionspermittedPagedMe(permission, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "permission",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "DivsPermittedEntityListing"
    },
    "GET /api/v2/authorization/divisionspermitted/paged/{subjectId}": {
      "functionName": "GetAuthorizationDivisionspermittedPagedSubjectId",
      "signature": "GetAuthorizationDivisionspermittedPagedSubjectId(subjectId, permission, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "string"
        },
        {
          "name": "permission",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "DivsPermittedEntityListing"
    },
    "GET /api/v2/authorization/permissions": {
      "functionName": "GetAuthorizationPermissions",
      "signature": "GetAuthorizationPermissions(pageSize, pageNumber, queryType, query)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "queryType",
          "type": "string"
        },
        {
          "name": "query",
          "type": "string"
        }
      ],
      "return": "PermissionCollectionEntityListing"
    },
    "GET /api/v2/authorization/products": {
      "functionName": "GetAuthorizationProducts",
      "signature": "GetAuthorizationProducts()",
      "return": "OrganizationProductEntityListing"
    },
    "GET /api/v2/authorization/roles/{roleId}": {
      "functionName": "GetAuthorizationRole",
      "signature": "GetAuthorizationRole(roleId, expand)",
      "parameters": [
        {
          "name": "roleId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "DomainOrganizationRole"
    },
    "GET /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}": {
      "functionName": "GetAuthorizationRoleComparedefaultRightRoleId",
      "signature": "GetAuthorizationRoleComparedefaultRightRoleId(leftRoleId, rightRoleId)",
      "parameters": [
        {
          "name": "leftRoleId",
          "type": "string"
        },
        {
          "name": "rightRoleId",
          "type": "string"
        }
      ],
      "return": "DomainOrgRoleDifference"
    },
    "GET /api/v2/authorization/roles/{roleId}/subjectgrants": {
      "functionName": "GetAuthorizationRoleSubjectgrants",
      "signature": "GetAuthorizationRoleSubjectgrants(roleId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
      "parameters": [
        {
          "name": "roleId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        }
      ],
      "return": "SubjectDivisionGrantsEntityListing"
    },
    "GET /api/v2/authorization/roles/{roleId}/users": {
      "functionName": "GetAuthorizationRoleUsers",
      "signature": "GetAuthorizationRoleUsers(roleId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "roleId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "UserEntityListing"
    },
    "GET /api/v2/authorization/roles": {
      "functionName": "GetAuthorizationRoles",
      "signature": "GetAuthorizationRoles(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, permission, defaultRoleId, userCount, id)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "permission",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "defaultRoleId",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "userCount",
          "type": "bool?"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "OrganizationRoleEntityListing"
    },
    "GET /api/v2/authorization/subjects/{subjectId}": {
      "functionName": "GetAuthorizationSubject",
      "signature": "GetAuthorizationSubject(subjectId)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "string"
        }
      ],
      "return": "AuthzSubject"
    },
    "GET /api/v2/authorization/subjects/me": {
      "functionName": "GetAuthorizationSubjectsMe",
      "signature": "GetAuthorizationSubjectsMe()",
      "return": "AuthzSubject"
    },
    "GET /api/v2/authorization/subjects/rolecounts": {
      "functionName": "GetAuthorizationSubjectsRolecounts",
      "signature": "GetAuthorizationSubjectsRolecounts(id)",
      "parameters": [
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "Dictionary&lt;string, Object&gt;"
    },
    "GET /api/v2/users/{userId}/roles": {
      "functionName": "GetUserRoles",
      "signature": "GetUserRoles(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "UserAuthorization"
    },
    "PATCH /api/v2/authorization/roles/{roleId}": {
      "functionName": "PatchAuthorizationRole",
      "signature": "PatchAuthorizationRole(roleId, body)",
      "parameters": [
        {
          "name": "roleId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DomainOrganizationRole"
        }
      ],
      "return": "DomainOrganizationRole"
    },
    "POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}": {
      "functionName": "PostAuthorizationDivisionObject",
      "signature": "PostAuthorizationDivisionObject(divisionId, objectType, body)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "string"
        },
        {
          "name": "objectType",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;string&gt;"
        }
      ]
    },
    "POST /api/v2/authorization/divisions/{divisionId}/restore": {
      "functionName": "PostAuthorizationDivisionRestore",
      "signature": "PostAuthorizationDivisionRestore(divisionId, body)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "AuthzDivision"
        }
      ],
      "return": "AuthzDivision"
    },
    "POST /api/v2/authorization/divisions": {
      "functionName": "PostAuthorizationDivisions",
      "signature": "PostAuthorizationDivisions(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AuthzDivision"
        }
      ],
      "return": "AuthzDivision"
    },
    "POST /api/v2/authorization/roles/{roleId}": {
      "functionName": "PostAuthorizationRole",
      "signature": "PostAuthorizationRole(roleId, body, subjectType)",
      "parameters": [
        {
          "name": "roleId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "SubjectDivisions"
        },
        {
          "name": "subjectType",
          "type": "string"
        }
      ]
    },
    "POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}": {
      "functionName": "PostAuthorizationRoleComparedefaultRightRoleId",
      "signature": "PostAuthorizationRoleComparedefaultRightRoleId(leftRoleId, rightRoleId, body)",
      "parameters": [
        {
          "name": "leftRoleId",
          "type": "string"
        },
        {
          "name": "rightRoleId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DomainOrganizationRole"
        }
      ],
      "return": "DomainOrgRoleDifference"
    },
    "POST /api/v2/authorization/roles": {
      "functionName": "PostAuthorizationRoles",
      "signature": "PostAuthorizationRoles(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DomainOrganizationRoleCreate"
        }
      ],
      "return": "DomainOrganizationRole"
    },
    "POST /api/v2/authorization/roles/default": {
      "functionName": "PostAuthorizationRolesDefault",
      "signature": "PostAuthorizationRolesDefault(force)",
      "parameters": [
        {
          "name": "force",
          "type": "bool?"
        }
      ],
      "return": "OrganizationRoleEntityListing"
    },
    "POST /api/v2/authorization/subjects/{subjectId}/bulkadd": {
      "functionName": "PostAuthorizationSubjectBulkadd",
      "signature": "PostAuthorizationSubjectBulkadd(subjectId, body, subjectType)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "RoleDivisionGrants"
        },
        {
          "name": "subjectType",
          "type": "string"
        }
      ]
    },
    "POST /api/v2/authorization/subjects/{subjectId}/bulkremove": {
      "functionName": "PostAuthorizationSubjectBulkremove",
      "signature": "PostAuthorizationSubjectBulkremove(subjectId, body)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "RoleDivisionGrants"
        }
      ]
    },
    "POST /api/v2/authorization/subjects/{subjectId}/bulkreplace": {
      "functionName": "PostAuthorizationSubjectBulkreplace",
      "signature": "PostAuthorizationSubjectBulkreplace(subjectId, body, subjectType)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "RoleDivisionGrants"
        },
        {
          "name": "subjectType",
          "type": "string"
        }
      ]
    },
    "POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}": {
      "functionName": "PostAuthorizationSubjectDivisionRole",
      "signature": "PostAuthorizationSubjectDivisionRole(subjectId, divisionId, roleId, subjectType)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "string"
        },
        {
          "name": "roleId",
          "type": "string"
        },
        {
          "name": "subjectType",
          "type": "string"
        }
      ]
    },
    "PUT /api/v2/authorization/divisions/{divisionId}": {
      "functionName": "PutAuthorizationDivision",
      "signature": "PutAuthorizationDivision(divisionId, body)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "AuthzDivision"
        }
      ],
      "return": "AuthzDivision"
    },
    "PUT /api/v2/authorization/roles/{roleId}": {
      "functionName": "PutAuthorizationRole",
      "signature": "PutAuthorizationRole(roleId, body)",
      "parameters": [
        {
          "name": "roleId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DomainOrganizationRoleUpdate"
        }
      ],
      "return": "DomainOrganizationRole"
    },
    "PUT /api/v2/authorization/roles/{roleId}/users/add": {
      "functionName": "PutAuthorizationRoleUsersAdd",
      "signature": "PutAuthorizationRoleUsersAdd(roleId, body)",
      "parameters": [
        {
          "name": "roleId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "List&lt;string&gt;"
    },
    "PUT /api/v2/authorization/roles/{roleId}/users/remove": {
      "functionName": "PutAuthorizationRoleUsersRemove",
      "signature": "PutAuthorizationRoleUsersRemove(roleId, body)",
      "parameters": [
        {
          "name": "roleId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "List&lt;string&gt;"
    },
    "PUT /api/v2/authorization/roles/default": {
      "functionName": "PutAuthorizationRolesDefault",
      "signature": "PutAuthorizationRolesDefault(body)",
      "parameters": [
        {
          "name": "body",
          "type": "List&lt;DomainOrganizationRole&gt;"
        }
      ],
      "return": "OrganizationRoleEntityListing"
    },
    "PUT /api/v2/users/{userId}/roles": {
      "functionName": "PutUserRoles",
      "signature": "PutUserRoles(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "UserAuthorization"
    }
  },
  "billing": {
    "GET /api/v2/billing/reports/billableusage": {
      "functionName": "GetBillingReportsBillableusage",
      "signature": "GetBillingReportsBillableusage(startDate, endDate)",
      "parameters": [
        {
          "name": "startDate",
          "type": "DateTime?"
        },
        {
          "name": "endDate",
          "type": "DateTime?"
        }
      ],
      "return": "BillingUsageReport"
    },
    "GET /api/v2/billing/trusteebillingoverview/{trustorOrgId}": {
      "functionName": "GetBillingTrusteebillingoverviewTrustorOrgId",
      "signature": "GetBillingTrusteebillingoverviewTrustorOrgId(trustorOrgId, billingPeriodIndex)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "string"
        },
        {
          "name": "billingPeriodIndex",
          "type": "int?"
        }
      ],
      "return": "TrusteeBillingOverview"
    }
  },
  "chat": {
    "GET /api/v2/chat/settings": {
      "functionName": "GetChatSettings",
      "signature": "GetChatSettings()",
      "return": "ChatSettings"
    },
    "PATCH /api/v2/chat/settings": {
      "functionName": "PatchChatSettings",
      "signature": "PatchChatSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ChatSettings"
        }
      ],
      "return": "ChatSettings"
    },
    "PUT /api/v2/chat/settings": {
      "functionName": "PutChatSettings",
      "signature": "PutChatSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ChatSettings"
        }
      ],
      "return": "ChatSettings"
    }
  },
  "coaching": {
    "DELETE /api/v2/coaching/appointments/{appointmentId}": {
      "functionName": "DeleteCoachingAppointment",
      "signature": "DeleteCoachingAppointment(appointmentId)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "string"
        }
      ],
      "return": "CoachingAppointmentReference"
    },
    "DELETE /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}": {
      "functionName": "DeleteCoachingAppointmentAnnotation",
      "signature": "DeleteCoachingAppointmentAnnotation(appointmentId, annotationId)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "string"
        },
        {
          "name": "annotationId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/coaching/appointments/{appointmentId}": {
      "functionName": "GetCoachingAppointment",
      "signature": "GetCoachingAppointment(appointmentId)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "string"
        }
      ],
      "return": "CoachingAppointmentResponse"
    },
    "GET /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}": {
      "functionName": "GetCoachingAppointmentAnnotation",
      "signature": "GetCoachingAppointmentAnnotation(appointmentId, annotationId)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "string"
        },
        {
          "name": "annotationId",
          "type": "string"
        }
      ],
      "return": "CoachingAnnotation"
    },
    "GET /api/v2/coaching/appointments/{appointmentId}/annotations": {
      "functionName": "GetCoachingAppointmentAnnotations",
      "signature": "GetCoachingAppointmentAnnotations(appointmentId, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "CoachingAnnotationList"
    },
    "GET /api/v2/coaching/appointments/{appointmentId}/statuses": {
      "functionName": "GetCoachingAppointmentStatuses",
      "signature": "GetCoachingAppointmentStatuses(appointmentId, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "CoachingAppointmentStatusResponseList"
    },
    "GET /api/v2/coaching/appointments": {
      "functionName": "GetCoachingAppointments",
      "signature": "GetCoachingAppointments(userIds, interval, pageNumber, pageSize, statuses, facilitatorIds, sortOrder, relationships, completionInterval, overdue, intervalCondition)",
      "parameters": [
        {
          "name": "userIds",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "interval",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "statuses",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "facilitatorIds",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "relationships",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "completionInterval",
          "type": "string"
        },
        {
          "name": "overdue",
          "type": "string"
        },
        {
          "name": "intervalCondition",
          "type": "string"
        }
      ],
      "return": "CoachingAppointmentResponseList"
    },
    "GET /api/v2/coaching/appointments/me": {
      "functionName": "GetCoachingAppointmentsMe",
      "signature": "GetCoachingAppointmentsMe(interval, pageNumber, pageSize, statuses, facilitatorIds, sortOrder, relationships, completionInterval, overdue, intervalCondition)",
      "parameters": [
        {
          "name": "interval",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "statuses",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "facilitatorIds",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "relationships",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "completionInterval",
          "type": "string"
        },
        {
          "name": "overdue",
          "type": "string"
        },
        {
          "name": "intervalCondition",
          "type": "string"
        }
      ],
      "return": "CoachingAppointmentResponseList"
    },
    "GET /api/v2/coaching/notifications/{notificationId}": {
      "functionName": "GetCoachingNotification",
      "signature": "GetCoachingNotification(notificationId, expand)",
      "parameters": [
        {
          "name": "notificationId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "CoachingNotification"
    },
    "GET /api/v2/coaching/notifications": {
      "functionName": "GetCoachingNotifications",
      "signature": "GetCoachingNotifications(pageNumber, pageSize, expand)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "CoachingNotificationList"
    },
    "PATCH /api/v2/coaching/appointments/{appointmentId}": {
      "functionName": "PatchCoachingAppointment",
      "signature": "PatchCoachingAppointment(appointmentId, body)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UpdateCoachingAppointmentRequest"
        }
      ],
      "return": "CoachingAppointmentResponse"
    },
    "PATCH /api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}": {
      "functionName": "PatchCoachingAppointmentAnnotation",
      "signature": "PatchCoachingAppointmentAnnotation(appointmentId, annotationId, body)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "string"
        },
        {
          "name": "annotationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CoachingAnnotation"
        }
      ],
      "return": "CoachingAnnotation"
    },
    "PATCH /api/v2/coaching/appointments/{appointmentId}/status": {
      "functionName": "PatchCoachingAppointmentStatus",
      "signature": "PatchCoachingAppointmentStatus(appointmentId, body)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CoachingAppointmentStatusRequest"
        }
      ],
      "return": "CoachingAppointmentStatusResponse"
    },
    "PATCH /api/v2/coaching/notifications/{notificationId}": {
      "functionName": "PatchCoachingNotification",
      "signature": "PatchCoachingNotification(notificationId, body)",
      "parameters": [
        {
          "name": "notificationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CoachingNotification"
        }
      ],
      "return": "CoachingNotification"
    },
    "POST /api/v2/coaching/appointments/{appointmentId}/annotations": {
      "functionName": "PostCoachingAppointmentAnnotations",
      "signature": "PostCoachingAppointmentAnnotations(appointmentId, body)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CoachingAnnotationCreateRequest"
        }
      ],
      "return": "CoachingAnnotation"
    },
    "POST /api/v2/coaching/appointments/{appointmentId}/conversations": {
      "functionName": "PostCoachingAppointmentConversations",
      "signature": "PostCoachingAppointmentConversations(appointmentId, body)",
      "parameters": [
        {
          "name": "appointmentId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "AddConversationRequest"
        }
      ],
      "return": "AddConversationResponse"
    },
    "POST /api/v2/coaching/appointments": {
      "functionName": "PostCoachingAppointments",
      "signature": "PostCoachingAppointments(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateCoachingAppointmentRequest"
        }
      ],
      "return": "CoachingAppointmentResponse"
    },
    "POST /api/v2/coaching/appointments/aggregates/query": {
      "functionName": "PostCoachingAppointmentsAggregatesQuery",
      "signature": "PostCoachingAppointmentsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CoachingAppointmentAggregateRequest"
        }
      ],
      "return": "CoachingAppointmentAggregateResponse"
    },
    "POST /api/v2/coaching/scheduleslots/query": {
      "functionName": "PostCoachingScheduleslotsQuery",
      "signature": "PostCoachingScheduleslotsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CoachingSlotsRequest"
        }
      ],
      "return": "CoachingSlotsResponse"
    }
  },
  "contentmanagement": {
    "DELETE /api/v2/contentmanagement/documents/{documentId}": {
      "functionName": "DeleteContentmanagementDocument",
      "signature": "DeleteContentmanagementDocument(documentId, _override)",
      "parameters": [
        {
          "name": "documentId",
          "type": "string"
        },
        {
          "name": "_override",
          "type": "bool?"
        }
      ]
    },
    "DELETE /api/v2/contentmanagement/shares/{shareId}": {
      "functionName": "DeleteContentmanagementShare",
      "signature": "DeleteContentmanagementShare(shareId)",
      "parameters": [
        {
          "name": "shareId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/contentmanagement/status/{statusId}": {
      "functionName": "DeleteContentmanagementStatusStatusId",
      "signature": "DeleteContentmanagementStatusStatusId(statusId)",
      "parameters": [
        {
          "name": "statusId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/contentmanagement/workspaces/{workspaceId}": {
      "functionName": "DeleteContentmanagementWorkspace",
      "signature": "DeleteContentmanagementWorkspace(workspaceId, moveChildrenToWorkspaceId)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string"
        },
        {
          "name": "moveChildrenToWorkspaceId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}": {
      "functionName": "DeleteContentmanagementWorkspaceMember",
      "signature": "DeleteContentmanagementWorkspaceMember(workspaceId, memberId)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string"
        },
        {
          "name": "memberId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}": {
      "functionName": "DeleteContentmanagementWorkspaceTagvalue",
      "signature": "DeleteContentmanagementWorkspaceTagvalue(workspaceId, tagId)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string"
        },
        {
          "name": "tagId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/contentmanagement/documents/{documentId}": {
      "functionName": "GetContentmanagementDocument",
      "signature": "GetContentmanagementDocument(documentId, expand)",
      "parameters": [
        {
          "name": "documentId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "Document"
    },
    "GET /api/v2/contentmanagement/documents/{documentId}/audits": {
      "functionName": "GetContentmanagementDocumentAudits",
      "signature": "GetContentmanagementDocumentAudits(documentId, pageSize, pageNumber, transactionFilter, level, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "documentId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "transactionFilter",
          "type": "string"
        },
        {
          "name": "level",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "DocumentAuditEntityListing"
    },
    "GET /api/v2/contentmanagement/documents/{documentId}/content": {
      "functionName": "GetContentmanagementDocumentContent",
      "signature": "GetContentmanagementDocumentContent(documentId, disposition, contentType)",
      "parameters": [
        {
          "name": "documentId",
          "type": "string"
        },
        {
          "name": "disposition",
          "type": "string"
        },
        {
          "name": "contentType",
          "type": "string"
        }
      ],
      "return": "DownloadResponse"
    },
    "GET /api/v2/contentmanagement/documents": {
      "functionName": "GetContentmanagementDocuments",
      "signature": "GetContentmanagementDocuments(workspaceId, name, expand, pageSize, pageNumber, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "DocumentEntityListing"
    },
    "GET /api/v2/contentmanagement/query": {
      "functionName": "GetContentmanagementQuery",
      "signature": "GetContentmanagementQuery(queryPhrase, pageSize, pageNumber, sortBy, sortOrder, expand)",
      "parameters": [
        {
          "name": "queryPhrase",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "QueryResults"
    },
    "GET /api/v2/contentmanagement/securityprofiles/{securityProfileId}": {
      "functionName": "GetContentmanagementSecurityprofile",
      "signature": "GetContentmanagementSecurityprofile(securityProfileId)",
      "parameters": [
        {
          "name": "securityProfileId",
          "type": "string"
        }
      ],
      "return": "SecurityProfile"
    },
    "GET /api/v2/contentmanagement/securityprofiles": {
      "functionName": "GetContentmanagementSecurityprofiles",
      "signature": "GetContentmanagementSecurityprofiles()",
      "return": "SecurityProfileEntityListing"
    },
    "GET /api/v2/contentmanagement/shares/{shareId}": {
      "functionName": "GetContentmanagementShare",
      "signature": "GetContentmanagementShare(shareId, expand)",
      "parameters": [
        {
          "name": "shareId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "Share"
    },
    "GET /api/v2/contentmanagement/shared/{sharedId}": {
      "functionName": "GetContentmanagementSharedSharedId",
      "signature": "GetContentmanagementSharedSharedId(sharedId, redirect, disposition, contentType, expand)",
      "parameters": [
        {
          "name": "sharedId",
          "type": "string"
        },
        {
          "name": "redirect",
          "type": "bool?"
        },
        {
          "name": "disposition",
          "type": "string"
        },
        {
          "name": "contentType",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "SharedResponse"
    },
    "GET /api/v2/contentmanagement/shares": {
      "functionName": "GetContentmanagementShares",
      "signature": "GetContentmanagementShares(entityId, expand, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "entityId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "ShareEntityListing"
    },
    "GET /api/v2/contentmanagement/status": {
      "functionName": "GetContentmanagementStatus",
      "signature": "GetContentmanagementStatus(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "CommandStatusEntityListing"
    },
    "GET /api/v2/contentmanagement/status/{statusId}": {
      "functionName": "GetContentmanagementStatusStatusId",
      "signature": "GetContentmanagementStatusStatusId(statusId)",
      "parameters": [
        {
          "name": "statusId",
          "type": "string"
        }
      ],
      "return": "CommandStatus"
    },
    "GET /api/v2/contentmanagement/usage": {
      "functionName": "GetContentmanagementUsage",
      "signature": "GetContentmanagementUsage()",
      "return": "Usage"
    },
    "GET /api/v2/contentmanagement/workspaces/{workspaceId}": {
      "functionName": "GetContentmanagementWorkspace",
      "signature": "GetContentmanagementWorkspace(workspaceId, expand)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "Workspace"
    },
    "GET /api/v2/contentmanagement/workspaces/{workspaceId}/documents": {
      "functionName": "GetContentmanagementWorkspaceDocuments",
      "signature": "GetContentmanagementWorkspaceDocuments(workspaceId, expand, pageSize, pageNumber, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "DocumentEntityListing"
    },
    "GET /api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}": {
      "functionName": "GetContentmanagementWorkspaceMember",
      "signature": "GetContentmanagementWorkspaceMember(workspaceId, memberId, expand)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string"
        },
        {
          "name": "memberId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "WorkspaceMember"
    },
    "GET /api/v2/contentmanagement/workspaces/{workspaceId}/members": {
      "functionName": "GetContentmanagementWorkspaceMembers",
      "signature": "GetContentmanagementWorkspaceMembers(workspaceId, pageSize, pageNumber, expand)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "WorkspaceMemberEntityListing"
    },
    "GET /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}": {
      "functionName": "GetContentmanagementWorkspaceTagvalue",
      "signature": "GetContentmanagementWorkspaceTagvalue(workspaceId, tagId, expand)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string"
        },
        {
          "name": "tagId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "TagValue"
    },
    "GET /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues": {
      "functionName": "GetContentmanagementWorkspaceTagvalues",
      "signature": "GetContentmanagementWorkspaceTagvalues(workspaceId, value, pageSize, pageNumber, expand)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string"
        },
        {
          "name": "value",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "TagValueEntityListing"
    },
    "GET /api/v2/contentmanagement/workspaces": {
      "functionName": "GetContentmanagementWorkspaces",
      "signature": "GetContentmanagementWorkspaces(pageSize, pageNumber, access, expand)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "access",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "WorkspaceEntityListing"
    },
    "POST /api/v2/contentmanagement/auditquery": {
      "functionName": "PostContentmanagementAuditquery",
      "signature": "PostContentmanagementAuditquery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ContentQueryRequest"
        }
      ],
      "return": "QueryResults"
    },
    "POST /api/v2/contentmanagement/documents/{documentId}": {
      "functionName": "PostContentmanagementDocument",
      "signature": "PostContentmanagementDocument(documentId, body, expand, _override)",
      "parameters": [
        {
          "name": "documentId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DocumentUpdate"
        },
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "_override",
          "type": "bool?"
        }
      ],
      "return": "Document"
    },
    "POST /api/v2/contentmanagement/documents/{documentId}/content": {
      "functionName": "PostContentmanagementDocumentContent",
      "signature": "PostContentmanagementDocumentContent(documentId, body, _override)",
      "parameters": [
        {
          "name": "documentId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ReplaceRequest"
        },
        {
          "name": "_override",
          "type": "bool?"
        }
      ],
      "return": "ReplaceResponse"
    },
    "POST /api/v2/contentmanagement/documents": {
      "functionName": "PostContentmanagementDocuments",
      "signature": "PostContentmanagementDocuments(body, copySource, moveSource, _override)",
      "parameters": [
        {
          "name": "body",
          "type": "DocumentUpload"
        },
        {
          "name": "copySource",
          "type": "string"
        },
        {
          "name": "moveSource",
          "type": "string"
        },
        {
          "name": "_override",
          "type": "bool?"
        }
      ],
      "return": "Document"
    },
    "POST /api/v2/contentmanagement/query": {
      "functionName": "PostContentmanagementQuery",
      "signature": "PostContentmanagementQuery(body, expand)",
      "parameters": [
        {
          "name": "body",
          "type": "QueryRequest"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "QueryResults"
    },
    "POST /api/v2/contentmanagement/shares": {
      "functionName": "PostContentmanagementShares",
      "signature": "PostContentmanagementShares(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateShareRequest"
        }
      ],
      "return": "CreateShareResponse"
    },
    "POST /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues": {
      "functionName": "PostContentmanagementWorkspaceTagvalues",
      "signature": "PostContentmanagementWorkspaceTagvalues(workspaceId, body)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "TagValue"
        }
      ],
      "return": "TagValue"
    },
    "POST /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/query": {
      "functionName": "PostContentmanagementWorkspaceTagvaluesQuery",
      "signature": "PostContentmanagementWorkspaceTagvaluesQuery(workspaceId, body, expand)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "TagQueryRequest"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "TagValueEntityListing"
    },
    "POST /api/v2/contentmanagement/workspaces": {
      "functionName": "PostContentmanagementWorkspaces",
      "signature": "PostContentmanagementWorkspaces(body)",
      "parameters": [
        {
          "name": "body",
          "type": "WorkspaceCreate"
        }
      ],
      "return": "Workspace"
    },
    "PUT /api/v2/contentmanagement/workspaces/{workspaceId}": {
      "functionName": "PutContentmanagementWorkspace",
      "signature": "PutContentmanagementWorkspace(workspaceId, body)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Workspace"
        }
      ],
      "return": "Workspace"
    },
    "PUT /api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}": {
      "functionName": "PutContentmanagementWorkspaceMember",
      "signature": "PutContentmanagementWorkspaceMember(workspaceId, memberId, body)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string"
        },
        {
          "name": "memberId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "WorkspaceMember"
        }
      ],
      "return": "WorkspaceMember"
    },
    "PUT /api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}": {
      "functionName": "PutContentmanagementWorkspaceTagvalue",
      "signature": "PutContentmanagementWorkspaceTagvalue(workspaceId, tagId, body)",
      "parameters": [
        {
          "name": "workspaceId",
          "type": "string"
        },
        {
          "name": "tagId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "TagValue"
        }
      ],
      "return": "TagValue"
    }
  },
  "conversations": {
    "DELETE /api/v2/analytics/conversations/details/jobs/{jobId}": {
      "functionName": "DeleteAnalyticsConversationsDetailsJob",
      "signature": "DeleteAnalyticsConversationsDetailsJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/conversations/{conversationId}/participants/{participantId}/codes/{addCommunicationCode}": {
      "functionName": "DeleteConversationParticipantCode",
      "signature": "DeleteConversationParticipantCode(conversationId, participantId, addCommunicationCode)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "addCommunicationCode",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/conversations/{conversationId}/participants/{participantId}/flaggedreason": {
      "functionName": "DeleteConversationParticipantFlaggedreason",
      "signature": "DeleteConversationParticipantFlaggedreason(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/conversations/calls/{conversationId}/participants/{participantId}/consult": {
      "functionName": "DeleteConversationsCallParticipantConsult",
      "signature": "DeleteConversationsCallParticipantConsult(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/conversations/emails/{conversationId}/messages/draft/attachments/{attachmentId}": {
      "functionName": "DeleteConversationsEmailMessagesDraftAttachment",
      "signature": "DeleteConversationsEmailMessagesDraftAttachment(conversationId, attachmentId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "attachmentId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/conversations/messaging/integrations/facebook/{integrationId}": {
      "functionName": "DeleteConversationsMessagingIntegrationsFacebookIntegrationId",
      "signature": "DeleteConversationsMessagingIntegrationsFacebookIntegrationId(integrationId)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/conversations/messaging/integrations/line/{integrationId}": {
      "functionName": "DeleteConversationsMessagingIntegrationsLineIntegrationId",
      "signature": "DeleteConversationsMessagingIntegrationsLineIntegrationId(integrationId)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/conversations/messaging/integrations/open/{integrationId}": {
      "functionName": "DeleteConversationsMessagingIntegrationsOpenIntegrationId",
      "signature": "DeleteConversationsMessagingIntegrationsOpenIntegrationId(integrationId)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/conversations/messaging/integrations/twitter/{integrationId}": {
      "functionName": "DeleteConversationsMessagingIntegrationsTwitterIntegrationId",
      "signature": "DeleteConversationsMessagingIntegrationsTwitterIntegrationId(integrationId)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}": {
      "functionName": "DeleteConversationsMessagingIntegrationsWhatsappIntegrationId",
      "signature": "DeleteConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        }
      ],
      "return": "WhatsAppIntegration"
    },
    "DELETE /api/v2/conversations/messaging/supportedcontent/{supportedContentId}": {
      "functionName": "DeleteConversationsMessagingSupportedcontentSupportedContentId",
      "signature": "DeleteConversationsMessagingSupportedcontentSupportedContentId(supportedContentId)",
      "parameters": [
        {
          "name": "supportedContentId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/analytics/conversations/{conversationId}/details": {
      "functionName": "GetAnalyticsConversationDetails",
      "signature": "GetAnalyticsConversationDetails(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "AnalyticsConversationWithoutAttributes"
    },
    "GET /api/v2/analytics/conversations/details": {
      "functionName": "GetAnalyticsConversationsDetails",
      "signature": "GetAnalyticsConversationsDetails(id)",
      "parameters": [
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "AnalyticsConversationWithoutAttributesMultiGetResponse"
    },
    "GET /api/v2/analytics/conversations/details/jobs/{jobId}": {
      "functionName": "GetAnalyticsConversationsDetailsJob",
      "signature": "GetAnalyticsConversationsDetailsJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        }
      ],
      "return": "AsyncQueryStatus"
    },
    "GET /api/v2/analytics/conversations/details/jobs/{jobId}/results": {
      "functionName": "GetAnalyticsConversationsDetailsJobResults",
      "signature": "GetAnalyticsConversationsDetailsJobResults(jobId, cursor, pageSize)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        },
        {
          "name": "cursor",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "AnalyticsConversationAsyncQueryResponse"
    },
    "GET /api/v2/analytics/conversations/details/jobs/availability": {
      "functionName": "GetAnalyticsConversationsDetailsJobsAvailability",
      "signature": "GetAnalyticsConversationsDetailsJobsAvailability()",
      "return": "DataAvailabilityResponse"
    },
    "GET /api/v2/conversations/{conversationId}": {
      "functionName": "GetConversation",
      "signature": "GetConversation(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "Conversation"
    },
    "GET /api/v2/conversations/{conversationId}/participants/{participantId}/secureivrsessions/{secureSessionId}": {
      "functionName": "GetConversationParticipantSecureivrsession",
      "signature": "GetConversationParticipantSecureivrsession(conversationId, participantId, secureSessionId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "secureSessionId",
          "type": "string"
        }
      ],
      "return": "SecureSession"
    },
    "GET /api/v2/conversations/{conversationId}/participants/{participantId}/secureivrsessions": {
      "functionName": "GetConversationParticipantSecureivrsessions",
      "signature": "GetConversationParticipantSecureivrsessions(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        }
      ],
      "return": "SecureSessionEntityListing"
    },
    "GET /api/v2/conversations/{conversationId}/participants/{participantId}/wrapup": {
      "functionName": "GetConversationParticipantWrapup",
      "signature": "GetConversationParticipantWrapup(conversationId, participantId, provisional)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "provisional",
          "type": "bool?"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/{conversationId}/participants/{participantId}/wrapupcodes": {
      "functionName": "GetConversationParticipantWrapupcodes",
      "signature": "GetConversationParticipantWrapupcodes(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        }
      ],
      "return": "List&lt;WrapupCode&gt;"
    },
    "GET /api/v2/conversations": {
      "functionName": "GetConversations",
      "signature": "GetConversations(communicationType)",
      "parameters": [
        {
          "name": "communicationType",
          "type": "string"
        }
      ],
      "return": "ConversationEntityListing"
    },
    "GET /api/v2/conversations/calls/{conversationId}": {
      "functionName": "GetConversationsCall",
      "signature": "GetConversationsCall(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "CallConversation"
    },
    "GET /api/v2/conversations/calls/{conversationId}/participants/{participantId}/wrapup": {
      "functionName": "GetConversationsCallParticipantWrapup",
      "signature": "GetConversationsCallParticipantWrapup(conversationId, participantId, provisional)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "provisional",
          "type": "bool?"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/calls/{conversationId}/participants/{participantId}/wrapupcodes": {
      "functionName": "GetConversationsCallParticipantWrapupcodes",
      "signature": "GetConversationsCallParticipantWrapupcodes(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        }
      ],
      "return": "List&lt;WrapupCode&gt;"
    },
    "GET /api/v2/conversations/callbacks/{conversationId}": {
      "functionName": "GetConversationsCallback",
      "signature": "GetConversationsCallback(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "CallbackConversation"
    },
    "GET /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/wrapup": {
      "functionName": "GetConversationsCallbackParticipantWrapup",
      "signature": "GetConversationsCallbackParticipantWrapup(conversationId, participantId, provisional)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "provisional",
          "type": "bool?"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/wrapupcodes": {
      "functionName": "GetConversationsCallbackParticipantWrapupcodes",
      "signature": "GetConversationsCallbackParticipantWrapupcodes(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        }
      ],
      "return": "List&lt;WrapupCode&gt;"
    },
    "GET /api/v2/conversations/callbacks": {
      "functionName": "GetConversationsCallbacks",
      "signature": "GetConversationsCallbacks()",
      "return": "CallbackConversationEntityListing"
    },
    "GET /api/v2/conversations/calls": {
      "functionName": "GetConversationsCalls",
      "signature": "GetConversationsCalls()",
      "return": "CallConversationEntityListing"
    },
    "GET /api/v2/conversations/calls/history": {
      "functionName": "GetConversationsCallsHistory",
      "signature": "GetConversationsCallsHistory(pageSize, pageNumber, interval, expand)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "interval",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "CallHistoryConversationEntityListing"
    },
    "GET /api/v2/conversations/calls/maximumconferenceparties": {
      "functionName": "GetConversationsCallsMaximumconferenceparties",
      "signature": "GetConversationsCallsMaximumconferenceparties()",
      "return": "MaxParticipants"
    },
    "GET /api/v2/conversations/chats/{conversationId}": {
      "functionName": "GetConversationsChat",
      "signature": "GetConversationsChat(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "ChatConversation"
    },
    "GET /api/v2/conversations/chats/{conversationId}/messages/{messageId}": {
      "functionName": "GetConversationsChatMessage",
      "signature": "GetConversationsChatMessage(conversationId, messageId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "messageId",
          "type": "string"
        }
      ],
      "return": "WebChatMessage"
    },
    "GET /api/v2/conversations/chats/{conversationId}/messages": {
      "functionName": "GetConversationsChatMessages",
      "signature": "GetConversationsChatMessages(conversationId, after, before, sortOrder, maxResults)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "after",
          "type": "string"
        },
        {
          "name": "before",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "maxResults",
          "type": "int?"
        }
      ],
      "return": "WebChatMessageEntityList"
    },
    "GET /api/v2/conversations/chats/{conversationId}/participants/{participantId}/wrapup": {
      "functionName": "GetConversationsChatParticipantWrapup",
      "signature": "GetConversationsChatParticipantWrapup(conversationId, participantId, provisional)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "provisional",
          "type": "bool?"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/chats/{conversationId}/participants/{participantId}/wrapupcodes": {
      "functionName": "GetConversationsChatParticipantWrapupcodes",
      "signature": "GetConversationsChatParticipantWrapupcodes(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        }
      ],
      "return": "List&lt;WrapupCode&gt;"
    },
    "GET /api/v2/conversations/chats": {
      "functionName": "GetConversationsChats",
      "signature": "GetConversationsChats()",
      "return": "ChatConversationEntityListing"
    },
    "GET /api/v2/conversations/cobrowsesessions/{conversationId}": {
      "functionName": "GetConversationsCobrowsesession",
      "signature": "GetConversationsCobrowsesession(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "CobrowseConversation"
    },
    "GET /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/wrapup": {
      "functionName": "GetConversationsCobrowsesessionParticipantWrapup",
      "signature": "GetConversationsCobrowsesessionParticipantWrapup(conversationId, participantId, provisional)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "provisional",
          "type": "bool?"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/wrapupcodes": {
      "functionName": "GetConversationsCobrowsesessionParticipantWrapupcodes",
      "signature": "GetConversationsCobrowsesessionParticipantWrapupcodes(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        }
      ],
      "return": "List&lt;WrapupCode&gt;"
    },
    "GET /api/v2/conversations/cobrowsesessions": {
      "functionName": "GetConversationsCobrowsesessions",
      "signature": "GetConversationsCobrowsesessions()",
      "return": "CobrowseConversationEntityListing"
    },
    "GET /api/v2/conversations/emails/{conversationId}": {
      "functionName": "GetConversationsEmail",
      "signature": "GetConversationsEmail(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "EmailConversation"
    },
    "GET /api/v2/conversations/emails/{conversationId}/messages/{messageId}": {
      "functionName": "GetConversationsEmailMessage",
      "signature": "GetConversationsEmailMessage(conversationId, messageId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "messageId",
          "type": "string"
        }
      ],
      "return": "EmailMessage"
    },
    "GET /api/v2/conversations/emails/{conversationId}/messages": {
      "functionName": "GetConversationsEmailMessages",
      "signature": "GetConversationsEmailMessages(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "EmailMessageListing"
    },
    "GET /api/v2/conversations/emails/{conversationId}/messages/draft": {
      "functionName": "GetConversationsEmailMessagesDraft",
      "signature": "GetConversationsEmailMessagesDraft(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "EmailMessage"
    },
    "GET /api/v2/conversations/emails/{conversationId}/participants/{participantId}/wrapup": {
      "functionName": "GetConversationsEmailParticipantWrapup",
      "signature": "GetConversationsEmailParticipantWrapup(conversationId, participantId, provisional)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "provisional",
          "type": "bool?"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/emails/{conversationId}/participants/{participantId}/wrapupcodes": {
      "functionName": "GetConversationsEmailParticipantWrapupcodes",
      "signature": "GetConversationsEmailParticipantWrapupcodes(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        }
      ],
      "return": "List&lt;WrapupCode&gt;"
    },
    "GET /api/v2/conversations/emails/{conversationId}/settings": {
      "functionName": "GetConversationsEmailSettings",
      "signature": "GetConversationsEmailSettings(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "EmailsSettings"
    },
    "GET /api/v2/conversations/emails": {
      "functionName": "GetConversationsEmails",
      "signature": "GetConversationsEmails()",
      "return": "EmailConversationEntityListing"
    },
    "GET /api/v2/conversations/messages/{conversationId}": {
      "functionName": "GetConversationsMessage",
      "signature": "GetConversationsMessage(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "MessageConversation"
    },
    "GET /api/v2/conversations/messages/{conversationId}/communications/{communicationId}/messages/media/{mediaId}": {
      "functionName": "GetConversationsMessageCommunicationMessagesMediaMediaId",
      "signature": "GetConversationsMessageCommunicationMessagesMediaMediaId(conversationId, communicationId, mediaId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "communicationId",
          "type": "string"
        },
        {
          "name": "mediaId",
          "type": "string"
        }
      ],
      "return": "MessageMediaData"
    },
    "GET /api/v2/conversations/messages/{messageId}/details": {
      "functionName": "GetConversationsMessageDetails",
      "signature": "GetConversationsMessageDetails(messageId)",
      "parameters": [
        {
          "name": "messageId",
          "type": "string"
        }
      ],
      "return": "MessageData"
    },
    "GET /api/v2/conversations/messages/{conversationId}/messages/{messageId}": {
      "functionName": "GetConversationsMessageMessage",
      "signature": "GetConversationsMessageMessage(conversationId, messageId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "messageId",
          "type": "string"
        }
      ],
      "return": "MessageData"
    },
    "GET /api/v2/conversations/messages/{conversationId}/participants/{participantId}/wrapup": {
      "functionName": "GetConversationsMessageParticipantWrapup",
      "signature": "GetConversationsMessageParticipantWrapup(conversationId, participantId, provisional)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "provisional",
          "type": "bool?"
        }
      ],
      "return": "AssignedWrapupCode"
    },
    "GET /api/v2/conversations/messages/{conversationId}/participants/{participantId}/wrapupcodes": {
      "functionName": "GetConversationsMessageParticipantWrapupcodes",
      "signature": "GetConversationsMessageParticipantWrapupcodes(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        }
      ],
      "return": "List&lt;WrapupCode&gt;"
    },
    "GET /api/v2/conversations/messages": {
      "functionName": "GetConversationsMessages",
      "signature": "GetConversationsMessages()",
      "return": "MessageConversationEntityListing"
    },
    "GET /api/v2/conversations/messaging/facebook/app": {
      "functionName": "GetConversationsMessagingFacebookApp",
      "signature": "GetConversationsMessagingFacebookApp()",
      "return": "FacebookAppCredentials"
    },
    "GET /api/v2/conversations/messaging/integrations": {
      "functionName": "GetConversationsMessagingIntegrations",
      "signature": "GetConversationsMessagingIntegrations(pageSize, pageNumber, expand, supportedContentId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "supportedContentId",
          "type": "string"
        }
      ],
      "return": "MessagingIntegrationEntityListing"
    },
    "GET /api/v2/conversations/messaging/integrations/facebook": {
      "functionName": "GetConversationsMessagingIntegrationsFacebook",
      "signature": "GetConversationsMessagingIntegrationsFacebook(pageSize, pageNumber, expand, supportedContentId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "supportedContentId",
          "type": "string"
        }
      ],
      "return": "FacebookIntegrationEntityListing"
    },
    "GET /api/v2/conversations/messaging/integrations/facebook/{integrationId}": {
      "functionName": "GetConversationsMessagingIntegrationsFacebookIntegrationId",
      "signature": "GetConversationsMessagingIntegrationsFacebookIntegrationId(integrationId, expand)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "FacebookIntegration"
    },
    "GET /api/v2/conversations/messaging/integrations/line": {
      "functionName": "GetConversationsMessagingIntegrationsLine",
      "signature": "GetConversationsMessagingIntegrationsLine(pageSize, pageNumber, expand, supportedContentId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "supportedContentId",
          "type": "string"
        }
      ],
      "return": "LineIntegrationEntityListing"
    },
    "GET /api/v2/conversations/messaging/integrations/line/{integrationId}": {
      "functionName": "GetConversationsMessagingIntegrationsLineIntegrationId",
      "signature": "GetConversationsMessagingIntegrationsLineIntegrationId(integrationId, expand)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "LineIntegration"
    },
    "GET /api/v2/conversations/messaging/integrations/open": {
      "functionName": "GetConversationsMessagingIntegrationsOpen",
      "signature": "GetConversationsMessagingIntegrationsOpen(pageSize, pageNumber, expand, supportedContentId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "supportedContentId",
          "type": "string"
        }
      ],
      "return": "OpenIntegrationEntityListing"
    },
    "GET /api/v2/conversations/messaging/integrations/open/{integrationId}": {
      "functionName": "GetConversationsMessagingIntegrationsOpenIntegrationId",
      "signature": "GetConversationsMessagingIntegrationsOpenIntegrationId(integrationId, expand)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "OpenIntegration"
    },
    "GET /api/v2/conversations/messaging/integrations/twitter": {
      "functionName": "GetConversationsMessagingIntegrationsTwitter",
      "signature": "GetConversationsMessagingIntegrationsTwitter(pageSize, pageNumber, expand, supportedContentId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "supportedContentId",
          "type": "string"
        }
      ],
      "return": "TwitterIntegrationEntityListing"
    },
    "GET /api/v2/conversations/messaging/integrations/twitter/{integrationId}": {
      "functionName": "GetConversationsMessagingIntegrationsTwitterIntegrationId",
      "signature": "GetConversationsMessagingIntegrationsTwitterIntegrationId(integrationId, expand)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "TwitterIntegration"
    },
    "GET /api/v2/conversations/messaging/integrations/whatsapp": {
      "functionName": "GetConversationsMessagingIntegrationsWhatsapp",
      "signature": "GetConversationsMessagingIntegrationsWhatsapp(pageSize, pageNumber, expand, supportedContentId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "supportedContentId",
          "type": "string"
        }
      ],
      "return": "WhatsAppIntegrationEntityListing"
    },
    "GET /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}": {
      "functionName": "GetConversationsMessagingIntegrationsWhatsappIntegrationId",
      "signature": "GetConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId, expand)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "WhatsAppIntegration"
    },
    "GET /api/v2/conversations/messaging/stickers/{messengerType}": {
      "functionName": "GetConversationsMessagingSticker",
      "signature": "GetConversationsMessagingSticker(messengerType, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "messengerType",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "MessagingStickerEntityListing"
    },
    "GET /api/v2/conversations/messaging/supportedcontent": {
      "functionName": "GetConversationsMessagingSupportedcontent",
      "signature": "GetConversationsMessagingSupportedcontent(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "SupportedContentListing"
    },
    "GET /api/v2/conversations/messaging/supportedcontent/default": {
      "functionName": "GetConversationsMessagingSupportedcontentDefault",
      "signature": "GetConversationsMessagingSupportedcontentDefault()",
      "return": "SupportedContent"
    },
    "GET /api/v2/conversations/messaging/supportedcontent/{supportedContentId}": {
      "functionName": "GetConversationsMessagingSupportedcontentSupportedContentId",
      "signature": "GetConversationsMessagingSupportedcontentSupportedContentId(supportedContentId)",
      "parameters": [
        {
          "name": "supportedContentId",
          "type": "string"
        }
      ],
      "return": "SupportedContent"
    },
    "GET /api/v2/conversations/messaging/threadingtimeline": {
      "functionName": "GetConversationsMessagingThreadingtimeline",
      "signature": "GetConversationsMessagingThreadingtimeline()",
      "return": "ConversationThreadingWindow"
    },
    "PATCH /api/v2/conversations/{conversationId}/participants/{participantId}": {
      "functionName": "PatchConversationParticipant",
      "signature": "PatchConversationParticipant(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ]
    },
    "PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes": {
      "functionName": "PatchConversationParticipantAttributes",
      "signature": "PatchConversationParticipantAttributes(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ParticipantAttributes"
        }
      ]
    },
    "PATCH /api/v2/conversations/calls/{conversationId}": {
      "functionName": "PatchConversationsCall",
      "signature": "PatchConversationsCall(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Conversation"
        }
      ],
      "return": "Conversation"
    },
    "PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}": {
      "functionName": "PatchConversationsCallParticipant",
      "signature": "PatchConversationsCallParticipant(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ]
    },
    "PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}/attributes": {
      "functionName": "PatchConversationsCallParticipantAttributes",
      "signature": "PatchConversationsCallParticipantAttributes(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ParticipantAttributes"
        }
      ]
    },
    "PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}/communications/{communicationId}": {
      "functionName": "PatchConversationsCallParticipantCommunication",
      "signature": "PatchConversationsCallParticipantCommunication(conversationId, participantId, communicationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "communicationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ],
      "return": "Empty"
    },
    "PATCH /api/v2/conversations/calls/{conversationId}/participants/{participantId}/consult": {
      "functionName": "PatchConversationsCallParticipantConsult",
      "signature": "PatchConversationsCallParticipantConsult(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ConsultTransferUpdate"
        }
      ],
      "return": "ConsultTransferResponse"
    },
    "PATCH /api/v2/conversations/callbacks/{conversationId}": {
      "functionName": "PatchConversationsCallback",
      "signature": "PatchConversationsCallback(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Conversation"
        }
      ],
      "return": "Conversation"
    },
    "PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}": {
      "functionName": "PatchConversationsCallbackParticipant",
      "signature": "PatchConversationsCallbackParticipant(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ]
    },
    "PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/attributes": {
      "functionName": "PatchConversationsCallbackParticipantAttributes",
      "signature": "PatchConversationsCallbackParticipantAttributes(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ParticipantAttributes"
        }
      ]
    },
    "PATCH /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}": {
      "functionName": "PatchConversationsCallbackParticipantCommunication",
      "signature": "PatchConversationsCallbackParticipantCommunication(conversationId, participantId, communicationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "communicationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ],
      "return": "Empty"
    },
    "PATCH /api/v2/conversations/chats/{conversationId}": {
      "functionName": "PatchConversationsChat",
      "signature": "PatchConversationsChat(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Conversation"
        }
      ],
      "return": "Conversation"
    },
    "PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}": {
      "functionName": "PatchConversationsChatParticipant",
      "signature": "PatchConversationsChatParticipant(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ]
    },
    "PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes": {
      "functionName": "PatchConversationsChatParticipantAttributes",
      "signature": "PatchConversationsChatParticipantAttributes(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ParticipantAttributes"
        }
      ]
    },
    "PATCH /api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}": {
      "functionName": "PatchConversationsChatParticipantCommunication",
      "signature": "PatchConversationsChatParticipantCommunication(conversationId, participantId, communicationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "communicationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ],
      "return": "Empty"
    },
    "PATCH /api/v2/conversations/cobrowsesessions/{conversationId}": {
      "functionName": "PatchConversationsCobrowsesession",
      "signature": "PatchConversationsCobrowsesession(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Conversation"
        }
      ],
      "return": "Conversation"
    },
    "PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}": {
      "functionName": "PatchConversationsCobrowsesessionParticipant",
      "signature": "PatchConversationsCobrowsesessionParticipant(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ]
    },
    "PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes": {
      "functionName": "PatchConversationsCobrowsesessionParticipantAttributes",
      "signature": "PatchConversationsCobrowsesessionParticipantAttributes(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ParticipantAttributes"
        }
      ]
    },
    "PATCH /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}": {
      "functionName": "PatchConversationsCobrowsesessionParticipantCommunication",
      "signature": "PatchConversationsCobrowsesessionParticipantCommunication(conversationId, participantId, communicationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "communicationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ],
      "return": "Empty"
    },
    "PATCH /api/v2/conversations/emails/{conversationId}": {
      "functionName": "PatchConversationsEmail",
      "signature": "PatchConversationsEmail(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Conversation"
        }
      ],
      "return": "Conversation"
    },
    "PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}": {
      "functionName": "PatchConversationsEmailParticipant",
      "signature": "PatchConversationsEmailParticipant(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ]
    },
    "PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/attributes": {
      "functionName": "PatchConversationsEmailParticipantAttributes",
      "signature": "PatchConversationsEmailParticipantAttributes(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ParticipantAttributes"
        }
      ]
    },
    "PATCH /api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}": {
      "functionName": "PatchConversationsEmailParticipantCommunication",
      "signature": "PatchConversationsEmailParticipantCommunication(conversationId, participantId, communicationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "communicationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ],
      "return": "Empty"
    },
    "PATCH /api/v2/conversations/messages/{conversationId}": {
      "functionName": "PatchConversationsMessage",
      "signature": "PatchConversationsMessage(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Conversation"
        }
      ],
      "return": "Conversation"
    },
    "PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}": {
      "functionName": "PatchConversationsMessageParticipant",
      "signature": "PatchConversationsMessageParticipant(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ]
    },
    "PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/attributes": {
      "functionName": "PatchConversationsMessageParticipantAttributes",
      "signature": "PatchConversationsMessageParticipantAttributes(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ParticipantAttributes"
        }
      ]
    },
    "PATCH /api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}": {
      "functionName": "PatchConversationsMessageParticipantCommunication",
      "signature": "PatchConversationsMessageParticipantCommunication(conversationId, participantId, communicationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "communicationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "MediaParticipantRequest"
        }
      ],
      "return": "Empty"
    },
    "PATCH /api/v2/conversations/messaging/integrations/facebook/{integrationId}": {
      "functionName": "PatchConversationsMessagingIntegrationsFacebookIntegrationId",
      "signature": "PatchConversationsMessagingIntegrationsFacebookIntegrationId(integrationId, body)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "FacebookIntegrationUpdateRequest"
        }
      ],
      "return": "FacebookIntegration"
    },
    "PATCH /api/v2/conversations/messaging/integrations/open/{integrationId}": {
      "functionName": "PatchConversationsMessagingIntegrationsOpenIntegrationId",
      "signature": "PatchConversationsMessagingIntegrationsOpenIntegrationId(integrationId, body)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "OpenIntegrationUpdateRequest"
        }
      ],
      "return": "OpenIntegration"
    },
    "PATCH /api/v2/conversations/messaging/integrations/twitter/{integrationId}": {
      "functionName": "PatchConversationsMessagingIntegrationsTwitterIntegrationId",
      "signature": "PatchConversationsMessagingIntegrationsTwitterIntegrationId(integrationId, body)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "TwitterIntegrationRequest"
        }
      ],
      "return": "TwitterIntegration"
    },
    "PATCH /api/v2/conversations/messaging/integrations/whatsapp/{integrationId}": {
      "functionName": "PatchConversationsMessagingIntegrationsWhatsappIntegrationId",
      "signature": "PatchConversationsMessagingIntegrationsWhatsappIntegrationId(integrationId, body)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "WhatsAppIntegrationUpdateRequest"
        }
      ],
      "return": "WhatsAppIntegration"
    },
    "PATCH /api/v2/conversations/messaging/supportedcontent/{supportedContentId}": {
      "functionName": "PatchConversationsMessagingSupportedcontentSupportedContentId",
      "signature": "PatchConversationsMessagingSupportedcontentSupportedContentId(supportedContentId, body)",
      "parameters": [
        {
          "name": "supportedContentId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "SupportedContent"
        }
      ],
      "return": "SupportedContent"
    },
    "POST /api/v2/analytics/conversations/{conversationId}/details/properties": {
      "functionName": "PostAnalyticsConversationDetailsProperties",
      "signature": "PostAnalyticsConversationDetailsProperties(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "PropertyIndexRequest"
        }
      ],
      "return": "PropertyIndexRequest"
    },
    "POST /api/v2/analytics/conversations/aggregates/query": {
      "functionName": "PostAnalyticsConversationsAggregatesQuery",
      "signature": "PostAnalyticsConversationsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ConversationAggregationQuery"
        }
      ],
      "return": "ConversationAggregateQueryResponse"
    },
    "POST /api/v2/analytics/conversations/details/jobs": {
      "functionName": "PostAnalyticsConversationsDetailsJobs",
      "signature": "PostAnalyticsConversationsDetailsJobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AsyncConversationQuery"
        }
      ],
      "return": "AsyncQueryResponse"
    },
    "POST /api/v2/analytics/conversations/details/query": {
      "functionName": "PostAnalyticsConversationsDetailsQuery",
      "signature": "PostAnalyticsConversationsDetailsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ConversationQuery"
        }
      ],
      "return": "AnalyticsConversationQueryResponse"
    },
    "POST /api/v2/conversations/{conversationId}/assign": {
      "functionName": "PostConversationAssign",
      "signature": "PostConversationAssign(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ConversationUser"
        }
      ],
      "return": "string"
    },
    "POST /api/v2/conversations/{conversationId}/disconnect": {
      "functionName": "PostConversationDisconnect",
      "signature": "PostConversationDisconnect(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "string"
    },
    "POST /api/v2/conversations/{conversationId}/participants/{participantId}/callbacks": {
      "functionName": "PostConversationParticipantCallbacks",
      "signature": "PostConversationParticipantCallbacks(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CreateCallbackOnConversationCommand"
        }
      ]
    },
    "POST /api/v2/conversations/{conversationId}/participants/{participantId}/digits": {
      "functionName": "PostConversationParticipantDigits",
      "signature": "PostConversationParticipantDigits(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Digits"
        }
      ]
    },
    "POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace": {
      "functionName": "PostConversationParticipantReplace",
      "signature": "PostConversationParticipantReplace(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "TransferRequest"
        }
      ]
    },
    "POST /api/v2/conversations/{conversationId}/participants/{participantId}/secureivrsessions": {
      "functionName": "PostConversationParticipantSecureivrsessions",
      "signature": "PostConversationParticipantSecureivrsessions(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CreateSecureSession"
        }
      ],
      "return": "SecureSession"
    },
    "POST /api/v2/conversations/calls/{conversationId}": {
      "functionName": "PostConversationsCall",
      "signature": "PostConversationsCall(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CallCommand"
        }
      ],
      "return": "Conversation"
    },
    "POST /api/v2/conversations/calls/{conversationId}/participants/{participantId}/coach": {
      "functionName": "PostConversationsCallParticipantCoach",
      "signature": "PostConversationsCallParticipantCoach(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        }
      ]
    },
    "POST /api/v2/conversations/calls/{conversationId}/participants/{participantId}/consult": {
      "functionName": "PostConversationsCallParticipantConsult",
      "signature": "PostConversationsCallParticipantConsult(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ConsultTransfer"
        }
      ],
      "return": "ConsultTransferResponse"
    },
    "POST /api/v2/conversations/calls/{conversationId}/participants/{participantId}/monitor": {
      "functionName": "PostConversationsCallParticipantMonitor",
      "signature": "PostConversationsCallParticipantMonitor(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        }
      ]
    },
    "POST /api/v2/conversations/calls/{conversationId}/participants/{participantId}/replace": {
      "functionName": "PostConversationsCallParticipantReplace",
      "signature": "PostConversationsCallParticipantReplace(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "TransferRequest"
        }
      ]
    },
    "POST /api/v2/conversations/calls/{conversationId}/participants": {
      "functionName": "PostConversationsCallParticipants",
      "signature": "PostConversationsCallParticipants(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Conversation"
        }
      ],
      "return": "Conversation"
    },
    "POST /api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/replace": {
      "functionName": "PostConversationsCallbackParticipantReplace",
      "signature": "PostConversationsCallbackParticipantReplace(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "TransferRequest"
        }
      ]
    },
    "POST /api/v2/conversations/callbacks": {
      "functionName": "PostConversationsCallbacks",
      "signature": "PostConversationsCallbacks(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateCallbackCommand"
        }
      ],
      "return": "CreateCallbackResponse"
    },
    "POST /api/v2/conversations/calls": {
      "functionName": "PostConversationsCalls",
      "signature": "PostConversationsCalls(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateCallRequest"
        }
      ],
      "return": "CreateCallResponse"
    },
    "POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/messages": {
      "functionName": "PostConversationsChatCommunicationMessages",
      "signature": "PostConversationsChatCommunicationMessages(conversationId, communicationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "communicationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CreateWebChatMessageRequest"
        }
      ],
      "return": "WebChatMessage"
    },
    "POST /api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing": {
      "functionName": "PostConversationsChatCommunicationTyping",
      "signature": "PostConversationsChatCommunicationTyping(conversationId, communicationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "communicationId",
          "type": "string"
        }
      ],
      "return": "WebChatTyping"
    },
    "POST /api/v2/conversations/chats/{conversationId}/participants/{participantId}/replace": {
      "functionName": "PostConversationsChatParticipantReplace",
      "signature": "PostConversationsChatParticipantReplace(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "TransferRequest"
        }
      ]
    },
    "POST /api/v2/conversations/chats": {
      "functionName": "PostConversationsChats",
      "signature": "PostConversationsChats(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateWebChatRequest"
        }
      ],
      "return": "ChatConversation"
    },
    "POST /api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace": {
      "functionName": "PostConversationsCobrowsesessionParticipantReplace",
      "signature": "PostConversationsCobrowsesessionParticipantReplace(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "TransferRequest"
        }
      ]
    },
    "POST /api/v2/conversations/emails/{conversationId}/inboundmessages": {
      "functionName": "PostConversationsEmailInboundmessages",
      "signature": "PostConversationsEmailInboundmessages(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "InboundMessageRequest"
        }
      ],
      "return": "EmailConversation"
    },
    "POST /api/v2/conversations/emails/{conversationId}/messages": {
      "functionName": "PostConversationsEmailMessages",
      "signature": "PostConversationsEmailMessages(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "EmailMessage"
        }
      ],
      "return": "EmailMessage"
    },
    "POST /api/v2/conversations/emails/{conversationId}/messages/draft/attachments/copy": {
      "functionName": "PostConversationsEmailMessagesDraftAttachmentsCopy",
      "signature": "PostConversationsEmailMessagesDraftAttachmentsCopy(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CopyAttachmentsRequest"
        }
      ],
      "return": "EmailMessage"
    },
    "POST /api/v2/conversations/emails/{conversationId}/participants/{participantId}/replace": {
      "functionName": "PostConversationsEmailParticipantReplace",
      "signature": "PostConversationsEmailParticipantReplace(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "TransferRequest"
        }
      ]
    },
    "POST /api/v2/conversations/emails": {
      "functionName": "PostConversationsEmails",
      "signature": "PostConversationsEmails(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateEmailRequest"
        }
      ],
      "return": "EmailConversation"
    },
    "POST /api/v2/conversations/faxes": {
      "functionName": "PostConversationsFaxes",
      "signature": "PostConversationsFaxes(body)",
      "parameters": [
        {
          "name": "body",
          "type": "FaxSendRequest"
        }
      ],
      "return": "FaxSendResponse"
    },
    "POST /api/v2/conversations/messages/{conversationId}/communications/{communicationId}/messages": {
      "functionName": "PostConversationsMessageCommunicationMessages",
      "signature": "PostConversationsMessageCommunicationMessages(conversationId, communicationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "communicationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "AdditionalMessage"
        }
      ],
      "return": "MessageData"
    },
    "POST /api/v2/conversations/messages/{conversationId}/communications/{communicationId}/messages/media": {
      "functionName": "PostConversationsMessageCommunicationMessagesMedia",
      "signature": "PostConversationsMessageCommunicationMessagesMedia(conversationId, communicationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "communicationId",
          "type": "string"
        }
      ],
      "return": "MessageMediaData"
    },
    "POST /api/v2/conversations/messages/{conversationId}/messages/bulk": {
      "functionName": "PostConversationsMessageMessagesBulk",
      "signature": "PostConversationsMessageMessagesBulk(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "TextMessageListing"
    },
    "POST /api/v2/conversations/messages/{conversationId}/participants/{participantId}/replace": {
      "functionName": "PostConversationsMessageParticipantReplace",
      "signature": "PostConversationsMessageParticipantReplace(conversationId, participantId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "TransferRequest"
        }
      ]
    },
    "POST /api/v2/conversations/messages": {
      "functionName": "PostConversationsMessages",
      "signature": "PostConversationsMessages(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateOutboundMessagingConversationRequest"
        }
      ],
      "return": "MessageConversation"
    },
    "POST /api/v2/conversations/messages/agentless": {
      "functionName": "PostConversationsMessagesAgentless",
      "signature": "PostConversationsMessagesAgentless(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SendAgentlessOutboundMessageRequest"
        }
      ],
      "return": "SendAgentlessOutboundMessageResponse"
    },
    "POST /api/v2/conversations/messages/inbound/open": {
      "functionName": "PostConversationsMessagesInboundOpen",
      "signature": "PostConversationsMessagesInboundOpen(body)",
      "parameters": [
        {
          "name": "body",
          "type": "OpenNormalizedMessage"
        }
      ],
      "return": "OpenNormalizedMessage"
    },
    "POST /api/v2/conversations/messaging/integrations/facebook": {
      "functionName": "PostConversationsMessagingIntegrationsFacebook",
      "signature": "PostConversationsMessagingIntegrationsFacebook(body)",
      "parameters": [
        {
          "name": "body",
          "type": "FacebookIntegrationRequest"
        }
      ],
      "return": "FacebookIntegration"
    },
    "POST /api/v2/conversations/messaging/integrations/line": {
      "functionName": "PostConversationsMessagingIntegrationsLine",
      "signature": "PostConversationsMessagingIntegrationsLine(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LineIntegrationRequest"
        }
      ],
      "return": "LineIntegration"
    },
    "POST /api/v2/conversations/messaging/integrations/open": {
      "functionName": "PostConversationsMessagingIntegrationsOpen",
      "signature": "PostConversationsMessagingIntegrationsOpen(body)",
      "parameters": [
        {
          "name": "body",
          "type": "OpenIntegrationRequest"
        }
      ],
      "return": "OpenIntegration"
    },
    "POST /api/v2/conversations/messaging/integrations/twitter": {
      "functionName": "PostConversationsMessagingIntegrationsTwitter",
      "signature": "PostConversationsMessagingIntegrationsTwitter(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TwitterIntegrationRequest"
        }
      ],
      "return": "TwitterIntegration"
    },
    "POST /api/v2/conversations/messaging/integrations/whatsapp": {
      "functionName": "PostConversationsMessagingIntegrationsWhatsapp",
      "signature": "PostConversationsMessagingIntegrationsWhatsapp(body)",
      "parameters": [
        {
          "name": "body",
          "type": "WhatsAppIntegrationRequest"
        }
      ],
      "return": "WhatsAppIntegration"
    },
    "POST /api/v2/conversations/messaging/supportedcontent": {
      "functionName": "PostConversationsMessagingSupportedcontent",
      "signature": "PostConversationsMessagingSupportedcontent(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SupportedContent"
        }
      ],
      "return": "SupportedContent"
    },
    "PUT /api/v2/conversations/{conversationId}/participants/{participantId}/flaggedreason": {
      "functionName": "PutConversationParticipantFlaggedreason",
      "signature": "PutConversationParticipantFlaggedreason(conversationId, participantId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        }
      ]
    },
    "PUT /api/v2/conversations/{conversationId}/tags": {
      "functionName": "PutConversationTags",
      "signature": "PutConversationTags(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ConversationTagsUpdate"
        }
      ],
      "return": "string"
    },
    "PUT /api/v2/conversations/calls/{conversationId}/participants/{participantId}/communications/{communicationId}/uuidata": {
      "functionName": "PutConversationsCallParticipantCommunicationUuidata",
      "signature": "PutConversationsCallParticipantCommunicationUuidata(conversationId, participantId, communicationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "participantId",
          "type": "string"
        },
        {
          "name": "communicationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "SetUuiDataRequest"
        }
      ],
      "return": "Empty"
    },
    "PUT /api/v2/conversations/emails/{conversationId}/messages/draft": {
      "functionName": "PutConversationsEmailMessagesDraft",
      "signature": "PutConversationsEmailMessagesDraft(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "EmailMessage"
        }
      ],
      "return": "EmailMessage"
    },
    "PUT /api/v2/conversations/messaging/integrations/line/{integrationId}": {
      "functionName": "PutConversationsMessagingIntegrationsLineIntegrationId",
      "signature": "PutConversationsMessagingIntegrationsLineIntegrationId(integrationId, body)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "LineIntegrationRequest"
        }
      ],
      "return": "LineIntegration"
    },
    "PUT /api/v2/conversations/messaging/supportedcontent/default": {
      "functionName": "PutConversationsMessagingSupportedcontentDefault",
      "signature": "PutConversationsMessagingSupportedcontentDefault(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SupportedContentReference"
        }
      ],
      "return": "SupportedContent"
    },
    "PUT /api/v2/conversations/messaging/threadingtimeline": {
      "functionName": "PutConversationsMessagingThreadingtimeline",
      "signature": "PutConversationsMessagingThreadingtimeline(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ConversationThreadingWindow"
        }
      ],
      "return": "ConversationThreadingWindow"
    }
  },
  "dataextensions": {
    "GET /api/v2/dataextensions/coretypes/{coretypeName}": {
      "functionName": "GetDataextensionsCoretype",
      "signature": "GetDataextensionsCoretype(coretypeName)",
      "parameters": [
        {
          "name": "coretypeName",
          "type": "string"
        }
      ],
      "return": "Coretype"
    },
    "GET /api/v2/dataextensions/coretypes": {
      "functionName": "GetDataextensionsCoretypes",
      "signature": "GetDataextensionsCoretypes()",
      "return": "CoretypeListing"
    },
    "GET /api/v2/dataextensions/limits": {
      "functionName": "GetDataextensionsLimits",
      "signature": "GetDataextensionsLimits()",
      "return": "SchemaQuantityLimits"
    }
  },
  "externalcontacts": {
    "DELETE /api/v2/externalcontacts/contacts/{contactId}": {
      "functionName": "DeleteExternalcontactsContact",
      "signature": "DeleteExternalcontactsContact(contactId)",
      "parameters": [
        {
          "name": "contactId",
          "type": "string"
        }
      ],
      "return": "Empty"
    },
    "DELETE /api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}": {
      "functionName": "DeleteExternalcontactsContactNote",
      "signature": "DeleteExternalcontactsContactNote(contactId, noteId)",
      "parameters": [
        {
          "name": "contactId",
          "type": "string"
        },
        {
          "name": "noteId",
          "type": "string"
        }
      ],
      "return": "Empty"
    },
    "DELETE /api/v2/externalcontacts/contacts/schemas/{schemaId}": {
      "functionName": "DeleteExternalcontactsContactsSchema",
      "signature": "DeleteExternalcontactsContactsSchema(schemaId)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/externalcontacts/organizations/{externalOrganizationId}": {
      "functionName": "DeleteExternalcontactsOrganization",
      "signature": "DeleteExternalcontactsOrganization(externalOrganizationId)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "string"
        }
      ],
      "return": "Empty"
    },
    "DELETE /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}": {
      "functionName": "DeleteExternalcontactsOrganizationNote",
      "signature": "DeleteExternalcontactsOrganizationNote(externalOrganizationId, noteId)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "string"
        },
        {
          "name": "noteId",
          "type": "string"
        }
      ],
      "return": "Empty"
    },
    "DELETE /api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor": {
      "functionName": "DeleteExternalcontactsOrganizationTrustor",
      "signature": "DeleteExternalcontactsOrganizationTrustor(externalOrganizationId)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/externalcontacts/relationships/{relationshipId}": {
      "functionName": "DeleteExternalcontactsRelationship",
      "signature": "DeleteExternalcontactsRelationship(relationshipId)",
      "parameters": [
        {
          "name": "relationshipId",
          "type": "string"
        }
      ],
      "return": "Empty"
    },
    "GET /api/v2/externalcontacts/contacts/{contactId}": {
      "functionName": "GetExternalcontactsContact",
      "signature": "GetExternalcontactsContact(contactId, expand)",
      "parameters": [
        {
          "name": "contactId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "ExternalContact"
    },
    "GET /api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}": {
      "functionName": "GetExternalcontactsContactNote",
      "signature": "GetExternalcontactsContactNote(contactId, noteId, expand)",
      "parameters": [
        {
          "name": "contactId",
          "type": "string"
        },
        {
          "name": "noteId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "Note"
    },
    "GET /api/v2/externalcontacts/contacts/{contactId}/notes": {
      "functionName": "GetExternalcontactsContactNotes",
      "signature": "GetExternalcontactsContactNotes(contactId, pageSize, pageNumber, sortOrder, expand)",
      "parameters": [
        {
          "name": "contactId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "NoteListing"
    },
    "GET /api/v2/externalcontacts/contacts": {
      "functionName": "GetExternalcontactsContacts",
      "signature": "GetExternalcontactsContacts(pageSize, pageNumber, q, sortOrder, expand)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "q",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "ContactListing"
    },
    "GET /api/v2/externalcontacts/contacts/schemas/{schemaId}": {
      "functionName": "GetExternalcontactsContactsSchema",
      "signature": "GetExternalcontactsContactsSchema(schemaId)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "string"
        }
      ],
      "return": "DataSchema"
    },
    "GET /api/v2/externalcontacts/contacts/schemas/{schemaId}/versions/{versionId}": {
      "functionName": "GetExternalcontactsContactsSchemaVersion",
      "signature": "GetExternalcontactsContactsSchemaVersion(schemaId, versionId)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "string"
        },
        {
          "name": "versionId",
          "type": "string"
        }
      ],
      "return": "DataSchema"
    },
    "GET /api/v2/externalcontacts/contacts/schemas/{schemaId}/versions": {
      "functionName": "GetExternalcontactsContactsSchemaVersions",
      "signature": "GetExternalcontactsContactsSchemaVersions(schemaId)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "string"
        }
      ],
      "return": "DataSchema"
    },
    "GET /api/v2/externalcontacts/contacts/schemas": {
      "functionName": "GetExternalcontactsContactsSchemas",
      "signature": "GetExternalcontactsContactsSchemas()",
      "return": "DataSchemaListing"
    },
    "GET /api/v2/externalcontacts/organizations/{externalOrganizationId}": {
      "functionName": "GetExternalcontactsOrganization",
      "signature": "GetExternalcontactsOrganization(externalOrganizationId, expand, includeTrustors)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "includeTrustors",
          "type": "bool?"
        }
      ],
      "return": "ExternalOrganization"
    },
    "GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/contacts": {
      "functionName": "GetExternalcontactsOrganizationContacts",
      "signature": "GetExternalcontactsOrganizationContacts(externalOrganizationId, pageSize, pageNumber, q, sortOrder, expand)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "q",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "ContactListing"
    },
    "GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}": {
      "functionName": "GetExternalcontactsOrganizationNote",
      "signature": "GetExternalcontactsOrganizationNote(externalOrganizationId, noteId, expand)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "string"
        },
        {
          "name": "noteId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "Note"
    },
    "GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes": {
      "functionName": "GetExternalcontactsOrganizationNotes",
      "signature": "GetExternalcontactsOrganizationNotes(externalOrganizationId, pageSize, pageNumber, sortOrder, expand)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "NoteListing"
    },
    "GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/relationships": {
      "functionName": "GetExternalcontactsOrganizationRelationships",
      "signature": "GetExternalcontactsOrganizationRelationships(externalOrganizationId, pageSize, pageNumber, expand, sortOrder)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "RelationshipListing"
    },
    "GET /api/v2/externalcontacts/organizations": {
      "functionName": "GetExternalcontactsOrganizations",
      "signature": "GetExternalcontactsOrganizations(pageSize, pageNumber, q, trustorId, sortOrder, expand, includeTrustors)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "q",
          "type": "string"
        },
        {
          "name": "trustorId",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "includeTrustors",
          "type": "bool?"
        }
      ],
      "return": "ExternalOrganizationListing"
    },
    "GET /api/v2/externalcontacts/organizations/schemas/{schemaId}": {
      "functionName": "GetExternalcontactsOrganizationsSchema",
      "signature": "GetExternalcontactsOrganizationsSchema(schemaId)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "string"
        }
      ],
      "return": "DataSchema"
    },
    "GET /api/v2/externalcontacts/organizations/schemas/{schemaId}/versions/{versionId}": {
      "functionName": "GetExternalcontactsOrganizationsSchemaVersion",
      "signature": "GetExternalcontactsOrganizationsSchemaVersion(schemaId, versionId)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "string"
        },
        {
          "name": "versionId",
          "type": "string"
        }
      ],
      "return": "DataSchema"
    },
    "GET /api/v2/externalcontacts/organizations/schemas/{schemaId}/versions": {
      "functionName": "GetExternalcontactsOrganizationsSchemaVersions",
      "signature": "GetExternalcontactsOrganizationsSchemaVersions(schemaId)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "string"
        }
      ],
      "return": "DataSchema"
    },
    "GET /api/v2/externalcontacts/organizations/schemas": {
      "functionName": "GetExternalcontactsOrganizationsSchemas",
      "signature": "GetExternalcontactsOrganizationsSchemas()",
      "return": "DataSchemaListing"
    },
    "GET /api/v2/externalcontacts/relationships/{relationshipId}": {
      "functionName": "GetExternalcontactsRelationship",
      "signature": "GetExternalcontactsRelationship(relationshipId, expand)",
      "parameters": [
        {
          "name": "relationshipId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "Relationship"
    },
    "GET /api/v2/externalcontacts/reversewhitepageslookup": {
      "functionName": "GetExternalcontactsReversewhitepageslookup",
      "signature": "GetExternalcontactsReversewhitepageslookup(lookupVal, expand)",
      "parameters": [
        {
          "name": "lookupVal",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "ReverseWhitepagesLookupResult"
    },
    "GET /api/v2/externalcontacts/scan/contacts": {
      "functionName": "GetExternalcontactsScanContacts",
      "signature": "GetExternalcontactsScanContacts(limit, cursor)",
      "parameters": [
        {
          "name": "limit",
          "type": "int?"
        },
        {
          "name": "cursor",
          "type": "string"
        }
      ],
      "return": "CursorContactListing"
    },
    "GET /api/v2/externalcontacts/scan/notes": {
      "functionName": "GetExternalcontactsScanNotes",
      "signature": "GetExternalcontactsScanNotes(limit, cursor)",
      "parameters": [
        {
          "name": "limit",
          "type": "int?"
        },
        {
          "name": "cursor",
          "type": "string"
        }
      ],
      "return": "CursorNoteListing"
    },
    "GET /api/v2/externalcontacts/scan/organizations": {
      "functionName": "GetExternalcontactsScanOrganizations",
      "signature": "GetExternalcontactsScanOrganizations(limit, cursor)",
      "parameters": [
        {
          "name": "limit",
          "type": "int?"
        },
        {
          "name": "cursor",
          "type": "string"
        }
      ],
      "return": "CursorOrganizationListing"
    },
    "GET /api/v2/externalcontacts/scan/relationships": {
      "functionName": "GetExternalcontactsScanRelationships",
      "signature": "GetExternalcontactsScanRelationships(limit, cursor)",
      "parameters": [
        {
          "name": "limit",
          "type": "int?"
        },
        {
          "name": "cursor",
          "type": "string"
        }
      ],
      "return": "CursorRelationshipListing"
    },
    "POST /api/v2/externalcontacts/bulk/contacts": {
      "functionName": "PostExternalcontactsBulkContacts",
      "signature": "PostExternalcontactsBulkContacts(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkIdsRequest"
        }
      ],
      "return": "BulkFetchContactsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/contacts/add": {
      "functionName": "PostExternalcontactsBulkContactsAdd",
      "signature": "PostExternalcontactsBulkContactsAdd(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkContactsRequest"
        }
      ],
      "return": "BulkContactsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/contacts/remove": {
      "functionName": "PostExternalcontactsBulkContactsRemove",
      "signature": "PostExternalcontactsBulkContactsRemove(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkIdsRequest"
        }
      ],
      "return": "BulkDeleteResponse"
    },
    "POST /api/v2/externalcontacts/bulk/contacts/update": {
      "functionName": "PostExternalcontactsBulkContactsUpdate",
      "signature": "PostExternalcontactsBulkContactsUpdate(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkContactsRequest"
        }
      ],
      "return": "BulkContactsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/notes": {
      "functionName": "PostExternalcontactsBulkNotes",
      "signature": "PostExternalcontactsBulkNotes(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkIdsRequest"
        }
      ],
      "return": "BulkFetchNotesResponse"
    },
    "POST /api/v2/externalcontacts/bulk/notes/add": {
      "functionName": "PostExternalcontactsBulkNotesAdd",
      "signature": "PostExternalcontactsBulkNotesAdd(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkNotesRequest"
        }
      ],
      "return": "BulkNotesResponse"
    },
    "POST /api/v2/externalcontacts/bulk/notes/remove": {
      "functionName": "PostExternalcontactsBulkNotesRemove",
      "signature": "PostExternalcontactsBulkNotesRemove(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkIdsRequest"
        }
      ],
      "return": "BulkDeleteResponse"
    },
    "POST /api/v2/externalcontacts/bulk/notes/update": {
      "functionName": "PostExternalcontactsBulkNotesUpdate",
      "signature": "PostExternalcontactsBulkNotesUpdate(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkNotesRequest"
        }
      ],
      "return": "BulkNotesResponse"
    },
    "POST /api/v2/externalcontacts/bulk/organizations": {
      "functionName": "PostExternalcontactsBulkOrganizations",
      "signature": "PostExternalcontactsBulkOrganizations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkIdsRequest"
        }
      ],
      "return": "BulkFetchOrganizationsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/organizations/add": {
      "functionName": "PostExternalcontactsBulkOrganizationsAdd",
      "signature": "PostExternalcontactsBulkOrganizationsAdd(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkOrganizationsRequest"
        }
      ],
      "return": "BulkOrganizationsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/organizations/remove": {
      "functionName": "PostExternalcontactsBulkOrganizationsRemove",
      "signature": "PostExternalcontactsBulkOrganizationsRemove(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkIdsRequest"
        }
      ],
      "return": "BulkDeleteResponse"
    },
    "POST /api/v2/externalcontacts/bulk/organizations/update": {
      "functionName": "PostExternalcontactsBulkOrganizationsUpdate",
      "signature": "PostExternalcontactsBulkOrganizationsUpdate(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkOrganizationsRequest"
        }
      ],
      "return": "BulkOrganizationsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/relationships": {
      "functionName": "PostExternalcontactsBulkRelationships",
      "signature": "PostExternalcontactsBulkRelationships(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkIdsRequest"
        }
      ],
      "return": "BulkFetchRelationshipsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/relationships/add": {
      "functionName": "PostExternalcontactsBulkRelationshipsAdd",
      "signature": "PostExternalcontactsBulkRelationshipsAdd(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkRelationshipsRequest"
        }
      ],
      "return": "BulkRelationshipsResponse"
    },
    "POST /api/v2/externalcontacts/bulk/relationships/remove": {
      "functionName": "PostExternalcontactsBulkRelationshipsRemove",
      "signature": "PostExternalcontactsBulkRelationshipsRemove(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkIdsRequest"
        }
      ],
      "return": "BulkDeleteResponse"
    },
    "POST /api/v2/externalcontacts/bulk/relationships/update": {
      "functionName": "PostExternalcontactsBulkRelationshipsUpdate",
      "signature": "PostExternalcontactsBulkRelationshipsUpdate(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BulkRelationshipsRequest"
        }
      ],
      "return": "BulkRelationshipsResponse"
    },
    "POST /api/v2/externalcontacts/contacts/{contactId}/notes": {
      "functionName": "PostExternalcontactsContactNotes",
      "signature": "PostExternalcontactsContactNotes(contactId, body)",
      "parameters": [
        {
          "name": "contactId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Note"
        }
      ],
      "return": "Note"
    },
    "POST /api/v2/externalcontacts/contacts": {
      "functionName": "PostExternalcontactsContacts",
      "signature": "PostExternalcontactsContacts(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ExternalContact"
        }
      ],
      "return": "ExternalContact"
    },
    "POST /api/v2/externalcontacts/contacts/schemas": {
      "functionName": "PostExternalcontactsContactsSchemas",
      "signature": "PostExternalcontactsContactsSchemas(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DataSchema"
        }
      ],
      "return": "DataSchema"
    },
    "POST /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes": {
      "functionName": "PostExternalcontactsOrganizationNotes",
      "signature": "PostExternalcontactsOrganizationNotes(externalOrganizationId, body)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Note"
        }
      ],
      "return": "Note"
    },
    "POST /api/v2/externalcontacts/organizations": {
      "functionName": "PostExternalcontactsOrganizations",
      "signature": "PostExternalcontactsOrganizations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ExternalOrganization"
        }
      ],
      "return": "ExternalOrganization"
    },
    "POST /api/v2/externalcontacts/organizations/schemas": {
      "functionName": "PostExternalcontactsOrganizationsSchemas",
      "signature": "PostExternalcontactsOrganizationsSchemas(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DataSchema"
        }
      ],
      "return": "DataSchema"
    },
    "POST /api/v2/externalcontacts/relationships": {
      "functionName": "PostExternalcontactsRelationships",
      "signature": "PostExternalcontactsRelationships(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Relationship"
        }
      ],
      "return": "Relationship"
    },
    "PUT /api/v2/externalcontacts/contacts/{contactId}": {
      "functionName": "PutExternalcontactsContact",
      "signature": "PutExternalcontactsContact(contactId, body)",
      "parameters": [
        {
          "name": "contactId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ExternalContact"
        }
      ],
      "return": "ExternalContact"
    },
    "PUT /api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}": {
      "functionName": "PutExternalcontactsContactNote",
      "signature": "PutExternalcontactsContactNote(contactId, noteId, body)",
      "parameters": [
        {
          "name": "contactId",
          "type": "string"
        },
        {
          "name": "noteId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Note"
        }
      ],
      "return": "Note"
    },
    "PUT /api/v2/externalcontacts/contacts/schemas/{schemaId}": {
      "functionName": "PutExternalcontactsContactsSchema",
      "signature": "PutExternalcontactsContactsSchema(schemaId, body)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DataSchema"
        }
      ],
      "return": "DataSchema"
    },
    "PUT /api/v2/externalcontacts/conversations/{conversationId}": {
      "functionName": "PutExternalcontactsConversation",
      "signature": "PutExternalcontactsConversation(body, conversationId)",
      "parameters": [
        {
          "name": "body",
          "type": "ConversationAssociation"
        },
        {
          "name": "conversationId",
          "type": "string"
        }
      ]
    },
    "PUT /api/v2/externalcontacts/organizations/{externalOrganizationId}": {
      "functionName": "PutExternalcontactsOrganization",
      "signature": "PutExternalcontactsOrganization(externalOrganizationId, body)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ExternalOrganization"
        }
      ],
      "return": "ExternalOrganization"
    },
    "PUT /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}": {
      "functionName": "PutExternalcontactsOrganizationNote",
      "signature": "PutExternalcontactsOrganizationNote(externalOrganizationId, noteId, body)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "string"
        },
        {
          "name": "noteId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Note"
        }
      ],
      "return": "Note"
    },
    "PUT /api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor/{trustorId}": {
      "functionName": "PutExternalcontactsOrganizationTrustorTrustorId",
      "signature": "PutExternalcontactsOrganizationTrustorTrustorId(externalOrganizationId, trustorId)",
      "parameters": [
        {
          "name": "externalOrganizationId",
          "type": "string"
        },
        {
          "name": "trustorId",
          "type": "string"
        }
      ],
      "return": "ExternalOrganizationTrustorLink"
    },
    "PUT /api/v2/externalcontacts/organizations/schemas/{schemaId}": {
      "functionName": "PutExternalcontactsOrganizationsSchema",
      "signature": "PutExternalcontactsOrganizationsSchema(schemaId, body)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DataSchema"
        }
      ],
      "return": "DataSchema"
    },
    "PUT /api/v2/externalcontacts/relationships/{relationshipId}": {
      "functionName": "PutExternalcontactsRelationship",
      "signature": "PutExternalcontactsRelationship(relationshipId, body)",
      "parameters": [
        {
          "name": "relationshipId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Relationship"
        }
      ],
      "return": "Relationship"
    }
  },
  "fax": {
    "DELETE /api/v2/fax/documents/{documentId}": {
      "functionName": "DeleteFaxDocument",
      "signature": "DeleteFaxDocument(documentId)",
      "parameters": [
        {
          "name": "documentId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/fax/documents/{documentId}": {
      "functionName": "GetFaxDocument",
      "signature": "GetFaxDocument(documentId)",
      "parameters": [
        {
          "name": "documentId",
          "type": "string"
        }
      ],
      "return": "FaxDocument"
    },
    "GET /api/v2/fax/documents/{documentId}/content": {
      "functionName": "GetFaxDocumentContent",
      "signature": "GetFaxDocumentContent(documentId)",
      "parameters": [
        {
          "name": "documentId",
          "type": "string"
        }
      ],
      "return": "DownloadResponse"
    },
    "GET /api/v2/fax/documents": {
      "functionName": "GetFaxDocuments",
      "signature": "GetFaxDocuments(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "FaxDocumentEntityListing"
    },
    "GET /api/v2/fax/summary": {
      "functionName": "GetFaxSummary",
      "signature": "GetFaxSummary()",
      "return": "FaxSummary"
    },
    "PUT /api/v2/fax/documents/{documentId}": {
      "functionName": "PutFaxDocument",
      "signature": "PutFaxDocument(documentId, body)",
      "parameters": [
        {
          "name": "documentId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "FaxDocument"
        }
      ],
      "return": "FaxDocument"
    }
  },
  "flows": {
    "POST /api/v2/analytics/flows/aggregates/query": {
      "functionName": "PostAnalyticsFlowsAggregatesQuery",
      "signature": "PostAnalyticsFlowsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "FlowAggregationQuery"
        }
      ],
      "return": "FlowAggregateQueryResponse"
    },
    "POST /api/v2/analytics/flows/observations/query": {
      "functionName": "PostAnalyticsFlowsObservationsQuery",
      "signature": "PostAnalyticsFlowsObservationsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "FlowObservationQuery"
        }
      ],
      "return": "FlowObservationQueryResponse"
    }
  },
  "gamification": {
    "GET /api/v2/gamification/leaderboard": {
      "functionName": "GetGamificationLeaderboard",
      "signature": "GetGamificationLeaderboard(startWorkday, endWorkday, metricId)",
      "parameters": [
        {
          "name": "startWorkday",
          "type": "String"
        },
        {
          "name": "endWorkday",
          "type": "String"
        },
        {
          "name": "metricId",
          "type": "string"
        }
      ],
      "return": "Leaderboard"
    },
    "GET /api/v2/gamification/leaderboard/all": {
      "functionName": "GetGamificationLeaderboardAll",
      "signature": "GetGamificationLeaderboardAll(filterType, filterId, startWorkday, endWorkday, metricId)",
      "parameters": [
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "filterId",
          "type": "string"
        },
        {
          "name": "startWorkday",
          "type": "String"
        },
        {
          "name": "endWorkday",
          "type": "String"
        },
        {
          "name": "metricId",
          "type": "string"
        }
      ],
      "return": "Leaderboard"
    },
    "GET /api/v2/gamification/leaderboard/all/bestpoints": {
      "functionName": "GetGamificationLeaderboardAllBestpoints",
      "signature": "GetGamificationLeaderboardAllBestpoints(filterType, filterId)",
      "parameters": [
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "filterId",
          "type": "string"
        }
      ],
      "return": "OverallBestPoints"
    },
    "GET /api/v2/gamification/leaderboard/bestpoints": {
      "functionName": "GetGamificationLeaderboardBestpoints",
      "signature": "GetGamificationLeaderboardBestpoints()",
      "return": "OverallBestPoints"
    },
    "GET /api/v2/gamification/metrics/{metricId}": {
      "functionName": "GetGamificationMetric",
      "signature": "GetGamificationMetric(metricId, workday, performanceProfileId)",
      "parameters": [
        {
          "name": "metricId",
          "type": "string"
        },
        {
          "name": "workday",
          "type": "String"
        },
        {
          "name": "performanceProfileId",
          "type": "string"
        }
      ],
      "return": "Metric"
    },
    "GET /api/v2/gamification/metricdefinitions/{metricDefinitionId}": {
      "functionName": "GetGamificationMetricdefinition",
      "signature": "GetGamificationMetricdefinition(metricDefinitionId)",
      "parameters": [
        {
          "name": "metricDefinitionId",
          "type": "string"
        }
      ],
      "return": "MetricDefinition"
    },
    "GET /api/v2/gamification/metricdefinitions": {
      "functionName": "GetGamificationMetricdefinitions",
      "signature": "GetGamificationMetricdefinitions()",
      "return": "GetMetricDefinitionsResponse"
    },
    "GET /api/v2/gamification/metrics": {
      "functionName": "GetGamificationMetrics",
      "signature": "GetGamificationMetrics(performanceProfileId, workday)",
      "parameters": [
        {
          "name": "performanceProfileId",
          "type": "string"
        },
        {
          "name": "workday",
          "type": "String"
        }
      ],
      "return": "GetMetricsResponse"
    },
    "GET /api/v2/gamification/profiles/{performanceProfileId}": {
      "functionName": "GetGamificationProfile",
      "signature": "GetGamificationProfile(performanceProfileId)",
      "parameters": [
        {
          "name": "performanceProfileId",
          "type": "string"
        }
      ],
      "return": "PerformanceProfile"
    },
    "GET /api/v2/gamification/profiles/{performanceProfileId}/members": {
      "functionName": "GetGamificationProfileMembers",
      "signature": "GetGamificationProfileMembers(performanceProfileId)",
      "parameters": [
        {
          "name": "performanceProfileId",
          "type": "string"
        }
      ],
      "return": "MemberListing"
    },
    "GET /api/v2/gamification/profiles/{profileId}/metrics/{metricId}": {
      "functionName": "GetGamificationProfileMetric",
      "signature": "GetGamificationProfileMetric(profileId, metricId, workday)",
      "parameters": [
        {
          "name": "profileId",
          "type": "string"
        },
        {
          "name": "metricId",
          "type": "string"
        },
        {
          "name": "workday",
          "type": "String"
        }
      ],
      "return": "Metric"
    },
    "GET /api/v2/gamification/profiles/{profileId}/metrics": {
      "functionName": "GetGamificationProfileMetrics",
      "signature": "GetGamificationProfileMetrics(profileId, expand, workday)",
      "parameters": [
        {
          "name": "profileId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "workday",
          "type": "String"
        }
      ],
      "return": "GetMetricResponse"
    },
    "GET /api/v2/gamification/profiles/{profileId}/metrics/objectivedetails": {
      "functionName": "GetGamificationProfileMetricsObjectivedetails",
      "signature": "GetGamificationProfileMetricsObjectivedetails(profileId, workday)",
      "parameters": [
        {
          "name": "profileId",
          "type": "string"
        },
        {
          "name": "workday",
          "type": "String"
        }
      ],
      "return": "GetMetricsResponse"
    },
    "GET /api/v2/gamification/profiles": {
      "functionName": "GetGamificationProfiles",
      "signature": "GetGamificationProfiles()",
      "return": "GetProfilesResponse"
    },
    "GET /api/v2/gamification/profiles/users/{userId}": {
      "functionName": "GetGamificationProfilesUser",
      "signature": "GetGamificationProfilesUser(userId, workday)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "workday",
          "type": "String"
        }
      ],
      "return": "PerformanceProfile"
    },
    "GET /api/v2/gamification/profiles/users/me": {
      "functionName": "GetGamificationProfilesUsersMe",
      "signature": "GetGamificationProfilesUsersMe(workday)",
      "parameters": [
        {
          "name": "workday",
          "type": "String"
        }
      ],
      "return": "PerformanceProfile"
    },
    "GET /api/v2/gamification/scorecards": {
      "functionName": "GetGamificationScorecards",
      "signature": "GetGamificationScorecards(workday, expand)",
      "parameters": [
        {
          "name": "workday",
          "type": "String"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "WorkdayMetricListing"
    },
    "GET /api/v2/gamification/scorecards/attendance": {
      "functionName": "GetGamificationScorecardsAttendance",
      "signature": "GetGamificationScorecardsAttendance(startWorkday, endWorkday)",
      "parameters": [
        {
          "name": "startWorkday",
          "type": "String"
        },
        {
          "name": "endWorkday",
          "type": "String"
        }
      ],
      "return": "AttendanceStatusListing"
    },
    "GET /api/v2/gamification/scorecards/bestpoints": {
      "functionName": "GetGamificationScorecardsBestpoints",
      "signature": "GetGamificationScorecardsBestpoints()",
      "return": "UserBestPoints"
    },
    "GET /api/v2/gamification/scorecards/points/alltime": {
      "functionName": "GetGamificationScorecardsPointsAlltime",
      "signature": "GetGamificationScorecardsPointsAlltime(endWorkday)",
      "parameters": [
        {
          "name": "endWorkday",
          "type": "String"
        }
      ],
      "return": "AllTimePoints"
    },
    "GET /api/v2/gamification/scorecards/points/average": {
      "functionName": "GetGamificationScorecardsPointsAverage",
      "signature": "GetGamificationScorecardsPointsAverage(workday)",
      "parameters": [
        {
          "name": "workday",
          "type": "String"
        }
      ],
      "return": "SingleWorkdayAveragePoints"
    },
    "GET /api/v2/gamification/scorecards/points/trends": {
      "functionName": "GetGamificationScorecardsPointsTrends",
      "signature": "GetGamificationScorecardsPointsTrends(startWorkday, endWorkday, dayOfWeek)",
      "parameters": [
        {
          "name": "startWorkday",
          "type": "String"
        },
        {
          "name": "endWorkday",
          "type": "String"
        },
        {
          "name": "dayOfWeek",
          "type": "string"
        }
      ],
      "return": "WorkdayPointsTrend"
    },
    "GET /api/v2/gamification/scorecards/users/{userId}": {
      "functionName": "GetGamificationScorecardsUser",
      "signature": "GetGamificationScorecardsUser(userId, workday, expand)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "workday",
          "type": "String"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "WorkdayMetricListing"
    },
    "GET /api/v2/gamification/scorecards/users/{userId}/attendance": {
      "functionName": "GetGamificationScorecardsUserAttendance",
      "signature": "GetGamificationScorecardsUserAttendance(userId, startWorkday, endWorkday)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "startWorkday",
          "type": "String"
        },
        {
          "name": "endWorkday",
          "type": "String"
        }
      ],
      "return": "AttendanceStatusListing"
    },
    "GET /api/v2/gamification/scorecards/users/{userId}/bestpoints": {
      "functionName": "GetGamificationScorecardsUserBestpoints",
      "signature": "GetGamificationScorecardsUserBestpoints(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "UserBestPoints"
    },
    "GET /api/v2/gamification/scorecards/users/{userId}/points/alltime": {
      "functionName": "GetGamificationScorecardsUserPointsAlltime",
      "signature": "GetGamificationScorecardsUserPointsAlltime(userId, endWorkday)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "endWorkday",
          "type": "String"
        }
      ],
      "return": "AllTimePoints"
    },
    "GET /api/v2/gamification/scorecards/users/{userId}/points/trends": {
      "functionName": "GetGamificationScorecardsUserPointsTrends",
      "signature": "GetGamificationScorecardsUserPointsTrends(userId, startWorkday, endWorkday, dayOfWeek)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "startWorkday",
          "type": "String"
        },
        {
          "name": "endWorkday",
          "type": "String"
        },
        {
          "name": "dayOfWeek",
          "type": "string"
        }
      ],
      "return": "WorkdayPointsTrend"
    },
    "GET /api/v2/gamification/scorecards/users/{userId}/values/trends": {
      "functionName": "GetGamificationScorecardsUserValuesTrends",
      "signature": "GetGamificationScorecardsUserValuesTrends(userId, startWorkday, endWorkday, timeZone)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "startWorkday",
          "type": "String"
        },
        {
          "name": "endWorkday",
          "type": "String"
        },
        {
          "name": "timeZone",
          "type": "string"
        }
      ],
      "return": "WorkdayValuesTrend"
    },
    "GET /api/v2/gamification/scorecards/users/points/average": {
      "functionName": "GetGamificationScorecardsUsersPointsAverage",
      "signature": "GetGamificationScorecardsUsersPointsAverage(filterType, filterId, workday)",
      "parameters": [
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "filterId",
          "type": "string"
        },
        {
          "name": "workday",
          "type": "String"
        }
      ],
      "return": "SingleWorkdayAveragePoints"
    },
    "GET /api/v2/gamification/scorecards/users/values/average": {
      "functionName": "GetGamificationScorecardsUsersValuesAverage",
      "signature": "GetGamificationScorecardsUsersValuesAverage(filterType, filterId, workday, timeZone)",
      "parameters": [
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "filterId",
          "type": "string"
        },
        {
          "name": "workday",
          "type": "String"
        },
        {
          "name": "timeZone",
          "type": "string"
        }
      ],
      "return": "SingleWorkdayAverageValues"
    },
    "GET /api/v2/gamification/scorecards/users/values/trends": {
      "functionName": "GetGamificationScorecardsUsersValuesTrends",
      "signature": "GetGamificationScorecardsUsersValuesTrends(filterType, filterId, startWorkday, endWorkday, timeZone)",
      "parameters": [
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "filterId",
          "type": "string"
        },
        {
          "name": "startWorkday",
          "type": "String"
        },
        {
          "name": "endWorkday",
          "type": "String"
        },
        {
          "name": "timeZone",
          "type": "string"
        }
      ],
      "return": "WorkdayValuesTrend"
    },
    "GET /api/v2/gamification/scorecards/values/average": {
      "functionName": "GetGamificationScorecardsValuesAverage",
      "signature": "GetGamificationScorecardsValuesAverage(workday, timeZone)",
      "parameters": [
        {
          "name": "workday",
          "type": "String"
        },
        {
          "name": "timeZone",
          "type": "string"
        }
      ],
      "return": "SingleWorkdayAverageValues"
    },
    "GET /api/v2/gamification/scorecards/values/trends": {
      "functionName": "GetGamificationScorecardsValuesTrends",
      "signature": "GetGamificationScorecardsValuesTrends(startWorkday, endWorkday, filterType, referenceWorkday, timeZone)",
      "parameters": [
        {
          "name": "startWorkday",
          "type": "String"
        },
        {
          "name": "endWorkday",
          "type": "String"
        },
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "referenceWorkday",
          "type": "String"
        },
        {
          "name": "timeZone",
          "type": "string"
        }
      ],
      "return": "WorkdayValuesTrend"
    },
    "GET /api/v2/gamification/status": {
      "functionName": "GetGamificationStatus",
      "signature": "GetGamificationStatus()",
      "return": "GamificationStatus"
    },
    "GET /api/v2/gamification/templates/{templateId}": {
      "functionName": "GetGamificationTemplate",
      "signature": "GetGamificationTemplate(templateId)",
      "parameters": [
        {
          "name": "templateId",
          "type": "string"
        }
      ],
      "return": "ObjectiveTemplate"
    },
    "GET /api/v2/gamification/templates": {
      "functionName": "GetGamificationTemplates",
      "signature": "GetGamificationTemplates()",
      "return": "GetTemplatesResponse"
    },
    "POST /api/v2/gamification/metrics": {
      "functionName": "PostGamificationMetrics",
      "signature": "PostGamificationMetrics(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateMetric"
        }
      ],
      "return": "Metric"
    },
    "POST /api/v2/gamification/profiles/{performanceProfileId}/activate": {
      "functionName": "PostGamificationProfileActivate",
      "signature": "PostGamificationProfileActivate(performanceProfileId)",
      "parameters": [
        {
          "name": "performanceProfileId",
          "type": "string"
        }
      ],
      "return": "PerformanceProfile"
    },
    "POST /api/v2/gamification/profiles/{performanceProfileId}/deactivate": {
      "functionName": "PostGamificationProfileDeactivate",
      "signature": "PostGamificationProfileDeactivate(performanceProfileId)",
      "parameters": [
        {
          "name": "performanceProfileId",
          "type": "string"
        }
      ],
      "return": "PerformanceProfile"
    },
    "POST /api/v2/gamification/profiles/{performanceProfileId}/members": {
      "functionName": "PostGamificationProfileMembers",
      "signature": "PostGamificationProfileMembers(performanceProfileId, body)",
      "parameters": [
        {
          "name": "performanceProfileId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "AssignUsers"
        }
      ],
      "return": "Assignment"
    },
    "POST /api/v2/gamification/profiles/{performanceProfileId}/members/validate": {
      "functionName": "PostGamificationProfileMembersValidate",
      "signature": "PostGamificationProfileMembersValidate(performanceProfileId, body)",
      "parameters": [
        {
          "name": "performanceProfileId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ValidateAssignUsers"
        }
      ],
      "return": "AssignmentValidation"
    },
    "POST /api/v2/gamification/profiles/{sourceProfileId}/metrics/{sourceMetricId}/link": {
      "functionName": "PostGamificationProfileMetricLink",
      "signature": "PostGamificationProfileMetricLink(sourceProfileId, sourceMetricId, body)",
      "parameters": [
        {
          "name": "sourceProfileId",
          "type": "string"
        },
        {
          "name": "sourceMetricId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "TargetPerformanceProfile"
        }
      ],
      "return": "Metric"
    },
    "POST /api/v2/gamification/profiles/{profileId}/metrics": {
      "functionName": "PostGamificationProfileMetrics",
      "signature": "PostGamificationProfileMetrics(profileId, body)",
      "parameters": [
        {
          "name": "profileId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CreateMetric"
        }
      ],
      "return": "Metric"
    },
    "POST /api/v2/gamification/profiles": {
      "functionName": "PostGamificationProfiles",
      "signature": "PostGamificationProfiles(body, copyMetrics)",
      "parameters": [
        {
          "name": "body",
          "type": "CreatePerformanceProfile"
        },
        {
          "name": "copyMetrics",
          "type": "bool?"
        }
      ],
      "return": "PerformanceProfile"
    },
    "PUT /api/v2/gamification/metrics/{metricId}": {
      "functionName": "PutGamificationMetric",
      "signature": "PutGamificationMetric(metricId, body, performanceProfileId)",
      "parameters": [
        {
          "name": "metricId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CreateMetric"
        },
        {
          "name": "performanceProfileId",
          "type": "string"
        }
      ],
      "return": "Metric"
    },
    "PUT /api/v2/gamification/profiles/{performanceProfileId}": {
      "functionName": "PutGamificationProfile",
      "signature": "PutGamificationProfile(performanceProfileId, body)",
      "parameters": [
        {
          "name": "performanceProfileId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "PerformanceProfile"
        }
      ],
      "return": "PerformanceProfile"
    },
    "PUT /api/v2/gamification/profiles/{profileId}/metrics/{metricId}": {
      "functionName": "PutGamificationProfileMetric",
      "signature": "PutGamificationProfileMetric(profileId, metricId, body)",
      "parameters": [
        {
          "name": "profileId",
          "type": "string"
        },
        {
          "name": "metricId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CreateMetric"
        }
      ],
      "return": "Metric"
    },
    "PUT /api/v2/gamification/status": {
      "functionName": "PutGamificationStatus",
      "signature": "PutGamificationStatus(status)",
      "parameters": [
        {
          "name": "status",
          "type": "GamificationStatus"
        }
      ],
      "return": "GamificationStatus"
    }
  },
  "generaldataprotectionregulation": {
    "GET /api/v2/gdpr/requests/{requestId}": {
      "functionName": "GetGdprRequest",
      "signature": "GetGdprRequest(requestId)",
      "parameters": [
        {
          "name": "requestId",
          "type": "string"
        }
      ],
      "return": "GDPRRequest"
    },
    "GET /api/v2/gdpr/requests": {
      "functionName": "GetGdprRequests",
      "signature": "GetGdprRequests(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "GDPRRequestEntityListing"
    },
    "GET /api/v2/gdpr/subjects": {
      "functionName": "GetGdprSubjects",
      "signature": "GetGdprSubjects(searchType, searchValue)",
      "parameters": [
        {
          "name": "searchType",
          "type": "string"
        },
        {
          "name": "searchValue",
          "type": "string"
        }
      ],
      "return": "GDPRSubjectEntityListing"
    },
    "POST /api/v2/gdpr/requests": {
      "functionName": "PostGdprRequests",
      "signature": "PostGdprRequests(body, deleteConfirmed)",
      "parameters": [
        {
          "name": "body",
          "type": "GDPRRequest"
        },
        {
          "name": "deleteConfirmed",
          "type": "bool?"
        }
      ],
      "return": "GDPRRequest"
    }
  },
  "geolocation": {
    "GET /api/v2/geolocations/settings": {
      "functionName": "GetGeolocationsSettings",
      "signature": "GetGeolocationsSettings()",
      "return": "GeolocationSettings"
    },
    "GET /api/v2/users/{userId}/geolocations/{clientId}": {
      "functionName": "GetUserGeolocation",
      "signature": "GetUserGeolocation(userId, clientId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "clientId",
          "type": "string"
        }
      ],
      "return": "Geolocation"
    },
    "PATCH /api/v2/geolocations/settings": {
      "functionName": "PatchGeolocationsSettings",
      "signature": "PatchGeolocationsSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "GeolocationSettings"
        }
      ],
      "return": "GeolocationSettings"
    },
    "PATCH /api/v2/users/{userId}/geolocations/{clientId}": {
      "functionName": "PatchUserGeolocation",
      "signature": "PatchUserGeolocation(userId, clientId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "clientId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Geolocation"
        }
      ],
      "return": "Geolocation"
    }
  },
  "greetings": {
    "DELETE /api/v2/greetings/{greetingId}": {
      "functionName": "DeleteGreeting",
      "signature": "DeleteGreeting(greetingId)",
      "parameters": [
        {
          "name": "greetingId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/greetings/{greetingId}": {
      "functionName": "GetGreeting",
      "signature": "GetGreeting(greetingId)",
      "parameters": [
        {
          "name": "greetingId",
          "type": "string"
        }
      ],
      "return": "Greeting"
    },
    "GET /api/v2/greetings/{greetingId}/media": {
      "functionName": "GetGreetingMedia",
      "signature": "GetGreetingMedia(greetingId, formatId)",
      "parameters": [
        {
          "name": "greetingId",
          "type": "string"
        },
        {
          "name": "formatId",
          "type": "string"
        }
      ],
      "return": "GreetingMediaInfo"
    },
    "GET /api/v2/greetings": {
      "functionName": "GetGreetings",
      "signature": "GetGreetings(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "DomainEntityListing"
    },
    "GET /api/v2/greetings/defaults": {
      "functionName": "GetGreetingsDefaults",
      "signature": "GetGreetingsDefaults()",
      "return": "DefaultGreetingList"
    },
    "GET /api/v2/groups/{groupId}/greetings": {
      "functionName": "GetGroupGreetings",
      "signature": "GetGroupGreetings(groupId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "GreetingListing"
    },
    "GET /api/v2/groups/{groupId}/greetings/defaults": {
      "functionName": "GetGroupGreetingsDefaults",
      "signature": "GetGroupGreetingsDefaults(groupId)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        }
      ],
      "return": "DefaultGreetingList"
    },
    "GET /api/v2/users/{userId}/greetings": {
      "functionName": "GetUserGreetings",
      "signature": "GetUserGreetings(userId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "DomainEntityListing"
    },
    "GET /api/v2/users/{userId}/greetings/defaults": {
      "functionName": "GetUserGreetingsDefaults",
      "signature": "GetUserGreetingsDefaults(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "DefaultGreetingList"
    },
    "POST /api/v2/greetings": {
      "functionName": "PostGreetings",
      "signature": "PostGreetings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Greeting"
        }
      ],
      "return": "Greeting"
    },
    "POST /api/v2/groups/{groupId}/greetings": {
      "functionName": "PostGroupGreetings",
      "signature": "PostGroupGreetings(groupId, body)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Greeting"
        }
      ],
      "return": "Greeting"
    },
    "POST /api/v2/users/{userId}/greetings": {
      "functionName": "PostUserGreetings",
      "signature": "PostUserGreetings(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Greeting"
        }
      ],
      "return": "Greeting"
    },
    "PUT /api/v2/greetings/{greetingId}": {
      "functionName": "PutGreeting",
      "signature": "PutGreeting(greetingId, body)",
      "parameters": [
        {
          "name": "greetingId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Greeting"
        }
      ],
      "return": "Greeting"
    },
    "PUT /api/v2/greetings/defaults": {
      "functionName": "PutGreetingsDefaults",
      "signature": "PutGreetingsDefaults(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DefaultGreetingList"
        }
      ],
      "return": "DefaultGreetingList"
    },
    "PUT /api/v2/groups/{groupId}/greetings/defaults": {
      "functionName": "PutGroupGreetingsDefaults",
      "signature": "PutGroupGreetingsDefaults(groupId, body)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DefaultGreetingList"
        }
      ],
      "return": "DefaultGreetingList"
    },
    "PUT /api/v2/users/{userId}/greetings/defaults": {
      "functionName": "PutUserGreetingsDefaults",
      "signature": "PutUserGreetingsDefaults(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DefaultGreetingList"
        }
      ],
      "return": "DefaultGreetingList"
    }
  },
  "groups": {
    "DELETE /api/v2/groups/{groupId}": {
      "functionName": "DeleteGroup",
      "signature": "DeleteGroup(groupId)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/groups/{groupId}/members": {
      "functionName": "DeleteGroupMembers",
      "signature": "DeleteGroupMembers(groupId, ids)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        },
        {
          "name": "ids",
          "type": "string"
        }
      ],
      "return": "Empty"
    },
    "GET /api/v2/fieldconfig": {
      "functionName": "GetFieldconfig",
      "signature": "GetFieldconfig(type)",
      "parameters": [
        {
          "name": "type",
          "type": "string"
        }
      ],
      "return": "FieldConfig"
    },
    "GET /api/v2/groups/{groupId}": {
      "functionName": "GetGroup",
      "signature": "GetGroup(groupId)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        }
      ],
      "return": "Group"
    },
    "GET /api/v2/groups/{groupId}/individuals": {
      "functionName": "GetGroupIndividuals",
      "signature": "GetGroupIndividuals(groupId)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        }
      ],
      "return": "UserEntityListing"
    },
    "GET /api/v2/groups/{groupId}/members": {
      "functionName": "GetGroupMembers",
      "signature": "GetGroupMembers(groupId, pageSize, pageNumber, sortOrder, expand)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "UserEntityListing"
    },
    "GET /api/v2/groups/{groupId}/profile": {
      "functionName": "GetGroupProfile",
      "signature": "GetGroupProfile(groupId, fields)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        },
        {
          "name": "fields",
          "type": "string"
        }
      ],
      "return": "GroupProfile"
    },
    "GET /api/v2/groups": {
      "functionName": "GetGroups",
      "signature": "GetGroups(pageSize, pageNumber, id, jabberId, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "jabberId",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "GroupEntityListing"
    },
    "GET /api/v2/groups/search": {
      "functionName": "GetGroupsSearch",
      "signature": "GetGroupsSearch(q64, expand)",
      "parameters": [
        {
          "name": "q64",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "GroupsSearchResponse"
    },
    "GET /api/v2/profiles/groups": {
      "functionName": "GetProfilesGroups",
      "signature": "GetProfilesGroups(pageSize, pageNumber, id, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "GroupProfileEntityListing"
    },
    "POST /api/v2/groups/{groupId}/members": {
      "functionName": "PostGroupMembers",
      "signature": "PostGroupMembers(groupId, body)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "GroupMembersUpdate"
        }
      ],
      "return": "Empty"
    },
    "POST /api/v2/groups": {
      "functionName": "PostGroups",
      "signature": "PostGroups(body)",
      "parameters": [
        {
          "name": "body",
          "type": "GroupCreate"
        }
      ],
      "return": "Group"
    },
    "POST /api/v2/groups/search": {
      "functionName": "PostGroupsSearch",
      "signature": "PostGroupsSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "GroupSearchRequest"
        }
      ],
      "return": "GroupsSearchResponse"
    },
    "PUT /api/v2/groups/{groupId}": {
      "functionName": "PutGroup",
      "signature": "PutGroup(groupId, body)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "GroupUpdate"
        }
      ],
      "return": "Group"
    }
  },
  "identityprovider": {
    "DELETE /api/v2/identityproviders/adfs": {
      "functionName": "DeleteIdentityprovidersAdfs",
      "signature": "DeleteIdentityprovidersAdfs()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/cic": {
      "functionName": "DeleteIdentityprovidersCic",
      "signature": "DeleteIdentityprovidersCic()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/generic": {
      "functionName": "DeleteIdentityprovidersGeneric",
      "signature": "DeleteIdentityprovidersGeneric()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/gsuite": {
      "functionName": "DeleteIdentityprovidersGsuite",
      "signature": "DeleteIdentityprovidersGsuite()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/identitynow": {
      "functionName": "DeleteIdentityprovidersIdentitynow",
      "signature": "DeleteIdentityprovidersIdentitynow()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/okta": {
      "functionName": "DeleteIdentityprovidersOkta",
      "signature": "DeleteIdentityprovidersOkta()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/onelogin": {
      "functionName": "DeleteIdentityprovidersOnelogin",
      "signature": "DeleteIdentityprovidersOnelogin()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/ping": {
      "functionName": "DeleteIdentityprovidersPing",
      "signature": "DeleteIdentityprovidersPing()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/purecloud": {
      "functionName": "DeleteIdentityprovidersPurecloud",
      "signature": "DeleteIdentityprovidersPurecloud()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/pureengage": {
      "functionName": "DeleteIdentityprovidersPureengage",
      "signature": "DeleteIdentityprovidersPureengage()",
      "return": "Empty"
    },
    "DELETE /api/v2/identityproviders/salesforce": {
      "functionName": "DeleteIdentityprovidersSalesforce",
      "signature": "DeleteIdentityprovidersSalesforce()",
      "return": "Empty"
    },
    "GET /api/v2/identityproviders": {
      "functionName": "GetIdentityproviders",
      "signature": "GetIdentityproviders()",
      "return": "OAuthProviderEntityListing"
    },
    "GET /api/v2/identityproviders/adfs": {
      "functionName": "GetIdentityprovidersAdfs",
      "signature": "GetIdentityprovidersAdfs()",
      "return": "ADFS"
    },
    "GET /api/v2/identityproviders/cic": {
      "functionName": "GetIdentityprovidersCic",
      "signature": "GetIdentityprovidersCic()",
      "return": "CustomerInteractionCenter"
    },
    "GET /api/v2/identityproviders/generic": {
      "functionName": "GetIdentityprovidersGeneric",
      "signature": "GetIdentityprovidersGeneric()",
      "return": "GenericSAML"
    },
    "GET /api/v2/identityproviders/gsuite": {
      "functionName": "GetIdentityprovidersGsuite",
      "signature": "GetIdentityprovidersGsuite()",
      "return": "GSuite"
    },
    "GET /api/v2/identityproviders/identitynow": {
      "functionName": "GetIdentityprovidersIdentitynow",
      "signature": "GetIdentityprovidersIdentitynow()",
      "return": "IdentityNow"
    },
    "GET /api/v2/identityproviders/okta": {
      "functionName": "GetIdentityprovidersOkta",
      "signature": "GetIdentityprovidersOkta()",
      "return": "Okta"
    },
    "GET /api/v2/identityproviders/onelogin": {
      "functionName": "GetIdentityprovidersOnelogin",
      "signature": "GetIdentityprovidersOnelogin()",
      "return": "OneLogin"
    },
    "GET /api/v2/identityproviders/ping": {
      "functionName": "GetIdentityprovidersPing",
      "signature": "GetIdentityprovidersPing()",
      "return": "PingIdentity"
    },
    "GET /api/v2/identityproviders/purecloud": {
      "functionName": "GetIdentityprovidersPurecloud",
      "signature": "GetIdentityprovidersPurecloud()",
      "return": "PureCloudPlatform.Client.V2.Model.PureCloud"
    },
    "GET /api/v2/identityproviders/pureengage": {
      "functionName": "GetIdentityprovidersPureengage",
      "signature": "GetIdentityprovidersPureengage()",
      "return": "PureEngage"
    },
    "GET /api/v2/identityproviders/salesforce": {
      "functionName": "GetIdentityprovidersSalesforce",
      "signature": "GetIdentityprovidersSalesforce()",
      "return": "Salesforce"
    },
    "PUT /api/v2/identityproviders/adfs": {
      "functionName": "PutIdentityprovidersAdfs",
      "signature": "PutIdentityprovidersAdfs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ADFS"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/cic": {
      "functionName": "PutIdentityprovidersCic",
      "signature": "PutIdentityprovidersCic(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CustomerInteractionCenter"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/generic": {
      "functionName": "PutIdentityprovidersGeneric",
      "signature": "PutIdentityprovidersGeneric(body)",
      "parameters": [
        {
          "name": "body",
          "type": "GenericSAML"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/gsuite": {
      "functionName": "PutIdentityprovidersGsuite",
      "signature": "PutIdentityprovidersGsuite(body)",
      "parameters": [
        {
          "name": "body",
          "type": "GSuite"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/identitynow": {
      "functionName": "PutIdentityprovidersIdentitynow",
      "signature": "PutIdentityprovidersIdentitynow(body)",
      "parameters": [
        {
          "name": "body",
          "type": "IdentityNow"
        }
      ],
      "return": "IdentityNow"
    },
    "PUT /api/v2/identityproviders/okta": {
      "functionName": "PutIdentityprovidersOkta",
      "signature": "PutIdentityprovidersOkta(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Okta"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/onelogin": {
      "functionName": "PutIdentityprovidersOnelogin",
      "signature": "PutIdentityprovidersOnelogin(body)",
      "parameters": [
        {
          "name": "body",
          "type": "OneLogin"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/ping": {
      "functionName": "PutIdentityprovidersPing",
      "signature": "PutIdentityprovidersPing(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PingIdentity"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/purecloud": {
      "functionName": "PutIdentityprovidersPurecloud",
      "signature": "PutIdentityprovidersPurecloud(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PureCloudPlatform.Client.V2.Model.PureCloud"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/pureengage": {
      "functionName": "PutIdentityprovidersPureengage",
      "signature": "PutIdentityprovidersPureengage(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PureEngage"
        }
      ],
      "return": "OAuthProvider"
    },
    "PUT /api/v2/identityproviders/salesforce": {
      "functionName": "PutIdentityprovidersSalesforce",
      "signature": "PutIdentityprovidersSalesforce(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Salesforce"
        }
      ],
      "return": "OAuthProvider"
    }
  },
  "integrations": {
    "DELETE /api/v2/integrations/{integrationId}": {
      "functionName": "DeleteIntegration",
      "signature": "DeleteIntegration(integrationId)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        }
      ],
      "return": "Integration"
    },
    "DELETE /api/v2/integrations/actions/{actionId}": {
      "functionName": "DeleteIntegrationsAction",
      "signature": "DeleteIntegrationsAction(actionId)",
      "parameters": [
        {
          "name": "actionId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/integrations/actions/{actionId}/draft": {
      "functionName": "DeleteIntegrationsActionDraft",
      "signature": "DeleteIntegrationsActionDraft(actionId)",
      "parameters": [
        {
          "name": "actionId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/integrations/credentials/{credentialId}": {
      "functionName": "DeleteIntegrationsCredential",
      "signature": "DeleteIntegrationsCredential(credentialId)",
      "parameters": [
        {
          "name": "credentialId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/integrations/{integrationId}": {
      "functionName": "GetIntegration",
      "signature": "GetIntegration(integrationId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        }
      ],
      "return": "Integration"
    },
    "GET /api/v2/integrations/{integrationId}/config/current": {
      "functionName": "GetIntegrationConfigCurrent",
      "signature": "GetIntegrationConfigCurrent(integrationId)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        }
      ],
      "return": "IntegrationConfiguration"
    },
    "GET /api/v2/integrations": {
      "functionName": "GetIntegrations",
      "signature": "GetIntegrations(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        }
      ],
      "return": "IntegrationEntityListing"
    },
    "GET /api/v2/integrations/actions/{actionId}": {
      "functionName": "GetIntegrationsAction",
      "signature": "GetIntegrationsAction(actionId, expand, includeConfig)",
      "parameters": [
        {
          "name": "actionId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "includeConfig",
          "type": "bool?"
        }
      ],
      "return": "PureCloudPlatform.Client.V2.Model.Action"
    },
    "GET /api/v2/integrations/actions/{actionId}/draft": {
      "functionName": "GetIntegrationsActionDraft",
      "signature": "GetIntegrationsActionDraft(actionId, expand, includeConfig)",
      "parameters": [
        {
          "name": "actionId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "includeConfig",
          "type": "bool?"
        }
      ],
      "return": "PureCloudPlatform.Client.V2.Model.Action"
    },
    "GET /api/v2/integrations/actions/{actionId}/draft/schemas/{fileName}": {
      "functionName": "GetIntegrationsActionDraftSchema",
      "signature": "GetIntegrationsActionDraftSchema(actionId, fileName)",
      "parameters": [
        {
          "name": "actionId",
          "type": "string"
        },
        {
          "name": "fileName",
          "type": "string"
        }
      ],
      "return": "JsonSchemaDocument"
    },
    "GET /api/v2/integrations/actions/{actionId}/draft/templates/{fileName}": {
      "functionName": "GetIntegrationsActionDraftTemplate",
      "signature": "GetIntegrationsActionDraftTemplate(actionId, fileName)",
      "parameters": [
        {
          "name": "actionId",
          "type": "string"
        },
        {
          "name": "fileName",
          "type": "string"
        }
      ],
      "return": "string"
    },
    "GET /api/v2/integrations/actions/{actionId}/draft/validation": {
      "functionName": "GetIntegrationsActionDraftValidation",
      "signature": "GetIntegrationsActionDraftValidation(actionId)",
      "parameters": [
        {
          "name": "actionId",
          "type": "string"
        }
      ],
      "return": "DraftValidationResult"
    },
    "GET /api/v2/integrations/actions/{actionId}/schemas/{fileName}": {
      "functionName": "GetIntegrationsActionSchema",
      "signature": "GetIntegrationsActionSchema(actionId, fileName)",
      "parameters": [
        {
          "name": "actionId",
          "type": "string"
        },
        {
          "name": "fileName",
          "type": "string"
        }
      ],
      "return": "JsonSchemaDocument"
    },
    "GET /api/v2/integrations/actions/{actionId}/templates/{fileName}": {
      "functionName": "GetIntegrationsActionTemplate",
      "signature": "GetIntegrationsActionTemplate(actionId, fileName)",
      "parameters": [
        {
          "name": "actionId",
          "type": "string"
        },
        {
          "name": "fileName",
          "type": "string"
        }
      ],
      "return": "string"
    },
    "GET /api/v2/integrations/actions": {
      "functionName": "GetIntegrationsActions",
      "signature": "GetIntegrationsActions(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, category, name, secure, includeAuthActions)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "category",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "secure",
          "type": "string"
        },
        {
          "name": "includeAuthActions",
          "type": "string"
        }
      ],
      "return": "ActionEntityListing"
    },
    "GET /api/v2/integrations/actions/categories": {
      "functionName": "GetIntegrationsActionsCategories",
      "signature": "GetIntegrationsActionsCategories(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, secure)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "secure",
          "type": "string"
        }
      ],
      "return": "CategoryEntityListing"
    },
    "GET /api/v2/integrations/actions/drafts": {
      "functionName": "GetIntegrationsActionsDrafts",
      "signature": "GetIntegrationsActionsDrafts(pageSize, pageNumber, nextPage, previousPage, sortBy, sortOrder, category, name, secure, includeAuthActions)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "category",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "secure",
          "type": "string"
        },
        {
          "name": "includeAuthActions",
          "type": "string"
        }
      ],
      "return": "ActionEntityListing"
    },
    "GET /api/v2/integrations/botconnector/{integrationId}/bots/{botId}": {
      "functionName": "GetIntegrationsBotconnectorIntegrationIdBot",
      "signature": "GetIntegrationsBotconnectorIntegrationIdBot(integrationId, botId, version)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        },
        {
          "name": "botId",
          "type": "string"
        },
        {
          "name": "version",
          "type": "string"
        }
      ],
      "return": "BotConnectorBot"
    },
    "GET /api/v2/integrations/botconnector/{integrationId}/bots/{botId}/versions": {
      "functionName": "GetIntegrationsBotconnectorIntegrationIdBotVersions",
      "signature": "GetIntegrationsBotconnectorIntegrationIdBotVersions(integrationId, botId, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        },
        {
          "name": "botId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "BotConnectorBotVersionSummaryEntityListing"
    },
    "GET /api/v2/integrations/botconnector/{integrationId}/bots": {
      "functionName": "GetIntegrationsBotconnectorIntegrationIdBots",
      "signature": "GetIntegrationsBotconnectorIntegrationIdBots(integrationId)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        }
      ],
      "return": "BotList"
    },
    "GET /api/v2/integrations/botconnector/{integrationId}/bots/summaries": {
      "functionName": "GetIntegrationsBotconnectorIntegrationIdBotsSummaries",
      "signature": "GetIntegrationsBotconnectorIntegrationIdBotsSummaries(integrationId, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "BotConnectorBotSummaryEntityListing"
    },
    "GET /api/v2/integrations/clientapps": {
      "functionName": "GetIntegrationsClientapps",
      "signature": "GetIntegrationsClientapps(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        }
      ],
      "return": "ClientAppEntityListing"
    },
    "GET /api/v2/integrations/clientapps/unifiedcommunications": {
      "functionName": "GetIntegrationsClientappsUnifiedcommunications",
      "signature": "GetIntegrationsClientappsUnifiedcommunications(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        }
      ],
      "return": "UCIntegrationListing"
    },
    "GET /api/v2/integrations/credentials/{credentialId}": {
      "functionName": "GetIntegrationsCredential",
      "signature": "GetIntegrationsCredential(credentialId)",
      "parameters": [
        {
          "name": "credentialId",
          "type": "string"
        }
      ],
      "return": "Credential"
    },
    "GET /api/v2/integrations/credentials": {
      "functionName": "GetIntegrationsCredentials",
      "signature": "GetIntegrationsCredentials(pageNumber, pageSize)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "CredentialInfoListing"
    },
    "GET /api/v2/integrations/credentials/types": {
      "functionName": "GetIntegrationsCredentialsTypes",
      "signature": "GetIntegrationsCredentialsTypes()",
      "return": "CredentialTypeListing"
    },
    "GET /api/v2/integrations/eventlog": {
      "functionName": "GetIntegrationsEventlog",
      "signature": "GetIntegrationsEventlog(pageSize, pageNumber, sortBy, sortOrder, entityId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "entityId",
          "type": "string"
        }
      ],
      "return": "IntegrationEventEntityListing"
    },
    "GET /api/v2/integrations/eventlog/{eventId}": {
      "functionName": "GetIntegrationsEventlogEventId",
      "signature": "GetIntegrationsEventlogEventId(eventId)",
      "parameters": [
        {
          "name": "eventId",
          "type": "string"
        }
      ],
      "return": "IntegrationEvent"
    },
    "GET /api/v2/integrations/speech/dialogflow/agents/{agentId}": {
      "functionName": "GetIntegrationsSpeechDialogflowAgent",
      "signature": "GetIntegrationsSpeechDialogflowAgent(agentId)",
      "parameters": [
        {
          "name": "agentId",
          "type": "string"
        }
      ],
      "return": "DialogflowAgent"
    },
    "GET /api/v2/integrations/speech/dialogflow/agents": {
      "functionName": "GetIntegrationsSpeechDialogflowAgents",
      "signature": "GetIntegrationsSpeechDialogflowAgents(pageNumber, pageSize, name)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "name",
          "type": "string"
        }
      ],
      "return": "DialogflowAgentSummaryEntityListing"
    },
    "GET /api/v2/integrations/speech/lex/bot/alias/{aliasId}": {
      "functionName": "GetIntegrationsSpeechLexBotAlias",
      "signature": "GetIntegrationsSpeechLexBotAlias(aliasId)",
      "parameters": [
        {
          "name": "aliasId",
          "type": "string"
        }
      ],
      "return": "LexBotAlias"
    },
    "GET /api/v2/integrations/speech/lex/bot/{botId}/aliases": {
      "functionName": "GetIntegrationsSpeechLexBotBotIdAliases",
      "signature": "GetIntegrationsSpeechLexBotBotIdAliases(botId, pageNumber, pageSize, status, name)",
      "parameters": [
        {
          "name": "botId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "status",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        }
      ],
      "return": "LexBotAliasEntityListing"
    },
    "GET /api/v2/integrations/speech/lex/bots": {
      "functionName": "GetIntegrationsSpeechLexBots",
      "signature": "GetIntegrationsSpeechLexBots(pageNumber, pageSize, name)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "name",
          "type": "string"
        }
      ],
      "return": "LexBotEntityListing"
    },
    "GET /api/v2/integrations/speech/tts/engines/{engineId}": {
      "functionName": "GetIntegrationsSpeechTtsEngine",
      "signature": "GetIntegrationsSpeechTtsEngine(engineId, includeVoices)",
      "parameters": [
        {
          "name": "engineId",
          "type": "string"
        },
        {
          "name": "includeVoices",
          "type": "bool?"
        }
      ],
      "return": "TtsEngineEntity"
    },
    "GET /api/v2/integrations/speech/tts/engines/{engineId}/voices/{voiceId}": {
      "functionName": "GetIntegrationsSpeechTtsEngineVoice",
      "signature": "GetIntegrationsSpeechTtsEngineVoice(engineId, voiceId)",
      "parameters": [
        {
          "name": "engineId",
          "type": "string"
        },
        {
          "name": "voiceId",
          "type": "string"
        }
      ],
      "return": "TtsVoiceEntity"
    },
    "GET /api/v2/integrations/speech/tts/engines/{engineId}/voices": {
      "functionName": "GetIntegrationsSpeechTtsEngineVoices",
      "signature": "GetIntegrationsSpeechTtsEngineVoices(engineId, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "engineId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "TtsVoiceEntityListing"
    },
    "GET /api/v2/integrations/speech/tts/engines": {
      "functionName": "GetIntegrationsSpeechTtsEngines",
      "signature": "GetIntegrationsSpeechTtsEngines(pageNumber, pageSize, includeVoices, name, language)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "includeVoices",
          "type": "bool?"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "language",
          "type": "string"
        }
      ],
      "return": "TtsEngineEntityListing"
    },
    "GET /api/v2/integrations/speech/tts/settings": {
      "functionName": "GetIntegrationsSpeechTtsSettings",
      "signature": "GetIntegrationsSpeechTtsSettings()",
      "return": "TtsSettings"
    },
    "GET /api/v2/integrations/types/{typeId}": {
      "functionName": "GetIntegrationsType",
      "signature": "GetIntegrationsType(typeId)",
      "parameters": [
        {
          "name": "typeId",
          "type": "string"
        }
      ],
      "return": "IntegrationType"
    },
    "GET /api/v2/integrations/types/{typeId}/configschemas/{configType}": {
      "functionName": "GetIntegrationsTypeConfigschema",
      "signature": "GetIntegrationsTypeConfigschema(typeId, configType)",
      "parameters": [
        {
          "name": "typeId",
          "type": "string"
        },
        {
          "name": "configType",
          "type": "string"
        }
      ],
      "return": "JsonSchemaDocument"
    },
    "GET /api/v2/integrations/types": {
      "functionName": "GetIntegrationsTypes",
      "signature": "GetIntegrationsTypes(pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        }
      ],
      "return": "IntegrationTypeEntityListing"
    },
    "GET /api/v2/integrations/userapps": {
      "functionName": "GetIntegrationsUserapps",
      "signature": "GetIntegrationsUserapps(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, appHost)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        },
        {
          "name": "appHost",
          "type": "string"
        }
      ],
      "return": "UserAppEntityListing"
    },
    "PATCH /api/v2/integrations/{integrationId}": {
      "functionName": "PatchIntegration",
      "signature": "PatchIntegration(integrationId, body, pageSize, pageNumber, sortBy, expand, nextPage, previousPage)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Integration"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        }
      ],
      "return": "Integration"
    },
    "PATCH /api/v2/integrations/actions/{actionId}": {
      "functionName": "PatchIntegrationsAction",
      "signature": "PatchIntegrationsAction(actionId, body)",
      "parameters": [
        {
          "name": "actionId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UpdateActionInput"
        }
      ],
      "return": "PureCloudPlatform.Client.V2.Model.Action"
    },
    "PATCH /api/v2/integrations/actions/{actionId}/draft": {
      "functionName": "PatchIntegrationsActionDraft",
      "signature": "PatchIntegrationsActionDraft(actionId, body)",
      "parameters": [
        {
          "name": "actionId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UpdateDraftInput"
        }
      ],
      "return": "PureCloudPlatform.Client.V2.Model.Action"
    },
    "POST /api/v2/integrations": {
      "functionName": "PostIntegrations",
      "signature": "PostIntegrations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateIntegrationRequest"
        }
      ],
      "return": "Integration"
    },
    "POST /api/v2/integrations/actions/{actionId}/draft": {
      "functionName": "PostIntegrationsActionDraft",
      "signature": "PostIntegrationsActionDraft(actionId)",
      "parameters": [
        {
          "name": "actionId",
          "type": "string"
        }
      ],
      "return": "PureCloudPlatform.Client.V2.Model.Action"
    },
    "POST /api/v2/integrations/actions/{actionId}/draft/publish": {
      "functionName": "PostIntegrationsActionDraftPublish",
      "signature": "PostIntegrationsActionDraftPublish(actionId, body)",
      "parameters": [
        {
          "name": "actionId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "PublishDraftInput"
        }
      ],
      "return": "PureCloudPlatform.Client.V2.Model.Action"
    },
    "POST /api/v2/integrations/actions/{actionId}/draft/test": {
      "functionName": "PostIntegrationsActionDraftTest",
      "signature": "PostIntegrationsActionDraftTest(actionId, body)",
      "parameters": [
        {
          "name": "actionId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Object"
        }
      ],
      "return": "TestExecutionResult"
    },
    "POST /api/v2/integrations/actions/{actionId}/execute": {
      "functionName": "PostIntegrationsActionExecute",
      "signature": "PostIntegrationsActionExecute(actionId, body)",
      "parameters": [
        {
          "name": "actionId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Object"
        }
      ],
      "return": "Object"
    },
    "POST /api/v2/integrations/actions/{actionId}/test": {
      "functionName": "PostIntegrationsActionTest",
      "signature": "PostIntegrationsActionTest(actionId, body)",
      "parameters": [
        {
          "name": "actionId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Object"
        }
      ],
      "return": "TestExecutionResult"
    },
    "POST /api/v2/integrations/actions": {
      "functionName": "PostIntegrationsActions",
      "signature": "PostIntegrationsActions(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PostActionInput"
        }
      ],
      "return": "PureCloudPlatform.Client.V2.Model.Action"
    },
    "POST /api/v2/integrations/actions/drafts": {
      "functionName": "PostIntegrationsActionsDrafts",
      "signature": "PostIntegrationsActionsDrafts(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PostActionInput"
        }
      ],
      "return": "PureCloudPlatform.Client.V2.Model.Action"
    },
    "POST /api/v2/integrations/credentials": {
      "functionName": "PostIntegrationsCredentials",
      "signature": "PostIntegrationsCredentials(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Credential"
        }
      ],
      "return": "CredentialInfo"
    },
    "POST /api/v2/integrations/workforcemanagement/vendorconnection": {
      "functionName": "PostIntegrationsWorkforcemanagementVendorconnection",
      "signature": "PostIntegrationsWorkforcemanagementVendorconnection(body)",
      "parameters": [
        {
          "name": "body",
          "type": "VendorConnectionRequest"
        }
      ],
      "return": "UserActionCategoryEntityListing"
    },
    "PUT /api/v2/integrations/{integrationId}/config/current": {
      "functionName": "PutIntegrationConfigCurrent",
      "signature": "PutIntegrationConfigCurrent(integrationId, body)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "IntegrationConfiguration"
        }
      ],
      "return": "IntegrationConfiguration"
    },
    "PUT /api/v2/integrations/botconnector/{integrationId}/bots": {
      "functionName": "PutIntegrationsBotconnectorIntegrationIdBots",
      "signature": "PutIntegrationsBotconnectorIntegrationIdBots(integrationId, botList)",
      "parameters": [
        {
          "name": "integrationId",
          "type": "string"
        },
        {
          "name": "botList",
          "type": "BotList"
        }
      ]
    },
    "PUT /api/v2/integrations/credentials/{credentialId}": {
      "functionName": "PutIntegrationsCredential",
      "signature": "PutIntegrationsCredential(credentialId, body)",
      "parameters": [
        {
          "name": "credentialId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Credential"
        }
      ],
      "return": "CredentialInfo"
    },
    "PUT /api/v2/integrations/speech/tts/settings": {
      "functionName": "PutIntegrationsSpeechTtsSettings",
      "signature": "PutIntegrationsSpeechTtsSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TtsSettings"
        }
      ],
      "return": "TtsSettings"
    }
  },
  "journey": {
    "DELETE /api/v2/journey/actionmaps/{actionMapId}": {
      "functionName": "DeleteJourneyActionmap",
      "signature": "DeleteJourneyActionmap(actionMapId)",
      "parameters": [
        {
          "name": "actionMapId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/journey/actiontemplates/{actionTemplateId}": {
      "functionName": "DeleteJourneyActiontemplate",
      "signature": "DeleteJourneyActiontemplate(actionTemplateId, hardDelete)",
      "parameters": [
        {
          "name": "actionTemplateId",
          "type": "string"
        },
        {
          "name": "hardDelete",
          "type": "bool?"
        }
      ]
    },
    "DELETE /api/v2/journey/outcomes/{outcomeId}": {
      "functionName": "DeleteJourneyOutcome",
      "signature": "DeleteJourneyOutcome(outcomeId)",
      "parameters": [
        {
          "name": "outcomeId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/journey/segments/{segmentId}": {
      "functionName": "DeleteJourneySegment",
      "signature": "DeleteJourneySegment(segmentId)",
      "parameters": [
        {
          "name": "segmentId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/journey/actionmaps/{actionMapId}": {
      "functionName": "GetJourneyActionmap",
      "signature": "GetJourneyActionmap(actionMapId)",
      "parameters": [
        {
          "name": "actionMapId",
          "type": "string"
        }
      ],
      "return": "ActionMap"
    },
    "GET /api/v2/journey/actionmaps": {
      "functionName": "GetJourneyActionmaps",
      "signature": "GetJourneyActionmaps(pageNumber, pageSize, sortBy, filterField, filterValue, actionMapIds, queryFields, queryValue)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "filterField",
          "type": "string"
        },
        {
          "name": "filterValue",
          "type": "string"
        },
        {
          "name": "actionMapIds",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "queryFields",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "queryValue",
          "type": "string"
        }
      ],
      "return": "ActionMapListing"
    },
    "GET /api/v2/journey/actiontargets/{actionTargetId}": {
      "functionName": "GetJourneyActiontarget",
      "signature": "GetJourneyActiontarget(actionTargetId)",
      "parameters": [
        {
          "name": "actionTargetId",
          "type": "string"
        }
      ],
      "return": "ActionTarget"
    },
    "GET /api/v2/journey/actiontargets": {
      "functionName": "GetJourneyActiontargets",
      "signature": "GetJourneyActiontargets(pageNumber, pageSize)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "ActionTargetListing"
    },
    "GET /api/v2/journey/actiontemplates/{actionTemplateId}": {
      "functionName": "GetJourneyActiontemplate",
      "signature": "GetJourneyActiontemplate(actionTemplateId)",
      "parameters": [
        {
          "name": "actionTemplateId",
          "type": "string"
        }
      ],
      "return": "ActionTemplate"
    },
    "GET /api/v2/journey/actiontemplates": {
      "functionName": "GetJourneyActiontemplates",
      "signature": "GetJourneyActiontemplates(pageNumber, pageSize, sortBy, mediaType, state, queryFields, queryValue)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "mediaType",
          "type": "string"
        },
        {
          "name": "state",
          "type": "string"
        },
        {
          "name": "queryFields",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "queryValue",
          "type": "string"
        }
      ],
      "return": "ActionTemplateListing"
    },
    "GET /api/v2/journey/outcomes/{outcomeId}": {
      "functionName": "GetJourneyOutcome",
      "signature": "GetJourneyOutcome(outcomeId)",
      "parameters": [
        {
          "name": "outcomeId",
          "type": "string"
        }
      ],
      "return": "Outcome"
    },
    "GET /api/v2/journey/outcomes": {
      "functionName": "GetJourneyOutcomes",
      "signature": "GetJourneyOutcomes(pageNumber, pageSize, sortBy, outcomeIds, queryFields, queryValue)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "outcomeIds",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "queryFields",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "queryValue",
          "type": "string"
        }
      ],
      "return": "OutcomeListing"
    },
    "GET /api/v2/journey/segments/{segmentId}": {
      "functionName": "GetJourneySegment",
      "signature": "GetJourneySegment(segmentId)",
      "parameters": [
        {
          "name": "segmentId",
          "type": "string"
        }
      ],
      "return": "JourneySegment"
    },
    "GET /api/v2/journey/segments": {
      "functionName": "GetJourneySegments",
      "signature": "GetJourneySegments(sortBy, pageSize, pageNumber, isActive, segmentIds, queryFields, queryValue)",
      "parameters": [
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "isActive",
          "type": "bool?"
        },
        {
          "name": "segmentIds",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "queryFields",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "queryValue",
          "type": "string"
        }
      ],
      "return": "SegmentListing"
    },
    "GET /api/v2/journey/sessions/{sessionId}": {
      "functionName": "GetJourneySession",
      "signature": "GetJourneySession(sessionId)",
      "parameters": [
        {
          "name": "sessionId",
          "type": "string"
        }
      ],
      "return": "Session"
    },
    "GET /api/v2/journey/sessions/{sessionId}/outcomescores": {
      "functionName": "GetJourneySessionOutcomescores",
      "signature": "GetJourneySessionOutcomescores(sessionId)",
      "parameters": [
        {
          "name": "sessionId",
          "type": "string"
        }
      ],
      "return": "OutcomeScoresResult"
    },
    "PATCH /api/v2/journey/actionmaps/{actionMapId}": {
      "functionName": "PatchJourneyActionmap",
      "signature": "PatchJourneyActionmap(actionMapId, body)",
      "parameters": [
        {
          "name": "actionMapId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "PatchActionMap"
        }
      ],
      "return": "ActionMap"
    },
    "PATCH /api/v2/journey/actiontargets/{actionTargetId}": {
      "functionName": "PatchJourneyActiontarget",
      "signature": "PatchJourneyActiontarget(actionTargetId, body)",
      "parameters": [
        {
          "name": "actionTargetId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "PatchActionTarget"
        }
      ],
      "return": "ActionTarget"
    },
    "PATCH /api/v2/journey/actiontemplates/{actionTemplateId}": {
      "functionName": "PatchJourneyActiontemplate",
      "signature": "PatchJourneyActiontemplate(actionTemplateId, body)",
      "parameters": [
        {
          "name": "actionTemplateId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "PatchActionTemplate"
        }
      ],
      "return": "ActionTemplate"
    },
    "PATCH /api/v2/journey/outcomes/{outcomeId}": {
      "functionName": "PatchJourneyOutcome",
      "signature": "PatchJourneyOutcome(outcomeId, body)",
      "parameters": [
        {
          "name": "outcomeId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "PatchOutcome"
        }
      ],
      "return": "Outcome"
    },
    "PATCH /api/v2/journey/segments/{segmentId}": {
      "functionName": "PatchJourneySegment",
      "signature": "PatchJourneySegment(segmentId, body)",
      "parameters": [
        {
          "name": "segmentId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "PatchSegment"
        }
      ],
      "return": "JourneySegment"
    },
    "POST /api/v2/analytics/journeys/aggregates/query": {
      "functionName": "PostAnalyticsJourneysAggregatesQuery",
      "signature": "PostAnalyticsJourneysAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "JourneyAggregationQuery"
        }
      ],
      "return": "JourneyAggregateQueryResponse"
    },
    "POST /api/v2/journey/actionmaps": {
      "functionName": "PostJourneyActionmaps",
      "signature": "PostJourneyActionmaps(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ActionMap"
        }
      ],
      "return": "ActionMap"
    },
    "POST /api/v2/journey/actiontemplates": {
      "functionName": "PostJourneyActiontemplates",
      "signature": "PostJourneyActiontemplates(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ActionTemplate"
        }
      ],
      "return": "ActionTemplate"
    },
    "POST /api/v2/journey/outcomes": {
      "functionName": "PostJourneyOutcomes",
      "signature": "PostJourneyOutcomes(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Outcome"
        }
      ],
      "return": "Outcome"
    },
    "POST /api/v2/journey/segments": {
      "functionName": "PostJourneySegments",
      "signature": "PostJourneySegments(body)",
      "parameters": [
        {
          "name": "body",
          "type": "JourneySegment"
        }
      ],
      "return": "JourneySegment"
    }
  },
  "knowledge": {
    "DELETE /api/v2/knowledge/knowledgebases/{knowledgeBaseId}": {
      "functionName": "DeleteKnowledgeKnowledgebase",
      "signature": "DeleteKnowledgeKnowledgebase(knowledgeBaseId)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "string"
        }
      ],
      "return": "KnowledgeBase"
    },
    "DELETE /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}": {
      "functionName": "DeleteKnowledgeKnowledgebaseLanguageCategory",
      "signature": "DeleteKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode)",
      "parameters": [
        {
          "name": "categoryId",
          "type": "string"
        },
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        }
      ],
      "return": "KnowledgeCategory"
    },
    "DELETE /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}": {
      "functionName": "DeleteKnowledgeKnowledgebaseLanguageDocument",
      "signature": "DeleteKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode)",
      "parameters": [
        {
          "name": "documentId",
          "type": "string"
        },
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        }
      ],
      "return": "KnowledgeDocument"
    },
    "DELETE /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}": {
      "functionName": "DeleteKnowledgeKnowledgebaseLanguageDocumentsImport",
      "signature": "DeleteKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        },
        {
          "name": "importId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}": {
      "functionName": "GetKnowledgeKnowledgebase",
      "signature": "GetKnowledgeKnowledgebase(knowledgeBaseId)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "string"
        }
      ],
      "return": "KnowledgeBase"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories": {
      "functionName": "GetKnowledgeKnowledgebaseLanguageCategories",
      "signature": "GetKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId, languageCode, before, after, limit, pageSize, name)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        },
        {
          "name": "before",
          "type": "string"
        },
        {
          "name": "after",
          "type": "string"
        },
        {
          "name": "limit",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        }
      ],
      "return": "CategoryListing"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}": {
      "functionName": "GetKnowledgeKnowledgebaseLanguageCategory",
      "signature": "GetKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode)",
      "parameters": [
        {
          "name": "categoryId",
          "type": "string"
        },
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        }
      ],
      "return": "KnowledgeExtendedCategory"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}": {
      "functionName": "GetKnowledgeKnowledgebaseLanguageDocument",
      "signature": "GetKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode)",
      "parameters": [
        {
          "name": "documentId",
          "type": "string"
        },
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        }
      ],
      "return": "KnowledgeDocument"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents": {
      "functionName": "GetKnowledgeKnowledgebaseLanguageDocuments",
      "signature": "GetKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, before, after, limit, pageSize, categories, title, sortBy, sortOrder, documentIds)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        },
        {
          "name": "before",
          "type": "string"
        },
        {
          "name": "after",
          "type": "string"
        },
        {
          "name": "limit",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "string"
        },
        {
          "name": "categories",
          "type": "string"
        },
        {
          "name": "title",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "documentIds",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "DocumentListing"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}": {
      "functionName": "GetKnowledgeKnowledgebaseLanguageDocumentsImport",
      "signature": "GetKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        },
        {
          "name": "importId",
          "type": "string"
        }
      ],
      "return": "KnowledgeImport"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}": {
      "functionName": "GetKnowledgeKnowledgebaseLanguageTraining",
      "signature": "GetKnowledgeKnowledgebaseLanguageTraining(knowledgeBaseId, languageCode, trainingId)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        },
        {
          "name": "trainingId",
          "type": "string"
        }
      ],
      "return": "KnowledgeTraining"
    },
    "GET /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings": {
      "functionName": "GetKnowledgeKnowledgebaseLanguageTrainings",
      "signature": "GetKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId, languageCode, before, after, limit, pageSize, knowledgeDocumentsState)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        },
        {
          "name": "before",
          "type": "string"
        },
        {
          "name": "after",
          "type": "string"
        },
        {
          "name": "limit",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "string"
        },
        {
          "name": "knowledgeDocumentsState",
          "type": "string"
        }
      ],
      "return": "TrainingListing"
    },
    "GET /api/v2/knowledge/knowledgebases": {
      "functionName": "GetKnowledgeKnowledgebases",
      "signature": "GetKnowledgeKnowledgebases(before, after, limit, pageSize, name, coreLanguage, published, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "before",
          "type": "string"
        },
        {
          "name": "after",
          "type": "string"
        },
        {
          "name": "limit",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "coreLanguage",
          "type": "string"
        },
        {
          "name": "published",
          "type": "bool?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "KnowledgeBaseListing"
    },
    "PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}": {
      "functionName": "PatchKnowledgeKnowledgebase",
      "signature": "PatchKnowledgeKnowledgebase(knowledgeBaseId, body)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "KnowledgeBase"
        }
      ],
      "return": "KnowledgeBase"
    },
    "PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}": {
      "functionName": "PatchKnowledgeKnowledgebaseLanguageCategory",
      "signature": "PatchKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode, body)",
      "parameters": [
        {
          "name": "categoryId",
          "type": "string"
        },
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        },
        {
          "name": "body",
          "type": "KnowledgeCategoryRequest"
        }
      ],
      "return": "KnowledgeExtendedCategory"
    },
    "PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}": {
      "functionName": "PatchKnowledgeKnowledgebaseLanguageDocument",
      "signature": "PatchKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode, body)",
      "parameters": [
        {
          "name": "documentId",
          "type": "string"
        },
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        },
        {
          "name": "body",
          "type": "KnowledgeDocumentRequest"
        }
      ],
      "return": "KnowledgeDocument"
    },
    "PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents": {
      "functionName": "PatchKnowledgeKnowledgebaseLanguageDocuments",
      "signature": "PatchKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, body)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;KnowledgeDocumentBulkRequest&gt;"
        }
      ],
      "return": "DocumentListing"
    },
    "PATCH /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}": {
      "functionName": "PatchKnowledgeKnowledgebaseLanguageDocumentsImport",
      "signature": "PatchKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId, body)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        },
        {
          "name": "importId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ImportStatusRequest"
        }
      ],
      "return": "KnowledgeImport"
    },
    "POST /api/v2/knowledge/documentuploads": {
      "functionName": "PostKnowledgeDocumentuploads",
      "signature": "PostKnowledgeDocumentuploads(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UploadUrlRequest"
        }
      ],
      "return": "UploadUrlResponse"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories": {
      "functionName": "PostKnowledgeKnowledgebaseLanguageCategories",
      "signature": "PostKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId, languageCode, body)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        },
        {
          "name": "body",
          "type": "KnowledgeCategoryRequest"
        }
      ],
      "return": "KnowledgeExtendedCategory"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents": {
      "functionName": "PostKnowledgeKnowledgebaseLanguageDocuments",
      "signature": "PostKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, body)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        },
        {
          "name": "body",
          "type": "KnowledgeDocumentRequest"
        }
      ],
      "return": "KnowledgeDocument"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports": {
      "functionName": "PostKnowledgeKnowledgebaseLanguageDocumentsImports",
      "signature": "PostKnowledgeKnowledgebaseLanguageDocumentsImports(knowledgeBaseId, languageCode, body)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        },
        {
          "name": "body",
          "type": "KnowledgeImport"
        }
      ],
      "return": "KnowledgeImport"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}/promote": {
      "functionName": "PostKnowledgeKnowledgebaseLanguageTrainingPromote",
      "signature": "PostKnowledgeKnowledgebaseLanguageTrainingPromote(knowledgeBaseId, languageCode, trainingId)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        },
        {
          "name": "trainingId",
          "type": "string"
        }
      ],
      "return": "KnowledgeTraining"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings": {
      "functionName": "PostKnowledgeKnowledgebaseLanguageTrainings",
      "signature": "PostKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId, languageCode)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "languageCode",
          "type": "string"
        }
      ],
      "return": "KnowledgeTraining"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/search": {
      "functionName": "PostKnowledgeKnowledgebaseSearch",
      "signature": "PostKnowledgeKnowledgebaseSearch(knowledgeBaseId, body)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "KnowledgeSearchRequest"
        }
      ],
      "return": "KnowledgeSearchResponse"
    },
    "POST /api/v2/knowledge/knowledgebases": {
      "functionName": "PostKnowledgeKnowledgebases",
      "signature": "PostKnowledgeKnowledgebases(body)",
      "parameters": [
        {
          "name": "body",
          "type": "KnowledgeBase"
        }
      ],
      "return": "KnowledgeBase"
    }
  },
  "languageunderstanding": {
    "DELETE /api/v2/languageunderstanding/domains/{domainId}": {
      "functionName": "DeleteLanguageunderstandingDomain",
      "signature": "DeleteLanguageunderstandingDomain(domainId)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/languageunderstanding/domains/{domainId}/feedback/{feedbackId}": {
      "functionName": "DeleteLanguageunderstandingDomainFeedbackFeedbackId",
      "signature": "DeleteLanguageunderstandingDomainFeedbackFeedbackId(domainId, feedbackId)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        },
        {
          "name": "feedbackId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}": {
      "functionName": "DeleteLanguageunderstandingDomainVersion",
      "signature": "DeleteLanguageunderstandingDomainVersion(domainId, domainVersionId)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        },
        {
          "name": "domainVersionId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/languageunderstanding/miners/{minerId}": {
      "functionName": "DeleteLanguageunderstandingMiner",
      "signature": "DeleteLanguageunderstandingMiner(minerId)",
      "parameters": [
        {
          "name": "minerId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/languageunderstanding/miners/{minerId}/drafts/{draftId}": {
      "functionName": "DeleteLanguageunderstandingMinerDraft",
      "signature": "DeleteLanguageunderstandingMinerDraft(minerId, draftId)",
      "parameters": [
        {
          "name": "minerId",
          "type": "string"
        },
        {
          "name": "draftId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/languageunderstanding/domains/{domainId}": {
      "functionName": "GetLanguageunderstandingDomain",
      "signature": "GetLanguageunderstandingDomain(domainId)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        }
      ],
      "return": "NluDomain"
    },
    "GET /api/v2/languageunderstanding/domains/{domainId}/feedback": {
      "functionName": "GetLanguageunderstandingDomainFeedback",
      "signature": "GetLanguageunderstandingDomainFeedback(domainId, intentName, assessment, dateStart, dateEnd, includeDeleted, pageNumber, pageSize, enableCursorPagination, after, fields)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        },
        {
          "name": "intentName",
          "type": "string"
        },
        {
          "name": "assessment",
          "type": "string"
        },
        {
          "name": "dateStart",
          "type": "String"
        },
        {
          "name": "dateEnd",
          "type": "String"
        },
        {
          "name": "includeDeleted",
          "type": "bool?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "enableCursorPagination",
          "type": "bool?"
        },
        {
          "name": "after",
          "type": "string"
        },
        {
          "name": "fields",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "NluFeedbackListing"
    },
    "GET /api/v2/languageunderstanding/domains/{domainId}/feedback/{feedbackId}": {
      "functionName": "GetLanguageunderstandingDomainFeedbackFeedbackId",
      "signature": "GetLanguageunderstandingDomainFeedbackFeedbackId(domainId, feedbackId, fields)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        },
        {
          "name": "feedbackId",
          "type": "string"
        },
        {
          "name": "fields",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "NluFeedbackResponse"
    },
    "GET /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}": {
      "functionName": "GetLanguageunderstandingDomainVersion",
      "signature": "GetLanguageunderstandingDomainVersion(domainId, domainVersionId, includeUtterances)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        },
        {
          "name": "domainVersionId",
          "type": "string"
        },
        {
          "name": "includeUtterances",
          "type": "bool?"
        }
      ],
      "return": "NluDomainVersion"
    },
    "GET /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/report": {
      "functionName": "GetLanguageunderstandingDomainVersionReport",
      "signature": "GetLanguageunderstandingDomainVersionReport(domainId, domainVersionId)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        },
        {
          "name": "domainVersionId",
          "type": "string"
        }
      ],
      "return": "NluDomainVersionQualityReport"
    },
    "GET /api/v2/languageunderstanding/domains/{domainId}/versions": {
      "functionName": "GetLanguageunderstandingDomainVersions",
      "signature": "GetLanguageunderstandingDomainVersions(domainId, includeUtterances, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        },
        {
          "name": "includeUtterances",
          "type": "bool?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "NluDomainVersionListing"
    },
    "GET /api/v2/languageunderstanding/domains": {
      "functionName": "GetLanguageunderstandingDomains",
      "signature": "GetLanguageunderstandingDomains(pageNumber, pageSize)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "NluDomainListing"
    },
    "GET /api/v2/languageunderstanding/miners/{minerId}": {
      "functionName": "GetLanguageunderstandingMiner",
      "signature": "GetLanguageunderstandingMiner(minerId)",
      "parameters": [
        {
          "name": "minerId",
          "type": "string"
        }
      ],
      "return": "Miner"
    },
    "GET /api/v2/languageunderstanding/miners/{minerId}/drafts/{draftId}": {
      "functionName": "GetLanguageunderstandingMinerDraft",
      "signature": "GetLanguageunderstandingMinerDraft(minerId, draftId)",
      "parameters": [
        {
          "name": "minerId",
          "type": "string"
        },
        {
          "name": "draftId",
          "type": "string"
        }
      ],
      "return": "Draft"
    },
    "GET /api/v2/languageunderstanding/miners/{minerId}/drafts": {
      "functionName": "GetLanguageunderstandingMinerDrafts",
      "signature": "GetLanguageunderstandingMinerDrafts(minerId)",
      "parameters": [
        {
          "name": "minerId",
          "type": "string"
        }
      ],
      "return": "DraftListing"
    },
    "GET /api/v2/languageunderstanding/miners/{minerId}/intents/{intentId}": {
      "functionName": "GetLanguageunderstandingMinerIntent",
      "signature": "GetLanguageunderstandingMinerIntent(minerId, intentId, expand)",
      "parameters": [
        {
          "name": "minerId",
          "type": "string"
        },
        {
          "name": "intentId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "MinerIntent"
    },
    "GET /api/v2/languageunderstanding/miners/{minerId}/intents": {
      "functionName": "GetLanguageunderstandingMinerIntents",
      "signature": "GetLanguageunderstandingMinerIntents(minerId, expand)",
      "parameters": [
        {
          "name": "minerId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "MinedIntentsListing"
    },
    "GET /api/v2/languageunderstanding/miners": {
      "functionName": "GetLanguageunderstandingMiners",
      "signature": "GetLanguageunderstandingMiners()",
      "return": "MinerListing"
    },
    "PATCH /api/v2/languageunderstanding/domains/{domainId}": {
      "functionName": "PatchLanguageunderstandingDomain",
      "signature": "PatchLanguageunderstandingDomain(domainId, body)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "NluDomain"
        }
      ],
      "return": "NluDomain"
    },
    "PATCH /api/v2/languageunderstanding/miners/{minerId}/drafts/{draftId}": {
      "functionName": "PatchLanguageunderstandingMinerDraft",
      "signature": "PatchLanguageunderstandingMinerDraft(minerId, draftId, body)",
      "parameters": [
        {
          "name": "minerId",
          "type": "string"
        },
        {
          "name": "draftId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DraftRequest"
        }
      ],
      "return": "Draft"
    },
    "POST /api/v2/languageunderstanding/domains/{domainId}/feedback": {
      "functionName": "PostLanguageunderstandingDomainFeedback",
      "signature": "PostLanguageunderstandingDomainFeedback(domainId, body)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "NluFeedbackRequest"
        }
      ],
      "return": "NluFeedbackResponse"
    },
    "POST /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/detect": {
      "functionName": "PostLanguageunderstandingDomainVersionDetect",
      "signature": "PostLanguageunderstandingDomainVersionDetect(domainId, domainVersionId, body)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        },
        {
          "name": "domainVersionId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "NluDetectionRequest"
        }
      ],
      "return": "NluDetectionResponse"
    },
    "POST /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/publish": {
      "functionName": "PostLanguageunderstandingDomainVersionPublish",
      "signature": "PostLanguageunderstandingDomainVersionPublish(domainId, domainVersionId)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        },
        {
          "name": "domainVersionId",
          "type": "string"
        }
      ],
      "return": "NluDomainVersion"
    },
    "POST /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/train": {
      "functionName": "PostLanguageunderstandingDomainVersionTrain",
      "signature": "PostLanguageunderstandingDomainVersionTrain(domainId, domainVersionId)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        },
        {
          "name": "domainVersionId",
          "type": "string"
        }
      ],
      "return": "NluDomainVersionTrainingResponse"
    },
    "POST /api/v2/languageunderstanding/domains/{domainId}/versions": {
      "functionName": "PostLanguageunderstandingDomainVersions",
      "signature": "PostLanguageunderstandingDomainVersions(domainId, body)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "NluDomainVersion"
        }
      ],
      "return": "NluDomainVersion"
    },
    "POST /api/v2/languageunderstanding/domains": {
      "functionName": "PostLanguageunderstandingDomains",
      "signature": "PostLanguageunderstandingDomains(body)",
      "parameters": [
        {
          "name": "body",
          "type": "NluDomain"
        }
      ],
      "return": "NluDomain"
    },
    "POST /api/v2/languageunderstanding/miners/{minerId}/drafts": {
      "functionName": "PostLanguageunderstandingMinerDrafts",
      "signature": "PostLanguageunderstandingMinerDrafts(minerId, body)",
      "parameters": [
        {
          "name": "minerId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Draft"
        }
      ],
      "return": "Draft"
    },
    "POST /api/v2/languageunderstanding/miners/{minerId}/execute": {
      "functionName": "PostLanguageunderstandingMinerExecute",
      "signature": "PostLanguageunderstandingMinerExecute(minerId, body)",
      "parameters": [
        {
          "name": "minerId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "MinerExecuteRequest"
        }
      ],
      "return": "Miner"
    },
    "POST /api/v2/languageunderstanding/miners": {
      "functionName": "PostLanguageunderstandingMiners",
      "signature": "PostLanguageunderstandingMiners(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Miner"
        }
      ],
      "return": "Miner"
    },
    "PUT /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}": {
      "functionName": "PutLanguageunderstandingDomainVersion",
      "signature": "PutLanguageunderstandingDomainVersion(domainId, domainVersionId, body)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        },
        {
          "name": "domainVersionId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "NluDomainVersion"
        }
      ],
      "return": "NluDomainVersion"
    }
  },
  "languages": {
    "DELETE /api/v2/languages/{languageId}": {
      "functionName": "DeleteLanguage",
      "signature": "DeleteLanguage(languageId)",
      "parameters": [
        {
          "name": "languageId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/routing/languages/{languageId}": {
      "functionName": "DeleteRoutingLanguage",
      "signature": "DeleteRoutingLanguage(languageId)",
      "parameters": [
        {
          "name": "languageId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/languages/{languageId}": {
      "functionName": "GetLanguage",
      "signature": "GetLanguage(languageId)",
      "parameters": [
        {
          "name": "languageId",
          "type": "string"
        }
      ],
      "return": "Language"
    },
    "GET /api/v2/languages": {
      "functionName": "GetLanguages",
      "signature": "GetLanguages(pageSize, pageNumber, sortOrder, name)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        }
      ],
      "return": "LanguageEntityListing"
    },
    "GET /api/v2/languages/translations": {
      "functionName": "GetLanguagesTranslations",
      "signature": "GetLanguagesTranslations()",
      "return": "AvailableTranslations"
    },
    "GET /api/v2/languages/translations/builtin": {
      "functionName": "GetLanguagesTranslationsBuiltin",
      "signature": "GetLanguagesTranslationsBuiltin(language)",
      "parameters": [
        {
          "name": "language",
          "type": "string"
        }
      ],
      "return": "Dictionary&lt;string, Object&gt;"
    },
    "GET /api/v2/languages/translations/organization": {
      "functionName": "GetLanguagesTranslationsOrganization",
      "signature": "GetLanguagesTranslationsOrganization(language)",
      "parameters": [
        {
          "name": "language",
          "type": "string"
        }
      ],
      "return": "Dictionary&lt;string, Object&gt;"
    },
    "GET /api/v2/languages/translations/users/{userId}": {
      "functionName": "GetLanguagesTranslationsUser",
      "signature": "GetLanguagesTranslationsUser(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "Dictionary&lt;string, Object&gt;"
    },
    "GET /api/v2/routing/languages/{languageId}": {
      "functionName": "GetRoutingLanguage",
      "signature": "GetRoutingLanguage(languageId)",
      "parameters": [
        {
          "name": "languageId",
          "type": "string"
        }
      ],
      "return": "Language"
    },
    "POST /api/v2/languages": {
      "functionName": "PostLanguages",
      "signature": "PostLanguages(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Language"
        }
      ],
      "return": "Language"
    }
  },
  "learning": {
    "DELETE /api/v2/learning/assignments/{assignmentId}": {
      "functionName": "DeleteLearningAssignment",
      "signature": "DeleteLearningAssignment(assignmentId)",
      "parameters": [
        {
          "name": "assignmentId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/learning/modules/{moduleId}": {
      "functionName": "DeleteLearningModule",
      "signature": "DeleteLearningModule(moduleId)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/learning/assignments/{assignmentId}": {
      "functionName": "GetLearningAssignment",
      "signature": "GetLearningAssignment(assignmentId, expand)",
      "parameters": [
        {
          "name": "assignmentId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "LearningAssignment"
    },
    "GET /api/v2/learning/assignments": {
      "functionName": "GetLearningAssignments",
      "signature": "GetLearningAssignments(moduleId, interval, completionInterval, overdue, pageSize, pageNumber, pass, minPercentageScore, maxPercentageScore, sortOrder, sortBy, userId, types, states, expand)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "string"
        },
        {
          "name": "interval",
          "type": "string"
        },
        {
          "name": "completionInterval",
          "type": "string"
        },
        {
          "name": "overdue",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pass",
          "type": "string"
        },
        {
          "name": "minPercentageScore",
          "type": "float?"
        },
        {
          "name": "maxPercentageScore",
          "type": "float?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "userId",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "types",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "states",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "LearningAssignmentsDomainEntity"
    },
    "GET /api/v2/learning/assignments/me": {
      "functionName": "GetLearningAssignmentsMe",
      "signature": "GetLearningAssignmentsMe(moduleId, interval, completionInterval, overdue, pageSize, pageNumber, pass, minPercentageScore, maxPercentageScore, sortOrder, sortBy, types, states, expand)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "string"
        },
        {
          "name": "interval",
          "type": "string"
        },
        {
          "name": "completionInterval",
          "type": "string"
        },
        {
          "name": "overdue",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pass",
          "type": "string"
        },
        {
          "name": "minPercentageScore",
          "type": "float?"
        },
        {
          "name": "maxPercentageScore",
          "type": "float?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "types",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "states",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "LearningAssignmentsDomainEntity"
    },
    "GET /api/v2/learning/modules/{moduleId}": {
      "functionName": "GetLearningModule",
      "signature": "GetLearningModule(moduleId, expand)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "LearningModule"
    },
    "GET /api/v2/learning/modules/{moduleId}/rule": {
      "functionName": "GetLearningModuleRule",
      "signature": "GetLearningModuleRule(moduleId)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "string"
        }
      ],
      "return": "LearningModuleRule"
    },
    "GET /api/v2/learning/modules/{moduleId}/versions/{versionId}": {
      "functionName": "GetLearningModuleVersion",
      "signature": "GetLearningModuleVersion(moduleId, versionId, expand)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "string"
        },
        {
          "name": "versionId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "LearningModule"
    },
    "GET /api/v2/learning/modules": {
      "functionName": "GetLearningModules",
      "signature": "GetLearningModules(isArchived, types, pageSize, pageNumber, sortOrder, sortBy, searchTerm, expand, isPublished)",
      "parameters": [
        {
          "name": "isArchived",
          "type": "bool?"
        },
        {
          "name": "types",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "searchTerm",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "isPublished",
          "type": "string"
        }
      ],
      "return": "LearningModulesDomainEntityListing"
    },
    "PATCH /api/v2/learning/assignments/{assignmentId}": {
      "functionName": "PatchLearningAssignment",
      "signature": "PatchLearningAssignment(assignmentId, body)",
      "parameters": [
        {
          "name": "assignmentId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "LearningAssignmentUpdate"
        }
      ],
      "return": "LearningAssignment"
    },
    "POST /api/v2/learning/assessments/scoring": {
      "functionName": "PostLearningAssessmentsScoring",
      "signature": "PostLearningAssessmentsScoring(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LearningAssessmentScoringRequest"
        }
      ],
      "return": "AssessmentScoringSet"
    },
    "POST /api/v2/learning/assignments": {
      "functionName": "PostLearningAssignments",
      "signature": "PostLearningAssignments(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LearningAssignmentCreate"
        }
      ],
      "return": "LearningAssignment"
    },
    "POST /api/v2/learning/assignments/aggregates/query": {
      "functionName": "PostLearningAssignmentsAggregatesQuery",
      "signature": "PostLearningAssignmentsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LearningAssignmentAggregateParam"
        }
      ],
      "return": "LearningAssignmentAggregateResponse"
    },
    "POST /api/v2/learning/assignments/bulkadd": {
      "functionName": "PostLearningAssignmentsBulkadd",
      "signature": "PostLearningAssignmentsBulkadd(body)",
      "parameters": [
        {
          "name": "body",
          "type": "List&lt;LearningAssignmentItem&gt;"
        }
      ],
      "return": "LearningAssignmentBulkAddResponse"
    },
    "POST /api/v2/learning/assignments/bulkremove": {
      "functionName": "PostLearningAssignmentsBulkremove",
      "signature": "PostLearningAssignmentsBulkremove(body)",
      "parameters": [
        {
          "name": "body",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "LearningAssignmentBulkRemoveResponse"
    },
    "POST /api/v2/learning/modules/{moduleId}/publish": {
      "functionName": "PostLearningModulePublish",
      "signature": "PostLearningModulePublish(moduleId)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "string"
        }
      ],
      "return": "LearningModulePublishResponse"
    },
    "POST /api/v2/learning/modules": {
      "functionName": "PostLearningModules",
      "signature": "PostLearningModules(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LearningModuleRequest"
        }
      ],
      "return": "LearningModule"
    },
    "POST /api/v2/learning/rules/query": {
      "functionName": "PostLearningRulesQuery",
      "signature": "PostLearningRulesQuery(pageSize, pageNumber, body)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "body",
          "type": "LearningAssignmentUserQuery"
        }
      ],
      "return": "LearningAssignmentUserListing"
    },
    "PUT /api/v2/learning/modules/{moduleId}": {
      "functionName": "PutLearningModule",
      "signature": "PutLearningModule(moduleId, body)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "LearningModuleRequest"
        }
      ],
      "return": "LearningModule"
    },
    "PUT /api/v2/learning/modules/{moduleId}/rule": {
      "functionName": "PutLearningModuleRule",
      "signature": "PutLearningModuleRule(moduleId, body)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "LearningModuleRule"
        }
      ],
      "return": "LearningModuleRule"
    }
  },
  "license": {
    "GET /api/v2/license/definitions/{licenseId}": {
      "functionName": "GetLicenseDefinition",
      "signature": "GetLicenseDefinition(licenseId)",
      "parameters": [
        {
          "name": "licenseId",
          "type": "string"
        }
      ],
      "return": "LicenseDefinition"
    },
    "GET /api/v2/license/definitions": {
      "functionName": "GetLicenseDefinitions",
      "signature": "GetLicenseDefinitions()",
      "return": "List&lt;LicenseDefinition&gt;"
    },
    "GET /api/v2/license/toggles/{featureName}": {
      "functionName": "GetLicenseToggle",
      "signature": "GetLicenseToggle(featureName)",
      "parameters": [
        {
          "name": "featureName",
          "type": "string"
        }
      ],
      "return": "LicenseOrgToggle"
    },
    "GET /api/v2/license/users/{userId}": {
      "functionName": "GetLicenseUser",
      "signature": "GetLicenseUser(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "LicenseUser"
    },
    "GET /api/v2/license/users": {
      "functionName": "GetLicenseUsers",
      "signature": "GetLicenseUsers(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "UserLicensesEntityListing"
    },
    "POST /api/v2/license/infer": {
      "functionName": "PostLicenseInfer",
      "signature": "PostLicenseInfer(body)",
      "parameters": [
        {
          "name": "body",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "List&lt;string&gt;"
    },
    "POST /api/v2/license/organization": {
      "functionName": "PostLicenseOrganization",
      "signature": "PostLicenseOrganization(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LicenseBatchAssignmentRequest"
        }
      ],
      "return": "List&lt;LicenseUpdateStatus&gt;"
    },
    "POST /api/v2/license/toggles/{featureName}": {
      "functionName": "PostLicenseToggle",
      "signature": "PostLicenseToggle(featureName)",
      "parameters": [
        {
          "name": "featureName",
          "type": "string"
        }
      ],
      "return": "LicenseOrgToggle"
    },
    "POST /api/v2/license/users": {
      "functionName": "PostLicenseUsers",
      "signature": "PostLicenseUsers(body)",
      "parameters": [
        {
          "name": "body",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "Dictionary&lt;string, Object&gt;"
    }
  },
  "locations": {
    "DELETE /api/v2/locations/{locationId}": {
      "functionName": "DeleteLocation",
      "signature": "DeleteLocation(locationId)",
      "parameters": [
        {
          "name": "locationId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/locations/{locationId}": {
      "functionName": "GetLocation",
      "signature": "GetLocation(locationId, expand)",
      "parameters": [
        {
          "name": "locationId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "LocationDefinition"
    },
    "GET /api/v2/locations/{locationId}/sublocations": {
      "functionName": "GetLocationSublocations",
      "signature": "GetLocationSublocations(locationId)",
      "parameters": [
        {
          "name": "locationId",
          "type": "string"
        }
      ],
      "return": "LocationEntityListing"
    },
    "GET /api/v2/locations": {
      "functionName": "GetLocations",
      "signature": "GetLocations(pageSize, pageNumber, id, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "LocationEntityListing"
    },
    "GET /api/v2/locations/search": {
      "functionName": "GetLocationsSearch",
      "signature": "GetLocationsSearch(q64, expand)",
      "parameters": [
        {
          "name": "q64",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "LocationsSearchResponse"
    },
    "PATCH /api/v2/locations/{locationId}": {
      "functionName": "PatchLocation",
      "signature": "PatchLocation(locationId, body)",
      "parameters": [
        {
          "name": "locationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "LocationUpdateDefinition"
        }
      ],
      "return": "LocationDefinition"
    },
    "POST /api/v2/locations": {
      "functionName": "PostLocations",
      "signature": "PostLocations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LocationCreateDefinition"
        }
      ],
      "return": "LocationDefinition"
    },
    "POST /api/v2/locations/search": {
      "functionName": "PostLocationsSearch",
      "signature": "PostLocationsSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LocationSearchRequest"
        }
      ],
      "return": "LocationsSearchResponse"
    }
  },
  "messaging": {
    "DELETE /api/v2/messaging/supportedcontent/{supportedContentId}": {
      "functionName": "DeleteMessagingSupportedcontentSupportedContentId",
      "signature": "DeleteMessagingSupportedcontentSupportedContentId(supportedContentId)",
      "parameters": [
        {
          "name": "supportedContentId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/messaging/supportedcontent": {
      "functionName": "GetMessagingSupportedcontent",
      "signature": "GetMessagingSupportedcontent(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "SupportedContentListing"
    },
    "GET /api/v2/messaging/supportedcontent/{supportedContentId}": {
      "functionName": "GetMessagingSupportedcontentSupportedContentId",
      "signature": "GetMessagingSupportedcontentSupportedContentId(supportedContentId)",
      "parameters": [
        {
          "name": "supportedContentId",
          "type": "string"
        }
      ],
      "return": "SupportedContent"
    },
    "PATCH /api/v2/messaging/supportedcontent/{supportedContentId}": {
      "functionName": "PatchMessagingSupportedcontentSupportedContentId",
      "signature": "PatchMessagingSupportedcontentSupportedContentId(supportedContentId, body)",
      "parameters": [
        {
          "name": "supportedContentId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "SupportedContent"
        }
      ],
      "return": "SupportedContent"
    },
    "POST /api/v2/messaging/supportedcontent": {
      "functionName": "PostMessagingSupportedcontent",
      "signature": "PostMessagingSupportedcontent(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SupportedContent"
        }
      ],
      "return": "SupportedContent"
    }
  },
  "mobiledevices": {
    "DELETE /api/v2/mobiledevices/{deviceId}": {
      "functionName": "DeleteMobiledevice",
      "signature": "DeleteMobiledevice(deviceId)",
      "parameters": [
        {
          "name": "deviceId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/mobiledevices/{deviceId}": {
      "functionName": "GetMobiledevice",
      "signature": "GetMobiledevice(deviceId)",
      "parameters": [
        {
          "name": "deviceId",
          "type": "string"
        }
      ],
      "return": "UserDevice"
    },
    "GET /api/v2/mobiledevices": {
      "functionName": "GetMobiledevices",
      "signature": "GetMobiledevices(pageSize, pageNumber, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "DirectoryUserDevicesListing"
    },
    "POST /api/v2/mobiledevices": {
      "functionName": "PostMobiledevices",
      "signature": "PostMobiledevices(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UserDevice"
        }
      ],
      "return": "UserDevice"
    },
    "PUT /api/v2/mobiledevices/{deviceId}": {
      "functionName": "PutMobiledevice",
      "signature": "PutMobiledevice(deviceId, body)",
      "parameters": [
        {
          "name": "deviceId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UserDevice"
        }
      ],
      "return": "UserDevice"
    }
  },
  "notifications": {
    "DELETE /api/v2/notifications/channels/{channelId}/subscriptions": {
      "functionName": "DeleteNotificationsChannelSubscriptions",
      "signature": "DeleteNotificationsChannelSubscriptions(channelId)",
      "parameters": [
        {
          "name": "channelId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/notifications/availabletopics": {
      "functionName": "GetNotificationsAvailabletopics",
      "signature": "GetNotificationsAvailabletopics(expand, includePreview)",
      "parameters": [
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "includePreview",
          "type": "bool?"
        }
      ],
      "return": "AvailableTopicEntityListing"
    },
    "GET /api/v2/notifications/channels/{channelId}/subscriptions": {
      "functionName": "GetNotificationsChannelSubscriptions",
      "signature": "GetNotificationsChannelSubscriptions(channelId)",
      "parameters": [
        {
          "name": "channelId",
          "type": "string"
        }
      ],
      "return": "ChannelTopicEntityListing"
    },
    "GET /api/v2/notifications/channels": {
      "functionName": "GetNotificationsChannels",
      "signature": "GetNotificationsChannels(includechannels)",
      "parameters": [
        {
          "name": "includechannels",
          "type": "string"
        }
      ],
      "return": "ChannelEntityListing"
    },
    "HEAD /api/v2/notifications/channels/{channelId}": {
      "functionName": "HeadNotificationsChannel",
      "signature": "HeadNotificationsChannel(channelId)",
      "parameters": [
        {
          "name": "channelId",
          "type": "string"
        }
      ]
    },
    "POST /api/v2/notifications/channels/{channelId}/subscriptions": {
      "functionName": "PostNotificationsChannelSubscriptions",
      "signature": "PostNotificationsChannelSubscriptions(channelId, body)",
      "parameters": [
        {
          "name": "channelId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;ChannelTopic&gt;"
        }
      ],
      "return": "ChannelTopicEntityListing"
    },
    "POST /api/v2/notifications/channels": {
      "functionName": "PostNotificationsChannels",
      "signature": "PostNotificationsChannels()",
      "return": "Channel"
    },
    "PUT /api/v2/notifications/channels/{channelId}/subscriptions": {
      "functionName": "PutNotificationsChannelSubscriptions",
      "signature": "PutNotificationsChannelSubscriptions(channelId, body)",
      "parameters": [
        {
          "name": "channelId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;ChannelTopic&gt;"
        }
      ],
      "return": "ChannelTopicEntityListing"
    }
  },
  "oauth": {
    "DELETE /api/v2/oauth/clients/{clientId}": {
      "functionName": "DeleteOauthClient",
      "signature": "DeleteOauthClient(clientId)",
      "parameters": [
        {
          "name": "clientId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/oauth/authorizations/{clientId}": {
      "functionName": "GetOauthAuthorization",
      "signature": "GetOauthAuthorization(clientId)",
      "parameters": [
        {
          "name": "clientId",
          "type": "string"
        }
      ],
      "return": "OAuthAuthorization"
    },
    "GET /api/v2/oauth/authorizations": {
      "functionName": "GetOauthAuthorizations",
      "signature": "GetOauthAuthorizations()",
      "return": "OAuthAuthorizationListing"
    },
    "GET /api/v2/oauth/clients/{clientId}": {
      "functionName": "GetOauthClient",
      "signature": "GetOauthClient(clientId)",
      "parameters": [
        {
          "name": "clientId",
          "type": "string"
        }
      ],
      "return": "OAuthClient"
    },
    "GET /api/v2/oauth/clients/{clientId}/usage/query/results/{executionId}": {
      "functionName": "GetOauthClientUsageQueryResult",
      "signature": "GetOauthClientUsageQueryResult(executionId, clientId)",
      "parameters": [
        {
          "name": "executionId",
          "type": "string"
        },
        {
          "name": "clientId",
          "type": "string"
        }
      ],
      "return": "ApiUsageQueryResult"
    },
    "GET /api/v2/oauth/clients/{clientId}/usage/summary": {
      "functionName": "GetOauthClientUsageSummary",
      "signature": "GetOauthClientUsageSummary(clientId, days)",
      "parameters": [
        {
          "name": "clientId",
          "type": "string"
        },
        {
          "name": "days",
          "type": "string"
        }
      ],
      "return": "UsageExecutionResult"
    },
    "GET /api/v2/oauth/clients": {
      "functionName": "GetOauthClients",
      "signature": "GetOauthClients()",
      "return": "OAuthClientEntityListing"
    },
    "GET /api/v2/oauth/scopes/{scopeId}": {
      "functionName": "GetOauthScope",
      "signature": "GetOauthScope(scopeId, acceptLanguage)",
      "parameters": [
        {
          "name": "scopeId",
          "type": "string"
        },
        {
          "name": "acceptLanguage",
          "type": "string"
        }
      ],
      "return": "OAuthScope"
    },
    "GET /api/v2/oauth/scopes": {
      "functionName": "GetOauthScopes",
      "signature": "GetOauthScopes(acceptLanguage)",
      "parameters": [
        {
          "name": "acceptLanguage",
          "type": "string"
        }
      ],
      "return": "OAuthScopeListing"
    },
    "POST /api/v2/oauth/clients/{clientId}/secret": {
      "functionName": "PostOauthClientSecret",
      "signature": "PostOauthClientSecret(clientId)",
      "parameters": [
        {
          "name": "clientId",
          "type": "string"
        }
      ],
      "return": "OAuthClient"
    },
    "POST /api/v2/oauth/clients/{clientId}/usage/query": {
      "functionName": "PostOauthClientUsageQuery",
      "signature": "PostOauthClientUsageQuery(clientId, body)",
      "parameters": [
        {
          "name": "clientId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ApiUsageQuery"
        }
      ],
      "return": "UsageExecutionResult"
    },
    "POST /api/v2/oauth/clients": {
      "functionName": "PostOauthClients",
      "signature": "PostOauthClients(body)",
      "parameters": [
        {
          "name": "body",
          "type": "OAuthClientRequest"
        }
      ],
      "return": "OAuthClient"
    },
    "PUT /api/v2/oauth/clients/{clientId}": {
      "functionName": "PutOauthClient",
      "signature": "PutOauthClient(clientId, body)",
      "parameters": [
        {
          "name": "clientId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "OAuthClientRequest"
        }
      ],
      "return": "OAuthClient"
    }
  },
  "objects": {
    "DELETE /api/v2/authorization/divisions/{divisionId}": {
      "functionName": "DeleteAuthorizationDivision",
      "signature": "DeleteAuthorizationDivision(divisionId, force)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "string"
        },
        {
          "name": "force",
          "type": "bool?"
        }
      ]
    },
    "GET /api/v2/authorization/divisions/{divisionId}": {
      "functionName": "GetAuthorizationDivision",
      "signature": "GetAuthorizationDivision(divisionId, objectCount)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "string"
        },
        {
          "name": "objectCount",
          "type": "bool?"
        }
      ],
      "return": "AuthzDivision"
    },
    "GET /api/v2/authorization/divisions": {
      "functionName": "GetAuthorizationDivisions",
      "signature": "GetAuthorizationDivisions(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, objectCount, id, name)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        },
        {
          "name": "objectCount",
          "type": "bool?"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "name",
          "type": "string"
        }
      ],
      "return": "AuthzDivisionEntityListing"
    },
    "GET /api/v2/authorization/divisions/home": {
      "functionName": "GetAuthorizationDivisionsHome",
      "signature": "GetAuthorizationDivisionsHome()",
      "return": "AuthzDivision"
    },
    "GET /api/v2/authorization/divisions/limit": {
      "functionName": "GetAuthorizationDivisionsLimit",
      "signature": "GetAuthorizationDivisionsLimit()",
      "return": "int?"
    },
    "POST /api/v2/authorization/divisions/{divisionId}/objects/{objectType}": {
      "functionName": "PostAuthorizationDivisionObject",
      "signature": "PostAuthorizationDivisionObject(divisionId, objectType, body)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "string"
        },
        {
          "name": "objectType",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;string&gt;"
        }
      ]
    },
    "POST /api/v2/authorization/divisions/{divisionId}/restore": {
      "functionName": "PostAuthorizationDivisionRestore",
      "signature": "PostAuthorizationDivisionRestore(divisionId, body)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "AuthzDivision"
        }
      ],
      "return": "AuthzDivision"
    },
    "POST /api/v2/authorization/divisions": {
      "functionName": "PostAuthorizationDivisions",
      "signature": "PostAuthorizationDivisions(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AuthzDivision"
        }
      ],
      "return": "AuthzDivision"
    },
    "PUT /api/v2/authorization/divisions/{divisionId}": {
      "functionName": "PutAuthorizationDivision",
      "signature": "PutAuthorizationDivision(divisionId, body)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "AuthzDivision"
        }
      ],
      "return": "AuthzDivision"
    }
  },
  "organization": {
    "GET /api/v2/fieldconfig": {
      "functionName": "GetFieldconfig",
      "signature": "GetFieldconfig(type)",
      "parameters": [
        {
          "name": "type",
          "type": "string"
        }
      ],
      "return": "FieldConfig"
    },
    "GET /api/v2/organizations/embeddedintegration": {
      "functionName": "GetOrganizationsEmbeddedintegration",
      "signature": "GetOrganizationsEmbeddedintegration()",
      "return": "EmbeddedIntegration"
    },
    "GET /api/v2/organizations/ipaddressauthentication": {
      "functionName": "GetOrganizationsIpaddressauthentication",
      "signature": "GetOrganizationsIpaddressauthentication()",
      "return": "IpAddressAuthentication"
    },
    "GET /api/v2/organizations/limits/changerequests/{requestId}": {
      "functionName": "GetOrganizationsLimitsChangerequest",
      "signature": "GetOrganizationsLimitsChangerequest(requestId)",
      "parameters": [
        {
          "name": "requestId",
          "type": "string"
        }
      ],
      "return": "LimitChangeRequestDetails"
    },
    "GET /api/v2/organizations/limits/changerequests": {
      "functionName": "GetOrganizationsLimitsChangerequests",
      "signature": "GetOrganizationsLimitsChangerequests(after, before, status, pageSize, expand)",
      "parameters": [
        {
          "name": "after",
          "type": "long?"
        },
        {
          "name": "before",
          "type": "long?"
        },
        {
          "name": "status",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "LimitChangeRequestsEntityListing"
    },
    "GET /api/v2/organizations/limits/docs": {
      "functionName": "GetOrganizationsLimitsDocs",
      "signature": "GetOrganizationsLimitsDocs()",
      "return": "UrlResponse"
    },
    "GET /api/v2/organizations/limits/namespaces/{namespaceName}": {
      "functionName": "GetOrganizationsLimitsNamespace",
      "signature": "GetOrganizationsLimitsNamespace(namespaceName)",
      "parameters": [
        {
          "name": "namespaceName",
          "type": "string"
        }
      ],
      "return": "LimitsEntityListing"
    },
    "GET /api/v2/organizations/limits/namespaces/{namespaceName}/defaults": {
      "functionName": "GetOrganizationsLimitsNamespaceDefaults",
      "signature": "GetOrganizationsLimitsNamespaceDefaults(namespaceName)",
      "parameters": [
        {
          "name": "namespaceName",
          "type": "string"
        }
      ],
      "return": "LimitsEntityListing"
    },
    "GET /api/v2/organizations/limits/namespaces": {
      "functionName": "GetOrganizationsLimitsNamespaces",
      "signature": "GetOrganizationsLimitsNamespaces(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "PagedNamespaceListing"
    },
    "GET /api/v2/organizations/me": {
      "functionName": "GetOrganizationsMe",
      "signature": "GetOrganizationsMe()",
      "return": "Organization"
    },
    "GET /api/v2/organizations/whitelist": {
      "functionName": "GetOrganizationsWhitelist",
      "signature": "GetOrganizationsWhitelist()",
      "return": "OrgWhitelistSettings"
    },
    "PATCH /api/v2/organizations/features/{featureName}": {
      "functionName": "PatchOrganizationsFeature",
      "signature": "PatchOrganizationsFeature(featureName, enabled)",
      "parameters": [
        {
          "name": "featureName",
          "type": "string"
        },
        {
          "name": "enabled",
          "type": "FeatureState"
        }
      ],
      "return": "OrganizationFeatures"
    },
    "PUT /api/v2/organizations/embeddedintegration": {
      "functionName": "PutOrganizationsEmbeddedintegration",
      "signature": "PutOrganizationsEmbeddedintegration(body)",
      "parameters": [
        {
          "name": "body",
          "type": "EmbeddedIntegration"
        }
      ],
      "return": "EmbeddedIntegration"
    },
    "PUT /api/v2/organizations/ipaddressauthentication": {
      "functionName": "PutOrganizationsIpaddressauthentication",
      "signature": "PutOrganizationsIpaddressauthentication(body)",
      "parameters": [
        {
          "name": "body",
          "type": "IpAddressAuthentication"
        }
      ],
      "return": "IpAddressAuthentication"
    },
    "PUT /api/v2/organizations/me": {
      "functionName": "PutOrganizationsMe",
      "signature": "PutOrganizationsMe(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Organization"
        }
      ],
      "return": "Organization"
    },
    "PUT /api/v2/organizations/whitelist": {
      "functionName": "PutOrganizationsWhitelist",
      "signature": "PutOrganizationsWhitelist(body)",
      "parameters": [
        {
          "name": "body",
          "type": "OrgWhitelistSettings"
        }
      ],
      "return": "OrgWhitelistSettings"
    }
  },
  "organizationauthorization": {
    "DELETE /api/v2/orgauthorization/trustees/{trusteeOrgId}": {
      "functionName": "DeleteOrgauthorizationTrustee",
      "signature": "DeleteOrgauthorizationTrustee(trusteeOrgId)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/orgauthorization/trustees/{trusteeOrgId}/clonedusers/{trusteeUserId}": {
      "functionName": "DeleteOrgauthorizationTrusteeCloneduser",
      "signature": "DeleteOrgauthorizationTrusteeCloneduser(trusteeOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "string"
        },
        {
          "name": "trusteeUserId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}": {
      "functionName": "DeleteOrgauthorizationTrusteeUser",
      "signature": "DeleteOrgauthorizationTrusteeUser(trusteeOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "string"
        },
        {
          "name": "trusteeUserId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles": {
      "functionName": "DeleteOrgauthorizationTrusteeUserRoles",
      "signature": "DeleteOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "string"
        },
        {
          "name": "trusteeUserId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/orgauthorization/trustors/{trustorOrgId}": {
      "functionName": "DeleteOrgauthorizationTrustor",
      "signature": "DeleteOrgauthorizationTrustor(trustorOrgId)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/orgauthorization/trustors/{trustorOrgId}/clonedusers/{trusteeUserId}": {
      "functionName": "DeleteOrgauthorizationTrustorCloneduser",
      "signature": "DeleteOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "string"
        },
        {
          "name": "trusteeUserId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}": {
      "functionName": "DeleteOrgauthorizationTrustorUser",
      "signature": "DeleteOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "string"
        },
        {
          "name": "trusteeUserId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/orgauthorization/pairings/{pairingId}": {
      "functionName": "GetOrgauthorizationPairing",
      "signature": "GetOrgauthorizationPairing(pairingId)",
      "parameters": [
        {
          "name": "pairingId",
          "type": "string"
        }
      ],
      "return": "TrustRequest"
    },
    "GET /api/v2/orgauthorization/trustees/{trusteeOrgId}": {
      "functionName": "GetOrgauthorizationTrustee",
      "signature": "GetOrgauthorizationTrustee(trusteeOrgId)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "string"
        }
      ],
      "return": "Trustee"
    },
    "GET /api/v2/orgauthorization/trustees/{trusteeOrgId}/clonedusers": {
      "functionName": "GetOrgauthorizationTrusteeClonedusers",
      "signature": "GetOrgauthorizationTrusteeClonedusers(trusteeOrgId)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "string"
        }
      ],
      "return": "ClonedUserEntityListing"
    },
    "GET /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}": {
      "functionName": "GetOrgauthorizationTrusteeUser",
      "signature": "GetOrgauthorizationTrusteeUser(trusteeOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "string"
        },
        {
          "name": "trusteeUserId",
          "type": "string"
        }
      ],
      "return": "TrustUser"
    },
    "GET /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles": {
      "functionName": "GetOrgauthorizationTrusteeUserRoles",
      "signature": "GetOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "string"
        },
        {
          "name": "trusteeUserId",
          "type": "string"
        }
      ],
      "return": "UserAuthorization"
    },
    "GET /api/v2/orgauthorization/trustees/{trusteeOrgId}/users": {
      "functionName": "GetOrgauthorizationTrusteeUsers",
      "signature": "GetOrgauthorizationTrusteeUsers(trusteeOrgId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "TrustUserEntityListing"
    },
    "GET /api/v2/orgauthorization/trustees": {
      "functionName": "GetOrgauthorizationTrustees",
      "signature": "GetOrgauthorizationTrustees(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "TrustEntityListing"
    },
    "GET /api/v2/orgauthorization/trustees/default": {
      "functionName": "GetOrgauthorizationTrusteesDefault",
      "signature": "GetOrgauthorizationTrusteesDefault()",
      "return": "Trustee"
    },
    "GET /api/v2/orgauthorization/trustors/{trustorOrgId}": {
      "functionName": "GetOrgauthorizationTrustor",
      "signature": "GetOrgauthorizationTrustor(trustorOrgId)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "string"
        }
      ],
      "return": "Trustor"
    },
    "GET /api/v2/orgauthorization/trustors/{trustorOrgId}/clonedusers/{trusteeUserId}": {
      "functionName": "GetOrgauthorizationTrustorCloneduser",
      "signature": "GetOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "string"
        },
        {
          "name": "trusteeUserId",
          "type": "string"
        }
      ],
      "return": "ClonedUser"
    },
    "GET /api/v2/orgauthorization/trustors/{trustorOrgId}/clonedusers": {
      "functionName": "GetOrgauthorizationTrustorClonedusers",
      "signature": "GetOrgauthorizationTrustorClonedusers(trustorOrgId)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "string"
        }
      ],
      "return": "ClonedUserEntityListing"
    },
    "GET /api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}": {
      "functionName": "GetOrgauthorizationTrustorUser",
      "signature": "GetOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "string"
        },
        {
          "name": "trusteeUserId",
          "type": "string"
        }
      ],
      "return": "TrustUser"
    },
    "GET /api/v2/orgauthorization/trustors/{trustorOrgId}/users": {
      "functionName": "GetOrgauthorizationTrustorUsers",
      "signature": "GetOrgauthorizationTrustorUsers(trustorOrgId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "TrustUserEntityListing"
    },
    "GET /api/v2/orgauthorization/trustors": {
      "functionName": "GetOrgauthorizationTrustors",
      "signature": "GetOrgauthorizationTrustors(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "TrustorEntityListing"
    },
    "POST /api/v2/orgauthorization/pairings": {
      "functionName": "PostOrgauthorizationPairings",
      "signature": "PostOrgauthorizationPairings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TrustRequestCreate"
        }
      ],
      "return": "TrustRequest"
    },
    "POST /api/v2/orgauthorization/trustees/{trusteeOrgId}/users": {
      "functionName": "PostOrgauthorizationTrusteeUsers",
      "signature": "PostOrgauthorizationTrusteeUsers(trusteeOrgId, body)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "TrustMemberCreate"
        }
      ],
      "return": "TrustUser"
    },
    "POST /api/v2/orgauthorization/trustees": {
      "functionName": "PostOrgauthorizationTrustees",
      "signature": "PostOrgauthorizationTrustees(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TrustCreate"
        }
      ],
      "return": "Trustee"
    },
    "POST /api/v2/orgauthorization/trustees/audits": {
      "functionName": "PostOrgauthorizationTrusteesAudits",
      "signature": "PostOrgauthorizationTrusteesAudits(body, pageSize, pageNumber, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "body",
          "type": "TrusteeAuditQueryRequest"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "AuditQueryResponse"
    },
    "POST /api/v2/orgauthorization/trustees/default": {
      "functionName": "PostOrgauthorizationTrusteesDefault",
      "signature": "PostOrgauthorizationTrusteesDefault(assignDefaultRole, autoExpire)",
      "parameters": [
        {
          "name": "assignDefaultRole",
          "type": "bool?"
        },
        {
          "name": "autoExpire",
          "type": "bool?"
        }
      ],
      "return": "Trustee"
    },
    "POST /api/v2/orgauthorization/trustor/audits": {
      "functionName": "PostOrgauthorizationTrustorAudits",
      "signature": "PostOrgauthorizationTrustorAudits(body, pageSize, pageNumber, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "body",
          "type": "TrustorAuditQueryRequest"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "AuditQueryResponse"
    },
    "PUT /api/v2/orgauthorization/trustees/{trusteeOrgId}": {
      "functionName": "PutOrgauthorizationTrustee",
      "signature": "PutOrgauthorizationTrustee(trusteeOrgId, body)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "TrustUpdate"
        }
      ],
      "return": "Trustee"
    },
    "PUT /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roledivisions": {
      "functionName": "PutOrgauthorizationTrusteeUserRoledivisions",
      "signature": "PutOrgauthorizationTrusteeUserRoledivisions(trusteeOrgId, trusteeUserId, body)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "string"
        },
        {
          "name": "trusteeUserId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "RoleDivisionGrants"
        }
      ],
      "return": "UserAuthorization"
    },
    "PUT /api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles": {
      "functionName": "PutOrgauthorizationTrusteeUserRoles",
      "signature": "PutOrgauthorizationTrusteeUserRoles(trusteeOrgId, trusteeUserId, body)",
      "parameters": [
        {
          "name": "trusteeOrgId",
          "type": "string"
        },
        {
          "name": "trusteeUserId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "UserAuthorization"
    },
    "PUT /api/v2/orgauthorization/trustors/{trustorOrgId}/clonedusers/{trusteeUserId}": {
      "functionName": "PutOrgauthorizationTrustorCloneduser",
      "signature": "PutOrgauthorizationTrustorCloneduser(trustorOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "string"
        },
        {
          "name": "trusteeUserId",
          "type": "string"
        }
      ],
      "return": "ClonedUser"
    },
    "PUT /api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}": {
      "functionName": "PutOrgauthorizationTrustorUser",
      "signature": "PutOrgauthorizationTrustorUser(trustorOrgId, trusteeUserId)",
      "parameters": [
        {
          "name": "trustorOrgId",
          "type": "string"
        },
        {
          "name": "trusteeUserId",
          "type": "string"
        }
      ],
      "return": "TrustUser"
    }
  },
  "outbound": {
    "DELETE /api/v2/outbound/attemptlimits/{attemptLimitsId}": {
      "functionName": "DeleteOutboundAttemptlimit",
      "signature": "DeleteOutboundAttemptlimit(attemptLimitsId)",
      "parameters": [
        {
          "name": "attemptLimitsId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/outbound/callabletimesets/{callableTimeSetId}": {
      "functionName": "DeleteOutboundCallabletimeset",
      "signature": "DeleteOutboundCallabletimeset(callableTimeSetId)",
      "parameters": [
        {
          "name": "callableTimeSetId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}": {
      "functionName": "DeleteOutboundCallanalysisresponseset",
      "signature": "DeleteOutboundCallanalysisresponseset(callAnalysisSetId)",
      "parameters": [
        {
          "name": "callAnalysisSetId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/outbound/campaigns/{campaignId}": {
      "functionName": "DeleteOutboundCampaign",
      "signature": "DeleteOutboundCampaign(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "string"
        }
      ],
      "return": "Campaign"
    },
    "DELETE /api/v2/outbound/campaigns/{campaignId}/progress": {
      "functionName": "DeleteOutboundCampaignProgress",
      "signature": "DeleteOutboundCampaignProgress(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/outbound/campaignrules/{campaignRuleId}": {
      "functionName": "DeleteOutboundCampaignrule",
      "signature": "DeleteOutboundCampaignrule(campaignRuleId)",
      "parameters": [
        {
          "name": "campaignRuleId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/outbound/contactlists/{contactListId}": {
      "functionName": "DeleteOutboundContactlist",
      "signature": "DeleteOutboundContactlist(contactListId)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}": {
      "functionName": "DeleteOutboundContactlistContact",
      "signature": "DeleteOutboundContactlistContact(contactListId, contactId)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "string"
        },
        {
          "name": "contactId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/outbound/contactlists/{contactListId}/contacts": {
      "functionName": "DeleteOutboundContactlistContacts",
      "signature": "DeleteOutboundContactlistContacts(contactListId, contactIds)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "string"
        },
        {
          "name": "contactIds",
          "type": "List&lt;string&gt;"
        }
      ]
    },
    "DELETE /api/v2/outbound/contactlistfilters/{contactListFilterId}": {
      "functionName": "DeleteOutboundContactlistfilter",
      "signature": "DeleteOutboundContactlistfilter(contactListFilterId)",
      "parameters": [
        {
          "name": "contactListFilterId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/outbound/contactlists": {
      "functionName": "DeleteOutboundContactlists",
      "signature": "DeleteOutboundContactlists(id)",
      "parameters": [
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        }
      ]
    },
    "DELETE /api/v2/outbound/dnclists/{dncListId}": {
      "functionName": "DeleteOutboundDnclist",
      "signature": "DeleteOutboundDnclist(dncListId)",
      "parameters": [
        {
          "name": "dncListId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/outbound/messagingcampaigns/{messagingCampaignId}": {
      "functionName": "DeleteOutboundMessagingcampaign",
      "signature": "DeleteOutboundMessagingcampaign(messagingCampaignId)",
      "parameters": [
        {
          "name": "messagingCampaignId",
          "type": "string"
        }
      ],
      "return": "MessagingCampaign"
    },
    "DELETE /api/v2/outbound/rulesets/{ruleSetId}": {
      "functionName": "DeleteOutboundRuleset",
      "signature": "DeleteOutboundRuleset(ruleSetId)",
      "parameters": [
        {
          "name": "ruleSetId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/outbound/schedules/campaigns/{campaignId}": {
      "functionName": "DeleteOutboundSchedulesCampaign",
      "signature": "DeleteOutboundSchedulesCampaign(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/outbound/schedules/sequences/{sequenceId}": {
      "functionName": "DeleteOutboundSchedulesSequence",
      "signature": "DeleteOutboundSchedulesSequence(sequenceId)",
      "parameters": [
        {
          "name": "sequenceId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/outbound/sequences/{sequenceId}": {
      "functionName": "DeleteOutboundSequence",
      "signature": "DeleteOutboundSequence(sequenceId)",
      "parameters": [
        {
          "name": "sequenceId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/outbound/attemptlimits/{attemptLimitsId}": {
      "functionName": "GetOutboundAttemptlimit",
      "signature": "GetOutboundAttemptlimit(attemptLimitsId)",
      "parameters": [
        {
          "name": "attemptLimitsId",
          "type": "string"
        }
      ],
      "return": "AttemptLimits"
    },
    "GET /api/v2/outbound/attemptlimits": {
      "functionName": "GetOutboundAttemptlimits",
      "signature": "GetOutboundAttemptlimits(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "allowEmptyResult",
          "type": "bool?"
        },
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "AttemptLimitsEntityListing"
    },
    "GET /api/v2/outbound/callabletimesets/{callableTimeSetId}": {
      "functionName": "GetOutboundCallabletimeset",
      "signature": "GetOutboundCallabletimeset(callableTimeSetId)",
      "parameters": [
        {
          "name": "callableTimeSetId",
          "type": "string"
        }
      ],
      "return": "CallableTimeSet"
    },
    "GET /api/v2/outbound/callabletimesets": {
      "functionName": "GetOutboundCallabletimesets",
      "signature": "GetOutboundCallabletimesets(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "allowEmptyResult",
          "type": "bool?"
        },
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "CallableTimeSetEntityListing"
    },
    "GET /api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}": {
      "functionName": "GetOutboundCallanalysisresponseset",
      "signature": "GetOutboundCallanalysisresponseset(callAnalysisSetId)",
      "parameters": [
        {
          "name": "callAnalysisSetId",
          "type": "string"
        }
      ],
      "return": "ResponseSet"
    },
    "GET /api/v2/outbound/callanalysisresponsesets": {
      "functionName": "GetOutboundCallanalysisresponsesets",
      "signature": "GetOutboundCallanalysisresponsesets(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "allowEmptyResult",
          "type": "bool?"
        },
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "ResponseSetEntityListing"
    },
    "GET /api/v2/outbound/campaigns/{campaignId}": {
      "functionName": "GetOutboundCampaign",
      "signature": "GetOutboundCampaign(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "string"
        }
      ],
      "return": "Campaign"
    },
    "GET /api/v2/outbound/campaigns/{campaignId}/agentownedmappingpreview/results": {
      "functionName": "GetOutboundCampaignAgentownedmappingpreviewResults",
      "signature": "GetOutboundCampaignAgentownedmappingpreviewResults(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "string"
        }
      ],
      "return": "AgentOwnedMappingPreviewListing"
    },
    "GET /api/v2/outbound/campaigns/{campaignId}/diagnostics": {
      "functionName": "GetOutboundCampaignDiagnostics",
      "signature": "GetOutboundCampaignDiagnostics(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "string"
        }
      ],
      "return": "CampaignDiagnostics"
    },
    "GET /api/v2/outbound/campaigns/{campaignId}/interactions": {
      "functionName": "GetOutboundCampaignInteractions",
      "signature": "GetOutboundCampaignInteractions(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "string"
        }
      ],
      "return": "CampaignInteractions"
    },
    "GET /api/v2/outbound/campaigns/{campaignId}/progress": {
      "functionName": "GetOutboundCampaignProgress",
      "signature": "GetOutboundCampaignProgress(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "string"
        }
      ],
      "return": "CampaignProgress"
    },
    "GET /api/v2/outbound/campaigns/{campaignId}/stats": {
      "functionName": "GetOutboundCampaignStats",
      "signature": "GetOutboundCampaignStats(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "string"
        }
      ],
      "return": "CampaignStats"
    },
    "GET /api/v2/outbound/campaignrules/{campaignRuleId}": {
      "functionName": "GetOutboundCampaignrule",
      "signature": "GetOutboundCampaignrule(campaignRuleId)",
      "parameters": [
        {
          "name": "campaignRuleId",
          "type": "string"
        }
      ],
      "return": "CampaignRule"
    },
    "GET /api/v2/outbound/campaignrules": {
      "functionName": "GetOutboundCampaignrules",
      "signature": "GetOutboundCampaignrules(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "allowEmptyResult",
          "type": "bool?"
        },
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "CampaignRuleEntityListing"
    },
    "GET /api/v2/outbound/campaigns": {
      "functionName": "GetOutboundCampaigns",
      "signature": "GetOutboundCampaigns(pageSize, pageNumber, filterType, name, id, contactListId, dncListIds, distributionQueueId, edgeGroupId, callAnalysisResponseSetId, divisionId, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "contactListId",
          "type": "string"
        },
        {
          "name": "dncListIds",
          "type": "string"
        },
        {
          "name": "distributionQueueId",
          "type": "string"
        },
        {
          "name": "edgeGroupId",
          "type": "string"
        },
        {
          "name": "callAnalysisResponseSetId",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "CampaignEntityListing"
    },
    "GET /api/v2/outbound/campaigns/all": {
      "functionName": "GetOutboundCampaignsAll",
      "signature": "GetOutboundCampaignsAll(pageSize, pageNumber, id, name, divisionId, mediaType, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "mediaType",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "CommonCampaignEntityListing"
    },
    "GET /api/v2/outbound/campaigns/all/divisionviews": {
      "functionName": "GetOutboundCampaignsAllDivisionviews",
      "signature": "GetOutboundCampaignsAllDivisionviews(pageSize, pageNumber, id, name, divisionId, mediaType, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "mediaType",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "CommonCampaignDivisionViewEntityListing"
    },
    "GET /api/v2/outbound/campaigns/divisionviews/{campaignId}": {
      "functionName": "GetOutboundCampaignsDivisionview",
      "signature": "GetOutboundCampaignsDivisionview(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "string"
        }
      ],
      "return": "CampaignDivisionView"
    },
    "GET /api/v2/outbound/campaigns/divisionviews": {
      "functionName": "GetOutboundCampaignsDivisionviews",
      "signature": "GetOutboundCampaignsDivisionviews(pageSize, pageNumber, filterType, name, id, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "CampaignDivisionViewListing"
    },
    "GET /api/v2/outbound/contactlists/{contactListId}": {
      "functionName": "GetOutboundContactlist",
      "signature": "GetOutboundContactlist(contactListId, includeImportStatus, includeSize)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "string"
        },
        {
          "name": "includeImportStatus",
          "type": "bool?"
        },
        {
          "name": "includeSize",
          "type": "bool?"
        }
      ],
      "return": "ContactList"
    },
    "GET /api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}": {
      "functionName": "GetOutboundContactlistContact",
      "signature": "GetOutboundContactlistContact(contactListId, contactId)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "string"
        },
        {
          "name": "contactId",
          "type": "string"
        }
      ],
      "return": "DialerContact"
    },
    "GET /api/v2/outbound/contactlists/{contactListId}/export": {
      "functionName": "GetOutboundContactlistExport",
      "signature": "GetOutboundContactlistExport(contactListId, download)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "string"
        },
        {
          "name": "download",
          "type": "string"
        }
      ],
      "return": "ExportUri"
    },
    "GET /api/v2/outbound/contactlists/{contactListId}/importstatus": {
      "functionName": "GetOutboundContactlistImportstatus",
      "signature": "GetOutboundContactlistImportstatus(contactListId)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "string"
        }
      ],
      "return": "ImportStatus"
    },
    "GET /api/v2/outbound/contactlists/{contactListId}/timezonemappingpreview": {
      "functionName": "GetOutboundContactlistTimezonemappingpreview",
      "signature": "GetOutboundContactlistTimezonemappingpreview(contactListId)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "string"
        }
      ],
      "return": "TimeZoneMappingPreview"
    },
    "GET /api/v2/outbound/contactlistfilters/{contactListFilterId}": {
      "functionName": "GetOutboundContactlistfilter",
      "signature": "GetOutboundContactlistfilter(contactListFilterId)",
      "parameters": [
        {
          "name": "contactListFilterId",
          "type": "string"
        }
      ],
      "return": "ContactListFilter"
    },
    "GET /api/v2/outbound/contactlistfilters": {
      "functionName": "GetOutboundContactlistfilters",
      "signature": "GetOutboundContactlistfilters(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder, contactListId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "allowEmptyResult",
          "type": "bool?"
        },
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "contactListId",
          "type": "string"
        }
      ],
      "return": "ContactListFilterEntityListing"
    },
    "GET /api/v2/outbound/contactlists": {
      "functionName": "GetOutboundContactlists",
      "signature": "GetOutboundContactlists(includeImportStatus, includeSize, pageSize, pageNumber, allowEmptyResult, filterType, name, id, divisionId, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "includeImportStatus",
          "type": "bool?"
        },
        {
          "name": "includeSize",
          "type": "bool?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "allowEmptyResult",
          "type": "bool?"
        },
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "ContactListEntityListing"
    },
    "GET /api/v2/outbound/contactlists/divisionviews/{contactListId}": {
      "functionName": "GetOutboundContactlistsDivisionview",
      "signature": "GetOutboundContactlistsDivisionview(contactListId, includeImportStatus, includeSize)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "string"
        },
        {
          "name": "includeImportStatus",
          "type": "bool?"
        },
        {
          "name": "includeSize",
          "type": "bool?"
        }
      ],
      "return": "ContactListDivisionView"
    },
    "GET /api/v2/outbound/contactlists/divisionviews": {
      "functionName": "GetOutboundContactlistsDivisionviews",
      "signature": "GetOutboundContactlistsDivisionviews(includeImportStatus, includeSize, pageSize, pageNumber, filterType, name, id, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "includeImportStatus",
          "type": "bool?"
        },
        {
          "name": "includeSize",
          "type": "bool?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "ContactListDivisionViewListing"
    },
    "GET /api/v2/outbound/dnclists/{dncListId}": {
      "functionName": "GetOutboundDnclist",
      "signature": "GetOutboundDnclist(dncListId, includeImportStatus, includeSize)",
      "parameters": [
        {
          "name": "dncListId",
          "type": "string"
        },
        {
          "name": "includeImportStatus",
          "type": "bool?"
        },
        {
          "name": "includeSize",
          "type": "bool?"
        }
      ],
      "return": "DncList"
    },
    "GET /api/v2/outbound/dnclists/{dncListId}/export": {
      "functionName": "GetOutboundDnclistExport",
      "signature": "GetOutboundDnclistExport(dncListId, download)",
      "parameters": [
        {
          "name": "dncListId",
          "type": "string"
        },
        {
          "name": "download",
          "type": "string"
        }
      ],
      "return": "ExportUri"
    },
    "GET /api/v2/outbound/dnclists/{dncListId}/importstatus": {
      "functionName": "GetOutboundDnclistImportstatus",
      "signature": "GetOutboundDnclistImportstatus(dncListId)",
      "parameters": [
        {
          "name": "dncListId",
          "type": "string"
        }
      ],
      "return": "ImportStatus"
    },
    "GET /api/v2/outbound/dnclists": {
      "functionName": "GetOutboundDnclists",
      "signature": "GetOutboundDnclists(includeImportStatus, includeSize, pageSize, pageNumber, allowEmptyResult, filterType, name, dncSourceType, divisionId, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "includeImportStatus",
          "type": "bool?"
        },
        {
          "name": "includeSize",
          "type": "bool?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "allowEmptyResult",
          "type": "bool?"
        },
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "dncSourceType",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "DncListEntityListing"
    },
    "GET /api/v2/outbound/dnclists/divisionviews/{dncListId}": {
      "functionName": "GetOutboundDnclistsDivisionview",
      "signature": "GetOutboundDnclistsDivisionview(dncListId, includeImportStatus, includeSize)",
      "parameters": [
        {
          "name": "dncListId",
          "type": "string"
        },
        {
          "name": "includeImportStatus",
          "type": "bool?"
        },
        {
          "name": "includeSize",
          "type": "bool?"
        }
      ],
      "return": "DncListDivisionView"
    },
    "GET /api/v2/outbound/dnclists/divisionviews": {
      "functionName": "GetOutboundDnclistsDivisionviews",
      "signature": "GetOutboundDnclistsDivisionviews(includeImportStatus, includeSize, pageSize, pageNumber, filterType, name, dncSourceType, id, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "includeImportStatus",
          "type": "bool?"
        },
        {
          "name": "includeSize",
          "type": "bool?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "dncSourceType",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "DncListDivisionViewListing"
    },
    "GET /api/v2/outbound/events/{eventId}": {
      "functionName": "GetOutboundEvent",
      "signature": "GetOutboundEvent(eventId)",
      "parameters": [
        {
          "name": "eventId",
          "type": "string"
        }
      ],
      "return": "EventLog"
    },
    "GET /api/v2/outbound/events": {
      "functionName": "GetOutboundEvents",
      "signature": "GetOutboundEvents(pageSize, pageNumber, filterType, category, level, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "category",
          "type": "string"
        },
        {
          "name": "level",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "DialerEventEntityListing"
    },
    "GET /api/v2/outbound/messagingcampaigns/{messagingCampaignId}": {
      "functionName": "GetOutboundMessagingcampaign",
      "signature": "GetOutboundMessagingcampaign(messagingCampaignId)",
      "parameters": [
        {
          "name": "messagingCampaignId",
          "type": "string"
        }
      ],
      "return": "MessagingCampaign"
    },
    "GET /api/v2/outbound/messagingcampaigns/{messagingCampaignId}/progress": {
      "functionName": "GetOutboundMessagingcampaignProgress",
      "signature": "GetOutboundMessagingcampaignProgress(messagingCampaignId)",
      "parameters": [
        {
          "name": "messagingCampaignId",
          "type": "string"
        }
      ],
      "return": "CampaignProgress"
    },
    "GET /api/v2/outbound/messagingcampaigns": {
      "functionName": "GetOutboundMessagingcampaigns",
      "signature": "GetOutboundMessagingcampaigns(pageSize, pageNumber, sortBy, sortOrder, name, contactListId, divisionId, type, senderSmsPhoneNumber, id)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "contactListId",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "senderSmsPhoneNumber",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "MessagingCampaignEntityListing"
    },
    "GET /api/v2/outbound/messagingcampaigns/divisionviews/{messagingCampaignId}": {
      "functionName": "GetOutboundMessagingcampaignsDivisionview",
      "signature": "GetOutboundMessagingcampaignsDivisionview(messagingCampaignId)",
      "parameters": [
        {
          "name": "messagingCampaignId",
          "type": "string"
        }
      ],
      "return": "MessagingCampaignDivisionView"
    },
    "GET /api/v2/outbound/messagingcampaigns/divisionviews": {
      "functionName": "GetOutboundMessagingcampaignsDivisionviews",
      "signature": "GetOutboundMessagingcampaignsDivisionviews(pageSize, pageNumber, sortOrder, name, type, id, senderSmsPhoneNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "senderSmsPhoneNumber",
          "type": "string"
        }
      ],
      "return": "MessagingCampaignDivisionViewEntityListing"
    },
    "GET /api/v2/outbound/rulesets/{ruleSetId}": {
      "functionName": "GetOutboundRuleset",
      "signature": "GetOutboundRuleset(ruleSetId)",
      "parameters": [
        {
          "name": "ruleSetId",
          "type": "string"
        }
      ],
      "return": "RuleSet"
    },
    "GET /api/v2/outbound/rulesets": {
      "functionName": "GetOutboundRulesets",
      "signature": "GetOutboundRulesets(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "allowEmptyResult",
          "type": "bool?"
        },
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "RuleSetEntityListing"
    },
    "GET /api/v2/outbound/schedules/campaigns/{campaignId}": {
      "functionName": "GetOutboundSchedulesCampaign",
      "signature": "GetOutboundSchedulesCampaign(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "string"
        }
      ],
      "return": "CampaignSchedule"
    },
    "GET /api/v2/outbound/schedules/campaigns": {
      "functionName": "GetOutboundSchedulesCampaigns",
      "signature": "GetOutboundSchedulesCampaigns()",
      "return": "List&lt;CampaignSchedule&gt;"
    },
    "GET /api/v2/outbound/schedules/sequences/{sequenceId}": {
      "functionName": "GetOutboundSchedulesSequence",
      "signature": "GetOutboundSchedulesSequence(sequenceId)",
      "parameters": [
        {
          "name": "sequenceId",
          "type": "string"
        }
      ],
      "return": "SequenceSchedule"
    },
    "GET /api/v2/outbound/schedules/sequences": {
      "functionName": "GetOutboundSchedulesSequences",
      "signature": "GetOutboundSchedulesSequences()",
      "return": "List&lt;SequenceSchedule&gt;"
    },
    "GET /api/v2/outbound/sequences/{sequenceId}": {
      "functionName": "GetOutboundSequence",
      "signature": "GetOutboundSequence(sequenceId)",
      "parameters": [
        {
          "name": "sequenceId",
          "type": "string"
        }
      ],
      "return": "CampaignSequence"
    },
    "GET /api/v2/outbound/sequences": {
      "functionName": "GetOutboundSequences",
      "signature": "GetOutboundSequences(pageSize, pageNumber, allowEmptyResult, filterType, name, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "allowEmptyResult",
          "type": "bool?"
        },
        {
          "name": "filterType",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "CampaignSequenceEntityListing"
    },
    "GET /api/v2/outbound/settings": {
      "functionName": "GetOutboundSettings",
      "signature": "GetOutboundSettings()",
      "return": "OutboundSettings"
    },
    "GET /api/v2/outbound/wrapupcodemappings": {
      "functionName": "GetOutboundWrapupcodemappings",
      "signature": "GetOutboundWrapupcodemappings()",
      "return": "WrapUpCodeMapping"
    },
    "PATCH /api/v2/outbound/settings": {
      "functionName": "PatchOutboundSettings",
      "signature": "PatchOutboundSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "OutboundSettings"
        }
      ]
    },
    "POST /api/v2/outbound/attemptlimits": {
      "functionName": "PostOutboundAttemptlimits",
      "signature": "PostOutboundAttemptlimits(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AttemptLimits"
        }
      ],
      "return": "AttemptLimits"
    },
    "POST /api/v2/outbound/audits": {
      "functionName": "PostOutboundAudits",
      "signature": "PostOutboundAudits(body, pageSize, pageNumber, sortBy, sortOrder, facetsOnly)",
      "parameters": [
        {
          "name": "body",
          "type": "DialerAuditRequest"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "facetsOnly",
          "type": "bool?"
        }
      ],
      "return": "AuditSearchResult"
    },
    "POST /api/v2/outbound/callabletimesets": {
      "functionName": "PostOutboundCallabletimesets",
      "signature": "PostOutboundCallabletimesets(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CallableTimeSet"
        }
      ],
      "return": "CallableTimeSet"
    },
    "POST /api/v2/outbound/callanalysisresponsesets": {
      "functionName": "PostOutboundCallanalysisresponsesets",
      "signature": "PostOutboundCallanalysisresponsesets(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ResponseSet"
        }
      ],
      "return": "ResponseSet"
    },
    "POST /api/v2/outbound/campaigns/{campaignId}/agentownedmappingpreview": {
      "functionName": "PostOutboundCampaignAgentownedmappingpreview",
      "signature": "PostOutboundCampaignAgentownedmappingpreview(campaignId)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "string"
        }
      ],
      "return": "Empty"
    },
    "POST /api/v2/outbound/campaigns/{campaignId}/callback/schedule": {
      "functionName": "PostOutboundCampaignCallbackSchedule",
      "signature": "PostOutboundCampaignCallbackSchedule(campaignId, body)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ContactCallbackRequest"
        }
      ],
      "return": "ContactCallbackRequest"
    },
    "POST /api/v2/outbound/campaignrules": {
      "functionName": "PostOutboundCampaignrules",
      "signature": "PostOutboundCampaignrules(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CampaignRule"
        }
      ],
      "return": "CampaignRule"
    },
    "POST /api/v2/outbound/campaigns": {
      "functionName": "PostOutboundCampaigns",
      "signature": "PostOutboundCampaigns(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Campaign"
        }
      ],
      "return": "Campaign"
    },
    "POST /api/v2/outbound/campaigns/progress": {
      "functionName": "PostOutboundCampaignsProgress",
      "signature": "PostOutboundCampaignsProgress(body)",
      "parameters": [
        {
          "name": "body",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "List&lt;CampaignProgress&gt;"
    },
    "POST /api/v2/outbound/contactlists/{contactListId}/clear": {
      "functionName": "PostOutboundContactlistClear",
      "signature": "PostOutboundContactlistClear(contactListId)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "string"
        }
      ]
    },
    "POST /api/v2/outbound/contactlists/{contactListId}/contacts": {
      "functionName": "PostOutboundContactlistContacts",
      "signature": "PostOutboundContactlistContacts(contactListId, body, priority, clearSystemData, doNotQueue)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;WritableDialerContact&gt;"
        },
        {
          "name": "priority",
          "type": "bool?"
        },
        {
          "name": "clearSystemData",
          "type": "bool?"
        },
        {
          "name": "doNotQueue",
          "type": "bool?"
        }
      ],
      "return": "List&lt;DialerContact&gt;"
    },
    "POST /api/v2/outbound/contactlists/{contactListId}/contacts/bulk": {
      "functionName": "PostOutboundContactlistContactsBulk",
      "signature": "PostOutboundContactlistContactsBulk(contactListId, body)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "List&lt;DialerContact&gt;"
    },
    "POST /api/v2/outbound/contactlists/{contactListId}/export": {
      "functionName": "PostOutboundContactlistExport",
      "signature": "PostOutboundContactlistExport(contactListId)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "string"
        }
      ],
      "return": "DomainEntityRef"
    },
    "POST /api/v2/outbound/contactlistfilters": {
      "functionName": "PostOutboundContactlistfilters",
      "signature": "PostOutboundContactlistfilters(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ContactListFilter"
        }
      ],
      "return": "ContactListFilter"
    },
    "POST /api/v2/outbound/contactlistfilters/preview": {
      "functionName": "PostOutboundContactlistfiltersPreview",
      "signature": "PostOutboundContactlistfiltersPreview(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ContactListFilter"
        }
      ],
      "return": "FilterPreviewResponse"
    },
    "POST /api/v2/outbound/contactlists": {
      "functionName": "PostOutboundContactlists",
      "signature": "PostOutboundContactlists(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ContactList"
        }
      ],
      "return": "ContactList"
    },
    "POST /api/v2/outbound/conversations/{conversationId}/dnc": {
      "functionName": "PostOutboundConversationDnc",
      "signature": "PostOutboundConversationDnc(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        }
      ]
    },
    "POST /api/v2/outbound/dnclists/{dncListId}/export": {
      "functionName": "PostOutboundDnclistExport",
      "signature": "PostOutboundDnclistExport(dncListId)",
      "parameters": [
        {
          "name": "dncListId",
          "type": "string"
        }
      ],
      "return": "DomainEntityRef"
    },
    "POST /api/v2/outbound/dnclists/{dncListId}/phonenumbers": {
      "functionName": "PostOutboundDnclistPhonenumbers",
      "signature": "PostOutboundDnclistPhonenumbers(dncListId, body, expirationDateTime)",
      "parameters": [
        {
          "name": "dncListId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "expirationDateTime",
          "type": "string"
        }
      ]
    },
    "POST /api/v2/outbound/dnclists": {
      "functionName": "PostOutboundDnclists",
      "signature": "PostOutboundDnclists(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DncListCreate"
        }
      ],
      "return": "DncList"
    },
    "POST /api/v2/outbound/messagingcampaigns": {
      "functionName": "PostOutboundMessagingcampaigns",
      "signature": "PostOutboundMessagingcampaigns(body)",
      "parameters": [
        {
          "name": "body",
          "type": "MessagingCampaign"
        }
      ],
      "return": "MessagingCampaign"
    },
    "POST /api/v2/outbound/messagingcampaigns/progress": {
      "functionName": "PostOutboundMessagingcampaignsProgress",
      "signature": "PostOutboundMessagingcampaignsProgress(body)",
      "parameters": [
        {
          "name": "body",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "List&lt;CampaignProgress&gt;"
    },
    "POST /api/v2/outbound/rulesets": {
      "functionName": "PostOutboundRulesets",
      "signature": "PostOutboundRulesets(body)",
      "parameters": [
        {
          "name": "body",
          "type": "RuleSet"
        }
      ],
      "return": "RuleSet"
    },
    "POST /api/v2/outbound/sequences": {
      "functionName": "PostOutboundSequences",
      "signature": "PostOutboundSequences(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CampaignSequence"
        }
      ],
      "return": "CampaignSequence"
    },
    "PUT /api/v2/outbound/attemptlimits/{attemptLimitsId}": {
      "functionName": "PutOutboundAttemptlimit",
      "signature": "PutOutboundAttemptlimit(attemptLimitsId, body)",
      "parameters": [
        {
          "name": "attemptLimitsId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "AttemptLimits"
        }
      ],
      "return": "AttemptLimits"
    },
    "PUT /api/v2/outbound/callabletimesets/{callableTimeSetId}": {
      "functionName": "PutOutboundCallabletimeset",
      "signature": "PutOutboundCallabletimeset(callableTimeSetId, body)",
      "parameters": [
        {
          "name": "callableTimeSetId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CallableTimeSet"
        }
      ],
      "return": "CallableTimeSet"
    },
    "PUT /api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}": {
      "functionName": "PutOutboundCallanalysisresponseset",
      "signature": "PutOutboundCallanalysisresponseset(callAnalysisSetId, body)",
      "parameters": [
        {
          "name": "callAnalysisSetId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ResponseSet"
        }
      ],
      "return": "ResponseSet"
    },
    "PUT /api/v2/outbound/campaigns/{campaignId}": {
      "functionName": "PutOutboundCampaign",
      "signature": "PutOutboundCampaign(campaignId, body)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Campaign"
        }
      ],
      "return": "Campaign"
    },
    "PUT /api/v2/outbound/campaigns/{campaignId}/agents/{userId}": {
      "functionName": "PutOutboundCampaignAgent",
      "signature": "PutOutboundCampaignAgent(campaignId, userId, body)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "string"
        },
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Agent"
        }
      ],
      "return": "string"
    },
    "PUT /api/v2/outbound/campaignrules/{campaignRuleId}": {
      "functionName": "PutOutboundCampaignrule",
      "signature": "PutOutboundCampaignrule(campaignRuleId, body)",
      "parameters": [
        {
          "name": "campaignRuleId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CampaignRule"
        }
      ],
      "return": "CampaignRule"
    },
    "PUT /api/v2/outbound/contactlists/{contactListId}": {
      "functionName": "PutOutboundContactlist",
      "signature": "PutOutboundContactlist(contactListId, body)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ContactList"
        }
      ],
      "return": "ContactList"
    },
    "PUT /api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}": {
      "functionName": "PutOutboundContactlistContact",
      "signature": "PutOutboundContactlistContact(contactListId, contactId, body)",
      "parameters": [
        {
          "name": "contactListId",
          "type": "string"
        },
        {
          "name": "contactId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DialerContact"
        }
      ],
      "return": "DialerContact"
    },
    "PUT /api/v2/outbound/contactlistfilters/{contactListFilterId}": {
      "functionName": "PutOutboundContactlistfilter",
      "signature": "PutOutboundContactlistfilter(contactListFilterId, body)",
      "parameters": [
        {
          "name": "contactListFilterId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ContactListFilter"
        }
      ],
      "return": "ContactListFilter"
    },
    "PUT /api/v2/outbound/dnclists/{dncListId}": {
      "functionName": "PutOutboundDnclist",
      "signature": "PutOutboundDnclist(dncListId, body)",
      "parameters": [
        {
          "name": "dncListId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DncList"
        }
      ],
      "return": "DncList"
    },
    "PUT /api/v2/outbound/messagingcampaigns/{messagingCampaignId}": {
      "functionName": "PutOutboundMessagingcampaign",
      "signature": "PutOutboundMessagingcampaign(messagingCampaignId, body)",
      "parameters": [
        {
          "name": "messagingCampaignId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "MessagingCampaign"
        }
      ],
      "return": "MessagingCampaign"
    },
    "PUT /api/v2/outbound/rulesets/{ruleSetId}": {
      "functionName": "PutOutboundRuleset",
      "signature": "PutOutboundRuleset(ruleSetId, body)",
      "parameters": [
        {
          "name": "ruleSetId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "RuleSet"
        }
      ],
      "return": "RuleSet"
    },
    "PUT /api/v2/outbound/schedules/campaigns/{campaignId}": {
      "functionName": "PutOutboundSchedulesCampaign",
      "signature": "PutOutboundSchedulesCampaign(campaignId, body)",
      "parameters": [
        {
          "name": "campaignId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CampaignSchedule"
        }
      ],
      "return": "CampaignSchedule"
    },
    "PUT /api/v2/outbound/schedules/sequences/{sequenceId}": {
      "functionName": "PutOutboundSchedulesSequence",
      "signature": "PutOutboundSchedulesSequence(sequenceId, body)",
      "parameters": [
        {
          "name": "sequenceId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "SequenceSchedule"
        }
      ],
      "return": "SequenceSchedule"
    },
    "PUT /api/v2/outbound/sequences/{sequenceId}": {
      "functionName": "PutOutboundSequence",
      "signature": "PutOutboundSequence(sequenceId, body)",
      "parameters": [
        {
          "name": "sequenceId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CampaignSequence"
        }
      ],
      "return": "CampaignSequence"
    },
    "PUT /api/v2/outbound/wrapupcodemappings": {
      "functionName": "PutOutboundWrapupcodemappings",
      "signature": "PutOutboundWrapupcodemappings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "WrapUpCodeMapping"
        }
      ],
      "return": "WrapUpCodeMapping"
    }
  },
  "presence": {
    "DELETE /api/v2/presencedefinitions/{presenceId}": {
      "functionName": "DeletePresencedefinition",
      "signature": "DeletePresencedefinition(presenceId)",
      "parameters": [
        {
          "name": "presenceId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/presencedefinitions/{presenceId}": {
      "functionName": "GetPresencedefinition",
      "signature": "GetPresencedefinition(presenceId, localeCode)",
      "parameters": [
        {
          "name": "presenceId",
          "type": "string"
        },
        {
          "name": "localeCode",
          "type": "string"
        }
      ],
      "return": "OrganizationPresence"
    },
    "GET /api/v2/presencedefinitions": {
      "functionName": "GetPresencedefinitions",
      "signature": "GetPresencedefinitions(pageNumber, pageSize, deleted, localeCode)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "deleted",
          "type": "string"
        },
        {
          "name": "localeCode",
          "type": "string"
        }
      ],
      "return": "OrganizationPresenceEntityListing"
    },
    "GET /api/v2/systempresences": {
      "functionName": "GetSystempresences",
      "signature": "GetSystempresences()",
      "return": "List&lt;SystemPresence&gt;"
    },
    "GET /api/v2/users/{userId}/presences/{sourceId}": {
      "functionName": "GetUserPresence",
      "signature": "GetUserPresence(userId, sourceId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "sourceId",
          "type": "string"
        }
      ],
      "return": "UserPresence"
    },
    "GET /api/v2/users/{userId}/presences/microsoftteams": {
      "functionName": "GetUserPresencesMicrosoftteams",
      "signature": "GetUserPresencesMicrosoftteams(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "PresenceExpand"
    },
    "GET /api/v2/users/{userId}/presences/purecloud": {
      "functionName": "GetUserPresencesPurecloud",
      "signature": "GetUserPresencesPurecloud(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "UserPresence"
    },
    "GET /api/v2/users/{userId}/presences/zoomphone": {
      "functionName": "GetUserPresencesZoomphone",
      "signature": "GetUserPresencesZoomphone(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "PresenceExpand"
    },
    "PATCH /api/v2/users/{userId}/presences/{sourceId}": {
      "functionName": "PatchUserPresence",
      "signature": "PatchUserPresence(userId, sourceId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "sourceId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UserPresence"
        }
      ],
      "return": "UserPresence"
    },
    "PATCH /api/v2/users/{userId}/presences/purecloud": {
      "functionName": "PatchUserPresencesPurecloud",
      "signature": "PatchUserPresencesPurecloud(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UserPresence"
        }
      ],
      "return": "UserPresence"
    },
    "POST /api/v2/presencedefinitions": {
      "functionName": "PostPresencedefinitions",
      "signature": "PostPresencedefinitions(body)",
      "parameters": [
        {
          "name": "body",
          "type": "OrganizationPresence"
        }
      ],
      "return": "OrganizationPresence"
    },
    "PUT /api/v2/presencedefinitions/{presenceId}": {
      "functionName": "PutPresencedefinition",
      "signature": "PutPresencedefinition(presenceId, body)",
      "parameters": [
        {
          "name": "presenceId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "OrganizationPresence"
        }
      ],
      "return": "OrganizationPresence"
    },
    "PUT /api/v2/users/presences/bulk": {
      "functionName": "PutUsersPresencesBulk",
      "signature": "PutUsersPresencesBulk(body)",
      "parameters": [
        {
          "name": "body",
          "type": "List&lt;UserPresence&gt;"
        }
      ],
      "return": "List&lt;UserPresence&gt;"
    }
  },
  "quality": {
    "DELETE /api/v2/quality/calibrations/{calibrationId}": {
      "functionName": "DeleteQualityCalibration",
      "signature": "DeleteQualityCalibration(calibrationId, calibratorId)",
      "parameters": [
        {
          "name": "calibrationId",
          "type": "string"
        },
        {
          "name": "calibratorId",
          "type": "string"
        }
      ],
      "return": "Calibration"
    },
    "DELETE /api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}": {
      "functionName": "DeleteQualityConversationEvaluation",
      "signature": "DeleteQualityConversationEvaluation(conversationId, evaluationId, expand)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "evaluationId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "Evaluation"
    },
    "DELETE /api/v2/quality/forms/{formId}": {
      "functionName": "DeleteQualityForm",
      "signature": "DeleteQualityForm(formId)",
      "parameters": [
        {
          "name": "formId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/quality/forms/evaluations/{formId}": {
      "functionName": "DeleteQualityFormsEvaluation",
      "signature": "DeleteQualityFormsEvaluation(formId)",
      "parameters": [
        {
          "name": "formId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/quality/forms/surveys/{formId}": {
      "functionName": "DeleteQualityFormsSurvey",
      "signature": "DeleteQualityFormsSurvey(formId)",
      "parameters": [
        {
          "name": "formId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/quality/agents/activity": {
      "functionName": "GetQualityAgentsActivity",
      "signature": "GetQualityAgentsActivity(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, startTime, endTime, agentUserId, evaluatorUserId, name, group)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        },
        {
          "name": "startTime",
          "type": "DateTime?"
        },
        {
          "name": "endTime",
          "type": "DateTime?"
        },
        {
          "name": "agentUserId",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "evaluatorUserId",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "group",
          "type": "string"
        }
      ],
      "return": "AgentActivityEntityListing"
    },
    "GET /api/v2/quality/calibrations/{calibrationId}": {
      "functionName": "GetQualityCalibration",
      "signature": "GetQualityCalibration(calibrationId, calibratorId, conversationId)",
      "parameters": [
        {
          "name": "calibrationId",
          "type": "string"
        },
        {
          "name": "calibratorId",
          "type": "string"
        },
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "Calibration"
    },
    "GET /api/v2/quality/calibrations": {
      "functionName": "GetQualityCalibrations",
      "signature": "GetQualityCalibrations(calibratorId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage, conversationId, startTime, endTime)",
      "parameters": [
        {
          "name": "calibratorId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        },
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "startTime",
          "type": "DateTime?"
        },
        {
          "name": "endTime",
          "type": "DateTime?"
        }
      ],
      "return": "CalibrationEntityListing"
    },
    "GET /api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}": {
      "functionName": "GetQualityConversationEvaluation",
      "signature": "GetQualityConversationEvaluation(conversationId, evaluationId, expand)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "evaluationId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "Evaluation"
    },
    "GET /api/v2/quality/conversations/{conversationId}/surveys": {
      "functionName": "GetQualityConversationSurveys",
      "signature": "GetQualityConversationSurveys(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "List&lt;Survey&gt;"
    },
    "GET /api/v2/quality/conversations/audits/query/{transactionId}": {
      "functionName": "GetQualityConversationsAuditsQueryTransactionId",
      "signature": "GetQualityConversationsAuditsQueryTransactionId(transactionId)",
      "parameters": [
        {
          "name": "transactionId",
          "type": "string"
        }
      ],
      "return": "QualityAuditQueryExecutionStatusResponse"
    },
    "GET /api/v2/quality/conversations/audits/query/{transactionId}/results": {
      "functionName": "GetQualityConversationsAuditsQueryTransactionIdResults",
      "signature": "GetQualityConversationsAuditsQueryTransactionIdResults(transactionId, cursor, pageSize, expand)",
      "parameters": [
        {
          "name": "transactionId",
          "type": "string"
        },
        {
          "name": "cursor",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "QualityAuditQueryExecutionResultsResponse"
    },
    "GET /api/v2/quality/evaluations/query": {
      "functionName": "GetQualityEvaluationsQuery",
      "signature": "GetQualityEvaluationsQuery(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, conversationId, agentUserId, evaluatorUserId, queueId, startTime, endTime, evaluationState, isReleased, agentHasRead, expandAnswerTotalScores, maximum, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        },
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "agentUserId",
          "type": "string"
        },
        {
          "name": "evaluatorUserId",
          "type": "string"
        },
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "startTime",
          "type": "string"
        },
        {
          "name": "endTime",
          "type": "string"
        },
        {
          "name": "evaluationState",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "isReleased",
          "type": "bool?"
        },
        {
          "name": "agentHasRead",
          "type": "bool?"
        },
        {
          "name": "expandAnswerTotalScores",
          "type": "bool?"
        },
        {
          "name": "maximum",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "EvaluationEntityListing"
    },
    "GET /api/v2/quality/evaluators/activity": {
      "functionName": "GetQualityEvaluatorsActivity",
      "signature": "GetQualityEvaluatorsActivity(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, startTime, endTime, name, permission, group)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        },
        {
          "name": "startTime",
          "type": "DateTime?"
        },
        {
          "name": "endTime",
          "type": "DateTime?"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "permission",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "group",
          "type": "string"
        }
      ],
      "return": "EvaluatorActivityEntityListing"
    },
    "GET /api/v2/quality/forms/{formId}": {
      "functionName": "GetQualityForm",
      "signature": "GetQualityForm(formId)",
      "parameters": [
        {
          "name": "formId",
          "type": "string"
        }
      ],
      "return": "EvaluationForm"
    },
    "GET /api/v2/quality/forms/{formId}/versions": {
      "functionName": "GetQualityFormVersions",
      "signature": "GetQualityFormVersions(formId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "formId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "EvaluationFormEntityListing"
    },
    "GET /api/v2/quality/forms": {
      "functionName": "GetQualityForms",
      "signature": "GetQualityForms(pageSize, pageNumber, sortBy, nextPage, previousPage, expand, name, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "EvaluationFormEntityListing"
    },
    "GET /api/v2/quality/forms/evaluations/{formId}": {
      "functionName": "GetQualityFormsEvaluation",
      "signature": "GetQualityFormsEvaluation(formId)",
      "parameters": [
        {
          "name": "formId",
          "type": "string"
        }
      ],
      "return": "EvaluationForm"
    },
    "GET /api/v2/quality/forms/evaluations/{formId}/versions": {
      "functionName": "GetQualityFormsEvaluationVersions",
      "signature": "GetQualityFormsEvaluationVersions(formId, pageSize, pageNumber, sortOrder)",
      "parameters": [
        {
          "name": "formId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "EvaluationFormEntityListing"
    },
    "GET /api/v2/quality/forms/evaluations": {
      "functionName": "GetQualityFormsEvaluations",
      "signature": "GetQualityFormsEvaluations(pageSize, pageNumber, sortBy, nextPage, previousPage, expand, name, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "EvaluationFormEntityListing"
    },
    "GET /api/v2/quality/forms/evaluations/bulk/contexts": {
      "functionName": "GetQualityFormsEvaluationsBulkContexts",
      "signature": "GetQualityFormsEvaluationsBulkContexts(contextId)",
      "parameters": [
        {
          "name": "contextId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "List&lt;EvaluationForm&gt;"
    },
    "GET /api/v2/quality/forms/surveys/{formId}": {
      "functionName": "GetQualityFormsSurvey",
      "signature": "GetQualityFormsSurvey(formId)",
      "parameters": [
        {
          "name": "formId",
          "type": "string"
        }
      ],
      "return": "SurveyForm"
    },
    "GET /api/v2/quality/forms/surveys/{formId}/versions": {
      "functionName": "GetQualityFormsSurveyVersions",
      "signature": "GetQualityFormsSurveyVersions(formId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "formId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "SurveyFormEntityListing"
    },
    "GET /api/v2/quality/forms/surveys": {
      "functionName": "GetQualityFormsSurveys",
      "signature": "GetQualityFormsSurveys(pageSize, pageNumber, sortBy, nextPage, previousPage, expand, name, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "SurveyFormEntityListing"
    },
    "GET /api/v2/quality/forms/surveys/bulk": {
      "functionName": "GetQualityFormsSurveysBulk",
      "signature": "GetQualityFormsSurveysBulk(id)",
      "parameters": [
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "SurveyFormEntityListing"
    },
    "GET /api/v2/quality/forms/surveys/bulk/contexts": {
      "functionName": "GetQualityFormsSurveysBulkContexts",
      "signature": "GetQualityFormsSurveysBulkContexts(contextId, published)",
      "parameters": [
        {
          "name": "contextId",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "published",
          "type": "bool?"
        }
      ],
      "return": "List&lt;SurveyForm&gt;"
    },
    "GET /api/v2/quality/publishedforms/{formId}": {
      "functionName": "GetQualityPublishedform",
      "signature": "GetQualityPublishedform(formId)",
      "parameters": [
        {
          "name": "formId",
          "type": "string"
        }
      ],
      "return": "EvaluationForm"
    },
    "GET /api/v2/quality/publishedforms": {
      "functionName": "GetQualityPublishedforms",
      "signature": "GetQualityPublishedforms(pageSize, pageNumber, name, onlyLatestPerContext)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "onlyLatestPerContext",
          "type": "bool?"
        }
      ],
      "return": "EvaluationFormEntityListing"
    },
    "GET /api/v2/quality/publishedforms/evaluations/{formId}": {
      "functionName": "GetQualityPublishedformsEvaluation",
      "signature": "GetQualityPublishedformsEvaluation(formId)",
      "parameters": [
        {
          "name": "formId",
          "type": "string"
        }
      ],
      "return": "EvaluationForm"
    },
    "GET /api/v2/quality/publishedforms/evaluations": {
      "functionName": "GetQualityPublishedformsEvaluations",
      "signature": "GetQualityPublishedformsEvaluations(pageSize, pageNumber, name, onlyLatestPerContext)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "onlyLatestPerContext",
          "type": "bool?"
        }
      ],
      "return": "EvaluationFormEntityListing"
    },
    "GET /api/v2/quality/publishedforms/surveys/{formId}": {
      "functionName": "GetQualityPublishedformsSurvey",
      "signature": "GetQualityPublishedformsSurvey(formId)",
      "parameters": [
        {
          "name": "formId",
          "type": "string"
        }
      ],
      "return": "SurveyForm"
    },
    "GET /api/v2/quality/publishedforms/surveys": {
      "functionName": "GetQualityPublishedformsSurveys",
      "signature": "GetQualityPublishedformsSurveys(pageSize, pageNumber, name, onlyLatestEnabledPerContext)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "onlyLatestEnabledPerContext",
          "type": "bool?"
        }
      ],
      "return": "SurveyFormEntityListing"
    },
    "GET /api/v2/quality/surveys/{surveyId}": {
      "functionName": "GetQualitySurvey",
      "signature": "GetQualitySurvey(surveyId)",
      "parameters": [
        {
          "name": "surveyId",
          "type": "string"
        }
      ],
      "return": "Survey"
    },
    "GET /api/v2/quality/surveys/scorable": {
      "functionName": "GetQualitySurveysScorable",
      "signature": "GetQualitySurveysScorable(customerSurveyUrl)",
      "parameters": [
        {
          "name": "customerSurveyUrl",
          "type": "string"
        }
      ],
      "return": "ScorableSurvey"
    },
    "PATCH /api/v2/quality/forms/surveys/{formId}": {
      "functionName": "PatchQualityFormsSurvey",
      "signature": "PatchQualityFormsSurvey(formId, body)",
      "parameters": [
        {
          "name": "formId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "SurveyForm"
        }
      ],
      "return": "SurveyForm"
    },
    "POST /api/v2/analytics/evaluations/aggregates/query": {
      "functionName": "PostAnalyticsEvaluationsAggregatesQuery",
      "signature": "PostAnalyticsEvaluationsAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "EvaluationAggregationQuery"
        }
      ],
      "return": "EvaluationAggregateQueryResponse"
    },
    "POST /api/v2/analytics/surveys/aggregates/query": {
      "functionName": "PostAnalyticsSurveysAggregatesQuery",
      "signature": "PostAnalyticsSurveysAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SurveyAggregationQuery"
        }
      ],
      "return": "SurveyAggregateQueryResponse"
    },
    "POST /api/v2/quality/calibrations": {
      "functionName": "PostQualityCalibrations",
      "signature": "PostQualityCalibrations(body, expand)",
      "parameters": [
        {
          "name": "body",
          "type": "CalibrationCreate"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "Calibration"
    },
    "POST /api/v2/quality/conversations/{conversationId}/evaluations": {
      "functionName": "PostQualityConversationEvaluations",
      "signature": "PostQualityConversationEvaluations(conversationId, body, expand)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Evaluation"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "Evaluation"
    },
    "POST /api/v2/quality/conversations/audits/query": {
      "functionName": "PostQualityConversationsAuditsQuery",
      "signature": "PostQualityConversationsAuditsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "QMAuditQueryRequest"
        }
      ],
      "return": "QualityAuditQueryExecutionStatusResponse"
    },
    "POST /api/v2/quality/evaluations/aggregates/query/me": {
      "functionName": "PostQualityEvaluationsAggregatesQueryMe",
      "signature": "PostQualityEvaluationsAggregatesQueryMe(body)",
      "parameters": [
        {
          "name": "body",
          "type": "EvaluationAggregationQueryMe"
        }
      ],
      "return": "EvaluationAggregateQueryResponse"
    },
    "POST /api/v2/quality/evaluations/scoring": {
      "functionName": "PostQualityEvaluationsScoring",
      "signature": "PostQualityEvaluationsScoring(body)",
      "parameters": [
        {
          "name": "body",
          "type": "EvaluationFormAndScoringSet"
        }
      ],
      "return": "EvaluationScoringSet"
    },
    "POST /api/v2/quality/forms": {
      "functionName": "PostQualityForms",
      "signature": "PostQualityForms(body)",
      "parameters": [
        {
          "name": "body",
          "type": "EvaluationForm"
        }
      ],
      "return": "EvaluationForm"
    },
    "POST /api/v2/quality/forms/evaluations": {
      "functionName": "PostQualityFormsEvaluations",
      "signature": "PostQualityFormsEvaluations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "EvaluationForm"
        }
      ],
      "return": "EvaluationForm"
    },
    "POST /api/v2/quality/forms/surveys": {
      "functionName": "PostQualityFormsSurveys",
      "signature": "PostQualityFormsSurveys(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SurveyForm"
        }
      ],
      "return": "SurveyForm"
    },
    "POST /api/v2/quality/publishedforms": {
      "functionName": "PostQualityPublishedforms",
      "signature": "PostQualityPublishedforms(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PublishForm"
        }
      ],
      "return": "EvaluationForm"
    },
    "POST /api/v2/quality/publishedforms/evaluations": {
      "functionName": "PostQualityPublishedformsEvaluations",
      "signature": "PostQualityPublishedformsEvaluations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PublishForm"
        }
      ],
      "return": "EvaluationForm"
    },
    "POST /api/v2/quality/publishedforms/surveys": {
      "functionName": "PostQualityPublishedformsSurveys",
      "signature": "PostQualityPublishedformsSurveys(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PublishForm"
        }
      ],
      "return": "SurveyForm"
    },
    "POST /api/v2/quality/surveys/scoring": {
      "functionName": "PostQualitySurveysScoring",
      "signature": "PostQualitySurveysScoring(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SurveyFormAndScoringSet"
        }
      ],
      "return": "SurveyScoringSet"
    },
    "PUT /api/v2/quality/calibrations/{calibrationId}": {
      "functionName": "PutQualityCalibration",
      "signature": "PutQualityCalibration(calibrationId, body)",
      "parameters": [
        {
          "name": "calibrationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Calibration"
        }
      ],
      "return": "Calibration"
    },
    "PUT /api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}": {
      "functionName": "PutQualityConversationEvaluation",
      "signature": "PutQualityConversationEvaluation(conversationId, evaluationId, body, expand)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "evaluationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Evaluation"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "Evaluation"
    },
    "PUT /api/v2/quality/forms/{formId}": {
      "functionName": "PutQualityForm",
      "signature": "PutQualityForm(formId, body)",
      "parameters": [
        {
          "name": "formId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "EvaluationForm"
        }
      ],
      "return": "EvaluationForm"
    },
    "PUT /api/v2/quality/forms/evaluations/{formId}": {
      "functionName": "PutQualityFormsEvaluation",
      "signature": "PutQualityFormsEvaluation(formId, body)",
      "parameters": [
        {
          "name": "formId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "EvaluationForm"
        }
      ],
      "return": "EvaluationForm"
    },
    "PUT /api/v2/quality/forms/surveys/{formId}": {
      "functionName": "PutQualityFormsSurvey",
      "signature": "PutQualityFormsSurvey(formId, body)",
      "parameters": [
        {
          "name": "formId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "SurveyForm"
        }
      ],
      "return": "SurveyForm"
    },
    "PUT /api/v2/quality/surveys/scorable": {
      "functionName": "PutQualitySurveysScorable",
      "signature": "PutQualitySurveysScorable(body, customerSurveyUrl)",
      "parameters": [
        {
          "name": "body",
          "type": "ScorableSurvey"
        },
        {
          "name": "customerSurveyUrl",
          "type": "string"
        }
      ],
      "return": "ScorableSurvey"
    }
  },
  "recording": {
    "DELETE /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}": {
      "functionName": "DeleteConversationRecordingAnnotation",
      "signature": "DeleteConversationRecordingAnnotation(conversationId, recordingId, annotationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "recordingId",
          "type": "string"
        },
        {
          "name": "annotationId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/orphanrecordings/{orphanId}": {
      "functionName": "DeleteOrphanrecording",
      "signature": "DeleteOrphanrecording(orphanId)",
      "parameters": [
        {
          "name": "orphanId",
          "type": "string"
        }
      ],
      "return": "OrphanRecording"
    },
    "DELETE /api/v2/recording/crossplatform/mediaretentionpolicies": {
      "functionName": "DeleteRecordingCrossplatformMediaretentionpolicies",
      "signature": "DeleteRecordingCrossplatformMediaretentionpolicies(ids)",
      "parameters": [
        {
          "name": "ids",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
      "functionName": "DeleteRecordingCrossplatformMediaretentionpolicy",
      "signature": "DeleteRecordingCrossplatformMediaretentionpolicy(policyId)",
      "parameters": [
        {
          "name": "policyId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/recording/jobs/{jobId}": {
      "functionName": "DeleteRecordingJob",
      "signature": "DeleteRecordingJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/recording/mediaretentionpolicies": {
      "functionName": "DeleteRecordingMediaretentionpolicies",
      "signature": "DeleteRecordingMediaretentionpolicies(ids)",
      "parameters": [
        {
          "name": "ids",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/recording/mediaretentionpolicies/{policyId}": {
      "functionName": "DeleteRecordingMediaretentionpolicy",
      "signature": "DeleteRecordingMediaretentionpolicy(policyId)",
      "parameters": [
        {
          "name": "policyId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/conversations/{conversationId}/recordings/{recordingId}": {
      "functionName": "GetConversationRecording",
      "signature": "GetConversationRecording(conversationId, recordingId, formatId, emailFormatId, chatFormatId, messageFormatId, download, fileName, locale, mediaFormats)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "recordingId",
          "type": "string"
        },
        {
          "name": "formatId",
          "type": "string"
        },
        {
          "name": "emailFormatId",
          "type": "string"
        },
        {
          "name": "chatFormatId",
          "type": "string"
        },
        {
          "name": "messageFormatId",
          "type": "string"
        },
        {
          "name": "download",
          "type": "bool?"
        },
        {
          "name": "fileName",
          "type": "string"
        },
        {
          "name": "locale",
          "type": "string"
        },
        {
          "name": "mediaFormats",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "Recording"
    },
    "GET /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}": {
      "functionName": "GetConversationRecordingAnnotation",
      "signature": "GetConversationRecordingAnnotation(conversationId, recordingId, annotationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "recordingId",
          "type": "string"
        },
        {
          "name": "annotationId",
          "type": "string"
        }
      ],
      "return": "Annotation"
    },
    "GET /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations": {
      "functionName": "GetConversationRecordingAnnotations",
      "signature": "GetConversationRecordingAnnotations(conversationId, recordingId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "recordingId",
          "type": "string"
        }
      ],
      "return": "List&lt;Annotation&gt;"
    },
    "GET /api/v2/conversations/{conversationId}/recordingmetadata": {
      "functionName": "GetConversationRecordingmetadata",
      "signature": "GetConversationRecordingmetadata(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "List&lt;RecordingMetadata&gt;"
    },
    "GET /api/v2/conversations/{conversationId}/recordingmetadata/{recordingId}": {
      "functionName": "GetConversationRecordingmetadataRecordingId",
      "signature": "GetConversationRecordingmetadataRecordingId(conversationId, recordingId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "recordingId",
          "type": "string"
        }
      ],
      "return": "RecordingMetadata"
    },
    "GET /api/v2/conversations/{conversationId}/recordings": {
      "functionName": "GetConversationRecordings",
      "signature": "GetConversationRecordings(conversationId, maxWaitMs, formatId, mediaFormats)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "maxWaitMs",
          "type": "int?"
        },
        {
          "name": "formatId",
          "type": "string"
        },
        {
          "name": "mediaFormats",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "List&lt;Recording&gt;"
    },
    "GET /api/v2/orphanrecordings/{orphanId}": {
      "functionName": "GetOrphanrecording",
      "signature": "GetOrphanrecording(orphanId)",
      "parameters": [
        {
          "name": "orphanId",
          "type": "string"
        }
      ],
      "return": "OrphanRecording"
    },
    "GET /api/v2/orphanrecordings/{orphanId}/media": {
      "functionName": "GetOrphanrecordingMedia",
      "signature": "GetOrphanrecordingMedia(orphanId, formatId, emailFormatId, chatFormatId, messageFormatId, download, fileName, locale, mediaFormats)",
      "parameters": [
        {
          "name": "orphanId",
          "type": "string"
        },
        {
          "name": "formatId",
          "type": "string"
        },
        {
          "name": "emailFormatId",
          "type": "string"
        },
        {
          "name": "chatFormatId",
          "type": "string"
        },
        {
          "name": "messageFormatId",
          "type": "string"
        },
        {
          "name": "download",
          "type": "bool?"
        },
        {
          "name": "fileName",
          "type": "string"
        },
        {
          "name": "locale",
          "type": "string"
        },
        {
          "name": "mediaFormats",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "Recording"
    },
    "GET /api/v2/orphanrecordings": {
      "functionName": "GetOrphanrecordings",
      "signature": "GetOrphanrecordings(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, hasConversation, media)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        },
        {
          "name": "hasConversation",
          "type": "bool?"
        },
        {
          "name": "media",
          "type": "string"
        }
      ],
      "return": "OrphanRecordingListing"
    },
    "GET /api/v2/recording/batchrequests/{jobId}": {
      "functionName": "GetRecordingBatchrequest",
      "signature": "GetRecordingBatchrequest(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        }
      ],
      "return": "BatchDownloadJobStatusResult"
    },
    "GET /api/v2/recording/crossplatform/mediaretentionpolicies": {
      "functionName": "GetRecordingCrossplatformMediaretentionpolicies",
      "signature": "GetRecordingCrossplatformMediaretentionpolicies(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, enabled, summary, hasErrors)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "enabled",
          "type": "bool?"
        },
        {
          "name": "summary",
          "type": "bool?"
        },
        {
          "name": "hasErrors",
          "type": "bool?"
        }
      ],
      "return": "PolicyEntityListing"
    },
    "GET /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
      "functionName": "GetRecordingCrossplatformMediaretentionpolicy",
      "signature": "GetRecordingCrossplatformMediaretentionpolicy(policyId)",
      "parameters": [
        {
          "name": "policyId",
          "type": "string"
        }
      ],
      "return": "CrossPlatformPolicy"
    },
    "GET /api/v2/recording/jobs/{jobId}": {
      "functionName": "GetRecordingJob",
      "signature": "GetRecordingJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        }
      ],
      "return": "RecordingJob"
    },
    "GET /api/v2/recording/jobs/{jobId}/failedrecordings": {
      "functionName": "GetRecordingJobFailedrecordings",
      "signature": "GetRecordingJobFailedrecordings(jobId, pageSize, pageNumber, includeTotal, cursor)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "includeTotal",
          "type": "bool?"
        },
        {
          "name": "cursor",
          "type": "string"
        }
      ],
      "return": "FailedRecordingEntityListing"
    },
    "GET /api/v2/recording/jobs": {
      "functionName": "GetRecordingJobs",
      "signature": "GetRecordingJobs(pageSize, pageNumber, sortBy, state, showOnlyMyJobs, jobType, includeTotal, cursor)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "state",
          "type": "string"
        },
        {
          "name": "showOnlyMyJobs",
          "type": "bool?"
        },
        {
          "name": "jobType",
          "type": "string"
        },
        {
          "name": "includeTotal",
          "type": "bool?"
        },
        {
          "name": "cursor",
          "type": "string"
        }
      ],
      "return": "RecordingJobEntityListing"
    },
    "GET /api/v2/recording/localkeys/settings/{settingsId}": {
      "functionName": "GetRecordingLocalkeysSetting",
      "signature": "GetRecordingLocalkeysSetting(settingsId)",
      "parameters": [
        {
          "name": "settingsId",
          "type": "string"
        }
      ],
      "return": "LocalEncryptionConfiguration"
    },
    "GET /api/v2/recording/localkeys/settings": {
      "functionName": "GetRecordingLocalkeysSettings",
      "signature": "GetRecordingLocalkeysSettings()",
      "return": "LocalEncryptionConfigurationListing"
    },
    "GET /api/v2/recording/mediaretentionpolicies": {
      "functionName": "GetRecordingMediaretentionpolicies",
      "signature": "GetRecordingMediaretentionpolicies(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, enabled, summary, hasErrors)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "previousPage",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "enabled",
          "type": "bool?"
        },
        {
          "name": "summary",
          "type": "bool?"
        },
        {
          "name": "hasErrors",
          "type": "bool?"
        }
      ],
      "return": "PolicyEntityListing"
    },
    "GET /api/v2/recording/mediaretentionpolicies/{policyId}": {
      "functionName": "GetRecordingMediaretentionpolicy",
      "signature": "GetRecordingMediaretentionpolicy(policyId)",
      "parameters": [
        {
          "name": "policyId",
          "type": "string"
        }
      ],
      "return": "Policy"
    },
    "GET /api/v2/recording/recordingkeys": {
      "functionName": "GetRecordingRecordingkeys",
      "signature": "GetRecordingRecordingkeys(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "EncryptionKeyEntityListing"
    },
    "GET /api/v2/recording/recordingkeys/rotationschedule": {
      "functionName": "GetRecordingRecordingkeysRotationschedule",
      "signature": "GetRecordingRecordingkeysRotationschedule()",
      "return": "KeyRotationSchedule"
    },
    "GET /api/v2/recording/settings": {
      "functionName": "GetRecordingSettings",
      "signature": "GetRecordingSettings(createDefault)",
      "parameters": [
        {
          "name": "createDefault",
          "type": "bool?"
        }
      ],
      "return": "RecordingSettings"
    },
    "GET /api/v2/recordings/screensessions": {
      "functionName": "GetRecordingsScreensessions",
      "signature": "GetRecordingsScreensessions(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "ScreenRecordingSessionListing"
    },
    "PATCH /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
      "functionName": "PatchRecordingCrossplatformMediaretentionpolicy",
      "signature": "PatchRecordingCrossplatformMediaretentionpolicy(policyId, body)",
      "parameters": [
        {
          "name": "policyId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CrossPlatformPolicyUpdate"
        }
      ],
      "return": "CrossPlatformPolicy"
    },
    "PATCH /api/v2/recording/mediaretentionpolicies/{policyId}": {
      "functionName": "PatchRecordingMediaretentionpolicy",
      "signature": "PatchRecordingMediaretentionpolicy(policyId, body)",
      "parameters": [
        {
          "name": "policyId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "PolicyUpdate"
        }
      ],
      "return": "Policy"
    },
    "PATCH /api/v2/recordings/screensessions/{recordingSessionId}": {
      "functionName": "PatchRecordingsScreensession",
      "signature": "PatchRecordingsScreensession(recordingSessionId, body)",
      "parameters": [
        {
          "name": "recordingSessionId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ScreenRecordingSessionRequest"
        }
      ]
    },
    "POST /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations": {
      "functionName": "PostConversationRecordingAnnotations",
      "signature": "PostConversationRecordingAnnotations(conversationId, recordingId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "recordingId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Annotation"
        }
      ],
      "return": "Annotation"
    },
    "POST /api/v2/recording/batchrequests": {
      "functionName": "PostRecordingBatchrequests",
      "signature": "PostRecordingBatchrequests(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BatchDownloadJobSubmission"
        }
      ],
      "return": "BatchDownloadJobSubmissionResult"
    },
    "POST /api/v2/recording/crossplatform/mediaretentionpolicies": {
      "functionName": "PostRecordingCrossplatformMediaretentionpolicies",
      "signature": "PostRecordingCrossplatformMediaretentionpolicies(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CrossPlatformPolicyCreate"
        }
      ],
      "return": "CrossPlatformPolicy"
    },
    "POST /api/v2/recording/jobs": {
      "functionName": "PostRecordingJobs",
      "signature": "PostRecordingJobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "RecordingJobsQuery"
        }
      ],
      "return": "RecordingJob"
    },
    "POST /api/v2/recording/localkeys": {
      "functionName": "PostRecordingLocalkeys",
      "signature": "PostRecordingLocalkeys(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LocalEncryptionKeyRequest"
        }
      ],
      "return": "EncryptionKey"
    },
    "POST /api/v2/recording/localkeys/settings": {
      "functionName": "PostRecordingLocalkeysSettings",
      "signature": "PostRecordingLocalkeysSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LocalEncryptionConfiguration"
        }
      ],
      "return": "LocalEncryptionConfiguration"
    },
    "POST /api/v2/recording/mediaretentionpolicies": {
      "functionName": "PostRecordingMediaretentionpolicies",
      "signature": "PostRecordingMediaretentionpolicies(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PolicyCreate"
        }
      ],
      "return": "Policy"
    },
    "POST /api/v2/recording/recordingkeys": {
      "functionName": "PostRecordingRecordingkeys",
      "signature": "PostRecordingRecordingkeys()",
      "return": "EncryptionKey"
    },
    "POST /api/v2/recordings/deletionprotection": {
      "functionName": "PostRecordingsDeletionprotection",
      "signature": "PostRecordingsDeletionprotection(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ConversationDeletionProtectionQuery"
        }
      ],
      "return": "List&lt;AddressableEntityRef&gt;"
    },
    "POST /api/v2/recordings/screensessions/acknowledge": {
      "functionName": "PostRecordingsScreensessionsAcknowledge",
      "signature": "PostRecordingsScreensessionsAcknowledge(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AcknowledgeScreenRecordingRequest"
        }
      ]
    },
    "POST /api/v2/recordings/screensessions/metadata": {
      "functionName": "PostRecordingsScreensessionsMetadata",
      "signature": "PostRecordingsScreensessionsMetadata(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ScreenRecordingMetaDataRequest"
        }
      ]
    },
    "PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}": {
      "functionName": "PutConversationRecording",
      "signature": "PutConversationRecording(conversationId, recordingId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "recordingId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Recording"
        }
      ],
      "return": "Recording"
    },
    "PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}": {
      "functionName": "PutConversationRecordingAnnotation",
      "signature": "PutConversationRecordingAnnotation(conversationId, recordingId, annotationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "recordingId",
          "type": "string"
        },
        {
          "name": "annotationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Annotation"
        }
      ],
      "return": "Annotation"
    },
    "PUT /api/v2/orphanrecordings/{orphanId}": {
      "functionName": "PutOrphanrecording",
      "signature": "PutOrphanrecording(orphanId, body)",
      "parameters": [
        {
          "name": "orphanId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "OrphanUpdateRequest"
        }
      ],
      "return": "Recording"
    },
    "PUT /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
      "functionName": "PutRecordingCrossplatformMediaretentionpolicy",
      "signature": "PutRecordingCrossplatformMediaretentionpolicy(policyId, body)",
      "parameters": [
        {
          "name": "policyId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CrossPlatformPolicy"
        }
      ],
      "return": "CrossPlatformPolicy"
    },
    "PUT /api/v2/recording/jobs/{jobId}": {
      "functionName": "PutRecordingJob",
      "signature": "PutRecordingJob(jobId, body)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ExecuteRecordingJobsQuery"
        }
      ],
      "return": "RecordingJob"
    },
    "PUT /api/v2/recording/localkeys/settings/{settingsId}": {
      "functionName": "PutRecordingLocalkeysSetting",
      "signature": "PutRecordingLocalkeysSetting(settingsId, body)",
      "parameters": [
        {
          "name": "settingsId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "LocalEncryptionConfiguration"
        }
      ],
      "return": "LocalEncryptionConfiguration"
    },
    "PUT /api/v2/recording/mediaretentionpolicies/{policyId}": {
      "functionName": "PutRecordingMediaretentionpolicy",
      "signature": "PutRecordingMediaretentionpolicy(policyId, body)",
      "parameters": [
        {
          "name": "policyId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Policy"
        }
      ],
      "return": "Policy"
    },
    "PUT /api/v2/recording/recordingkeys/rotationschedule": {
      "functionName": "PutRecordingRecordingkeysRotationschedule",
      "signature": "PutRecordingRecordingkeysRotationschedule(body)",
      "parameters": [
        {
          "name": "body",
          "type": "KeyRotationSchedule"
        }
      ],
      "return": "KeyRotationSchedule"
    },
    "PUT /api/v2/recording/settings": {
      "functionName": "PutRecordingSettings",
      "signature": "PutRecordingSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "RecordingSettings"
        }
      ],
      "return": "RecordingSettings"
    },
    "PUT /api/v2/recordings/deletionprotection": {
      "functionName": "PutRecordingsDeletionprotection",
      "signature": "PutRecordingsDeletionprotection(protect, body)",
      "parameters": [
        {
          "name": "protect",
          "type": "bool?"
        },
        {
          "name": "body",
          "type": "ConversationDeletionProtectionQuery"
        }
      ]
    }
  },
  "responsemanagement": {
    "DELETE /api/v2/responsemanagement/libraries/{libraryId}": {
      "functionName": "DeleteResponsemanagementLibrary",
      "signature": "DeleteResponsemanagementLibrary(libraryId)",
      "parameters": [
        {
          "name": "libraryId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/responsemanagement/responses/{responseId}": {
      "functionName": "DeleteResponsemanagementResponse",
      "signature": "DeleteResponsemanagementResponse(responseId)",
      "parameters": [
        {
          "name": "responseId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/responsemanagement/libraries": {
      "functionName": "GetResponsemanagementLibraries",
      "signature": "GetResponsemanagementLibraries(pageNumber, pageSize, messagingTemplateFilter)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "messagingTemplateFilter",
          "type": "string"
        }
      ],
      "return": "LibraryEntityListing"
    },
    "GET /api/v2/responsemanagement/libraries/{libraryId}": {
      "functionName": "GetResponsemanagementLibrary",
      "signature": "GetResponsemanagementLibrary(libraryId)",
      "parameters": [
        {
          "name": "libraryId",
          "type": "string"
        }
      ],
      "return": "Library"
    },
    "GET /api/v2/responsemanagement/responses/{responseId}": {
      "functionName": "GetResponsemanagementResponse",
      "signature": "GetResponsemanagementResponse(responseId, expand)",
      "parameters": [
        {
          "name": "responseId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "Response"
    },
    "GET /api/v2/responsemanagement/responses": {
      "functionName": "GetResponsemanagementResponses",
      "signature": "GetResponsemanagementResponses(libraryId, pageNumber, pageSize, expand)",
      "parameters": [
        {
          "name": "libraryId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "ResponseEntityListing"
    },
    "POST /api/v2/responsemanagement/libraries": {
      "functionName": "PostResponsemanagementLibraries",
      "signature": "PostResponsemanagementLibraries(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Library"
        }
      ],
      "return": "Library"
    },
    "POST /api/v2/responsemanagement/responses": {
      "functionName": "PostResponsemanagementResponses",
      "signature": "PostResponsemanagementResponses(body, expand)",
      "parameters": [
        {
          "name": "body",
          "type": "Response"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "Response"
    },
    "POST /api/v2/responsemanagement/responses/query": {
      "functionName": "PostResponsemanagementResponsesQuery",
      "signature": "PostResponsemanagementResponsesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ResponseQueryRequest"
        }
      ],
      "return": "ResponseQueryResults"
    },
    "PUT /api/v2/responsemanagement/libraries/{libraryId}": {
      "functionName": "PutResponsemanagementLibrary",
      "signature": "PutResponsemanagementLibrary(libraryId, body)",
      "parameters": [
        {
          "name": "libraryId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Library"
        }
      ],
      "return": "Library"
    },
    "PUT /api/v2/responsemanagement/responses/{responseId}": {
      "functionName": "PutResponsemanagementResponse",
      "signature": "PutResponsemanagementResponse(responseId, body, expand)",
      "parameters": [
        {
          "name": "responseId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Response"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "Response"
    }
  },
  "routing": {
    "DELETE /api/v2/routing/assessments/{assessmentId}": {
      "functionName": "DeleteRoutingAssessment",
      "signature": "DeleteRoutingAssessment(assessmentId)",
      "parameters": [
        {
          "name": "assessmentId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/routing/email/domains/{domainId}": {
      "functionName": "DeleteRoutingEmailDomain",
      "signature": "DeleteRoutingEmailDomain(domainId)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/routing/email/domains/{domainName}/routes/{routeId}": {
      "functionName": "DeleteRoutingEmailDomainRoute",
      "signature": "DeleteRoutingEmailDomainRoute(domainName, routeId)",
      "parameters": [
        {
          "name": "domainName",
          "type": "string"
        },
        {
          "name": "routeId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/routing/predictors/{predictorId}": {
      "functionName": "DeleteRoutingPredictor",
      "signature": "DeleteRoutingPredictor(predictorId)",
      "parameters": [
        {
          "name": "predictorId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/routing/queues/{queueId}": {
      "functionName": "DeleteRoutingQueue",
      "signature": "DeleteRoutingQueue(queueId, forceDelete)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "forceDelete",
          "type": "bool?"
        }
      ]
    },
    "DELETE /api/v2/routing/queues/{queueId}/members/{memberId}": {
      "functionName": "DeleteRoutingQueueMember",
      "signature": "DeleteRoutingQueueMember(queueId, memberId)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "memberId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/routing/queues/{queueId}/users/{memberId}": {
      "functionName": "DeleteRoutingQueueUser",
      "signature": "DeleteRoutingQueueUser(queueId, memberId)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "memberId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/routing/queues/{queueId}/wrapupcodes/{codeId}": {
      "functionName": "DeleteRoutingQueueWrapupcode",
      "signature": "DeleteRoutingQueueWrapupcode(queueId, codeId)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "codeId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/routing/settings": {
      "functionName": "DeleteRoutingSettings",
      "signature": "DeleteRoutingSettings()"
    },
    "DELETE /api/v2/routing/skills/{skillId}": {
      "functionName": "DeleteRoutingSkill",
      "signature": "DeleteRoutingSkill(skillId)",
      "parameters": [
        {
          "name": "skillId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/routing/sms/addresses/{addressId}": {
      "functionName": "DeleteRoutingSmsAddress",
      "signature": "DeleteRoutingSmsAddress(addressId)",
      "parameters": [
        {
          "name": "addressId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/routing/sms/phonenumbers/{addressId}": {
      "functionName": "DeleteRoutingSmsPhonenumber",
      "signature": "DeleteRoutingSmsPhonenumber(addressId, async)",
      "parameters": [
        {
          "name": "addressId",
          "type": "string"
        },
        {
          "name": "async",
          "type": "bool?"
        }
      ]
    },
    "DELETE /api/v2/routing/users/{userId}/utilization": {
      "functionName": "DeleteRoutingUserUtilization",
      "signature": "DeleteRoutingUserUtilization(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/routing/utilization": {
      "functionName": "DeleteRoutingUtilization",
      "signature": "DeleteRoutingUtilization()"
    },
    "DELETE /api/v2/routing/wrapupcodes/{codeId}": {
      "functionName": "DeleteRoutingWrapupcode",
      "signature": "DeleteRoutingWrapupcode(codeId)",
      "parameters": [
        {
          "name": "codeId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/users/{userId}/routinglanguages/{languageId}": {
      "functionName": "DeleteUserRoutinglanguage",
      "signature": "DeleteUserRoutinglanguage(userId, languageId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "languageId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/users/{userId}/routingskills/{skillId}": {
      "functionName": "DeleteUserRoutingskill",
      "signature": "DeleteUserRoutingskill(userId, skillId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "skillId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/routing/assessments/{assessmentId}": {
      "functionName": "GetRoutingAssessment",
      "signature": "GetRoutingAssessment(assessmentId)",
      "parameters": [
        {
          "name": "assessmentId",
          "type": "string"
        }
      ],
      "return": "BenefitAssessment"
    },
    "GET /api/v2/routing/assessments": {
      "functionName": "GetRoutingAssessments",
      "signature": "GetRoutingAssessments(before, after, limit, pageSize, queueId)",
      "parameters": [
        {
          "name": "before",
          "type": "string"
        },
        {
          "name": "after",
          "type": "string"
        },
        {
          "name": "limit",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "string"
        },
        {
          "name": "queueId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "AssessmentListing"
    },
    "GET /api/v2/routing/assessments/jobs/{jobId}": {
      "functionName": "GetRoutingAssessmentsJob",
      "signature": "GetRoutingAssessmentsJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        }
      ],
      "return": "BenefitAssessmentJob"
    },
    "GET /api/v2/routing/assessments/jobs": {
      "functionName": "GetRoutingAssessmentsJobs",
      "signature": "GetRoutingAssessmentsJobs(divisionId)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "AssessmentJobListing"
    },
    "GET /api/v2/routing/email/domains/{domainId}": {
      "functionName": "GetRoutingEmailDomain",
      "signature": "GetRoutingEmailDomain(domainId)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        }
      ],
      "return": "InboundDomain"
    },
    "GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}": {
      "functionName": "GetRoutingEmailDomainRoute",
      "signature": "GetRoutingEmailDomainRoute(domainName, routeId)",
      "parameters": [
        {
          "name": "domainName",
          "type": "string"
        },
        {
          "name": "routeId",
          "type": "string"
        }
      ],
      "return": "InboundRoute"
    },
    "GET /api/v2/routing/email/domains/{domainName}/routes": {
      "functionName": "GetRoutingEmailDomainRoutes",
      "signature": "GetRoutingEmailDomainRoutes(domainName, pageSize, pageNumber, pattern)",
      "parameters": [
        {
          "name": "domainName",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pattern",
          "type": "string"
        }
      ],
      "return": "InboundRouteEntityListing"
    },
    "GET /api/v2/routing/email/domains": {
      "functionName": "GetRoutingEmailDomains",
      "signature": "GetRoutingEmailDomains()",
      "return": "InboundDomainEntityListing"
    },
    "GET /api/v2/routing/email/setup": {
      "functionName": "GetRoutingEmailSetup",
      "signature": "GetRoutingEmailSetup()",
      "return": "EmailSetup"
    },
    "GET /api/v2/routing/languages": {
      "functionName": "GetRoutingLanguages",
      "signature": "GetRoutingLanguages(pageSize, pageNumber, sortOrder, name, id)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "LanguageEntityListing"
    },
    "GET /api/v2/routing/message/recipients/{recipientId}": {
      "functionName": "GetRoutingMessageRecipient",
      "signature": "GetRoutingMessageRecipient(recipientId)",
      "parameters": [
        {
          "name": "recipientId",
          "type": "string"
        }
      ],
      "return": "Recipient"
    },
    "GET /api/v2/routing/message/recipients": {
      "functionName": "GetRoutingMessageRecipients",
      "signature": "GetRoutingMessageRecipients(messengerType, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "messengerType",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "RecipientListing"
    },
    "GET /api/v2/routing/predictors/{predictorId}": {
      "functionName": "GetRoutingPredictor",
      "signature": "GetRoutingPredictor(predictorId)",
      "parameters": [
        {
          "name": "predictorId",
          "type": "string"
        }
      ],
      "return": "Predictor"
    },
    "GET /api/v2/routing/predictors": {
      "functionName": "GetRoutingPredictors",
      "signature": "GetRoutingPredictors(before, after, limit, pageSize, queueId)",
      "parameters": [
        {
          "name": "before",
          "type": "string"
        },
        {
          "name": "after",
          "type": "string"
        },
        {
          "name": "limit",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "string"
        },
        {
          "name": "queueId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "PredictorListing"
    },
    "GET /api/v2/routing/predictors/keyperformanceindicators": {
      "functionName": "GetRoutingPredictorsKeyperformanceindicators",
      "signature": "GetRoutingPredictorsKeyperformanceindicators()",
      "return": "List&lt;KeyPerformanceIndicator&gt;"
    },
    "GET /api/v2/routing/queues/{queueId}": {
      "functionName": "GetRoutingQueue",
      "signature": "GetRoutingQueue(queueId)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        }
      ],
      "return": "Queue"
    },
    "GET /api/v2/routing/queues/{queueId}/comparisonperiods/{comparisonPeriodId}": {
      "functionName": "GetRoutingQueueComparisonperiod",
      "signature": "GetRoutingQueueComparisonperiod(queueId, comparisonPeriodId)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "comparisonPeriodId",
          "type": "string"
        }
      ],
      "return": "ComparisonPeriod"
    },
    "GET /api/v2/routing/queues/{queueId}/comparisonperiods": {
      "functionName": "GetRoutingQueueComparisonperiods",
      "signature": "GetRoutingQueueComparisonperiods(queueId)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        }
      ],
      "return": "ComparisonPeriodListing"
    },
    "GET /api/v2/routing/queues/{queueId}/estimatedwaittime": {
      "functionName": "GetRoutingQueueEstimatedwaittime",
      "signature": "GetRoutingQueueEstimatedwaittime(queueId, conversationId)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "EstimatedWaitTimePredictions"
    },
    "GET /api/v2/routing/queues/{queueId}/mediatypes/{mediaType}/estimatedwaittime": {
      "functionName": "GetRoutingQueueMediatypeEstimatedwaittime",
      "signature": "GetRoutingQueueMediatypeEstimatedwaittime(queueId, mediaType)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "mediaType",
          "type": "string"
        }
      ],
      "return": "EstimatedWaitTimePredictions"
    },
    "GET /api/v2/routing/queues/{queueId}/members": {
      "functionName": "GetRoutingQueueMembers",
      "signature": "GetRoutingQueueMembers(queueId, pageNumber, pageSize, sortOrder, expand, name, profileSkills, skills, languages, routingStatus, presence, memberBy, joined)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "profileSkills",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "skills",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "languages",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "routingStatus",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "presence",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "memberBy",
          "type": "string"
        },
        {
          "name": "joined",
          "type": "bool?"
        }
      ],
      "return": "QueueMemberEntityListing"
    },
    "GET /api/v2/routing/queues/{queueId}/users": {
      "functionName": "GetRoutingQueueUsers",
      "signature": "GetRoutingQueueUsers(queueId, pageNumber, pageSize, sortOrder, expand, joined, name, profileSkills, skills, languages, routingStatus, presence)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "joined",
          "type": "bool?"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "profileSkills",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "skills",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "languages",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "routingStatus",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "presence",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "QueueMemberEntityListingV1"
    },
    "GET /api/v2/routing/queues/{queueId}/wrapupcodes": {
      "functionName": "GetRoutingQueueWrapupcodes",
      "signature": "GetRoutingQueueWrapupcodes(queueId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "WrapupCodeEntityListing"
    },
    "GET /api/v2/routing/queues": {
      "functionName": "GetRoutingQueues",
      "signature": "GetRoutingQueues(pageNumber, pageSize, sortOrder, name, id, divisionId)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "QueueEntityListing"
    },
    "GET /api/v2/routing/queues/divisionviews": {
      "functionName": "GetRoutingQueuesDivisionviews",
      "signature": "GetRoutingQueuesDivisionviews(pageSize, pageNumber, sortBy, sortOrder, name, id, divisionId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "QueueEntityListing"
    },
    "GET /api/v2/routing/queues/divisionviews/all": {
      "functionName": "GetRoutingQueuesDivisionviewsAll",
      "signature": "GetRoutingQueuesDivisionviewsAll(pageSize, pageNumber, sortOrder)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "QueueEntityListing"
    },
    "GET /api/v2/routing/queues/me": {
      "functionName": "GetRoutingQueuesMe",
      "signature": "GetRoutingQueuesMe(pageNumber, pageSize, joined, sortOrder)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "joined",
          "type": "bool?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "UserQueueEntityListing"
    },
    "GET /api/v2/routing/settings": {
      "functionName": "GetRoutingSettings",
      "signature": "GetRoutingSettings()",
      "return": "RoutingSettings"
    },
    "GET /api/v2/routing/settings/contactcenter": {
      "functionName": "GetRoutingSettingsContactcenter",
      "signature": "GetRoutingSettingsContactcenter()",
      "return": "ContactCenterSettings"
    },
    "GET /api/v2/routing/settings/transcription": {
      "functionName": "GetRoutingSettingsTranscription",
      "signature": "GetRoutingSettingsTranscription()",
      "return": "TranscriptionSettings"
    },
    "GET /api/v2/routing/skills/{skillId}": {
      "functionName": "GetRoutingSkill",
      "signature": "GetRoutingSkill(skillId)",
      "parameters": [
        {
          "name": "skillId",
          "type": "string"
        }
      ],
      "return": "RoutingSkill"
    },
    "GET /api/v2/routing/skills": {
      "functionName": "GetRoutingSkills",
      "signature": "GetRoutingSkills(pageSize, pageNumber, name, id)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "SkillEntityListing"
    },
    "GET /api/v2/routing/sms/addresses/{addressId}": {
      "functionName": "GetRoutingSmsAddress",
      "signature": "GetRoutingSmsAddress(addressId)",
      "parameters": [
        {
          "name": "addressId",
          "type": "string"
        }
      ],
      "return": "SmsAddress"
    },
    "GET /api/v2/routing/sms/addresses": {
      "functionName": "GetRoutingSmsAddresses",
      "signature": "GetRoutingSmsAddresses(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "SmsAddressEntityListing"
    },
    "GET /api/v2/routing/sms/availablephonenumbers": {
      "functionName": "GetRoutingSmsAvailablephonenumbers",
      "signature": "GetRoutingSmsAvailablephonenumbers(countryCode, phoneNumberType, region, city, areaCode, pattern, addressRequirement)",
      "parameters": [
        {
          "name": "countryCode",
          "type": "string"
        },
        {
          "name": "phoneNumberType",
          "type": "string"
        },
        {
          "name": "region",
          "type": "string"
        },
        {
          "name": "city",
          "type": "string"
        },
        {
          "name": "areaCode",
          "type": "string"
        },
        {
          "name": "pattern",
          "type": "string"
        },
        {
          "name": "addressRequirement",
          "type": "string"
        }
      ],
      "return": "SMSAvailablePhoneNumberEntityListing"
    },
    "GET /api/v2/routing/sms/phonenumbers/{addressId}": {
      "functionName": "GetRoutingSmsPhonenumber",
      "signature": "GetRoutingSmsPhonenumber(addressId)",
      "parameters": [
        {
          "name": "addressId",
          "type": "string"
        }
      ],
      "return": "SmsPhoneNumber"
    },
    "GET /api/v2/routing/sms/phonenumbers": {
      "functionName": "GetRoutingSmsPhonenumbers",
      "signature": "GetRoutingSmsPhonenumbers(phoneNumber, phoneNumberType, phoneNumberStatus, countryCode, pageSize, pageNumber, sortBy, sortOrder, language)",
      "parameters": [
        {
          "name": "phoneNumber",
          "type": "string"
        },
        {
          "name": "phoneNumberType",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "phoneNumberStatus",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "countryCode",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "language",
          "type": "string"
        }
      ],
      "return": "SmsPhoneNumberEntityListing"
    },
    "GET /api/v2/routing/users/{userId}/utilization": {
      "functionName": "GetRoutingUserUtilization",
      "signature": "GetRoutingUserUtilization(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "AgentMaxUtilization"
    },
    "GET /api/v2/routing/utilization": {
      "functionName": "GetRoutingUtilization",
      "signature": "GetRoutingUtilization()",
      "return": "Utilization"
    },
    "GET /api/v2/routing/wrapupcodes/{codeId}": {
      "functionName": "GetRoutingWrapupcode",
      "signature": "GetRoutingWrapupcode(codeId)",
      "parameters": [
        {
          "name": "codeId",
          "type": "string"
        }
      ],
      "return": "WrapupCode"
    },
    "GET /api/v2/routing/wrapupcodes": {
      "functionName": "GetRoutingWrapupcodes",
      "signature": "GetRoutingWrapupcodes(pageSize, pageNumber, sortBy, sortOrder, name)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        }
      ],
      "return": "WrapupCodeEntityListing"
    },
    "GET /api/v2/users/{userId}/queues": {
      "functionName": "GetUserQueues",
      "signature": "GetUserQueues(userId, pageSize, pageNumber, joined, divisionId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "joined",
          "type": "bool?"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "UserQueueEntityListing"
    },
    "GET /api/v2/users/{userId}/routinglanguages": {
      "functionName": "GetUserRoutinglanguages",
      "signature": "GetUserRoutinglanguages(userId, pageSize, pageNumber, sortOrder)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "UserLanguageEntityListing"
    },
    "GET /api/v2/users/{userId}/routingskills": {
      "functionName": "GetUserRoutingskills",
      "signature": "GetUserRoutingskills(userId, pageSize, pageNumber, sortOrder)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "UserSkillEntityListing"
    },
    "PATCH /api/v2/routing/conversations/{conversationId}": {
      "functionName": "PatchRoutingConversation",
      "signature": "PatchRoutingConversation(conversationId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "RoutingConversationAttributesRequest"
        }
      ],
      "return": "RoutingConversationAttributesResponse"
    },
    "PATCH /api/v2/routing/email/domains/{domainId}": {
      "functionName": "PatchRoutingEmailDomain",
      "signature": "PatchRoutingEmailDomain(domainId, body)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "InboundDomainPatchRequest"
        }
      ],
      "return": "InboundDomain"
    },
    "PATCH /api/v2/routing/email/domains/{domainId}/validate": {
      "functionName": "PatchRoutingEmailDomainValidate",
      "signature": "PatchRoutingEmailDomainValidate(domainId, body)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "InboundDomainPatchRequest"
        }
      ],
      "return": "InboundDomain"
    },
    "PATCH /api/v2/routing/predictors/{predictorId}": {
      "functionName": "PatchRoutingPredictor",
      "signature": "PatchRoutingPredictor(predictorId, body)",
      "parameters": [
        {
          "name": "predictorId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "PatchPredictorRequest"
        }
      ],
      "return": "Predictor"
    },
    "PATCH /api/v2/routing/queues/{queueId}/members/{memberId}": {
      "functionName": "PatchRoutingQueueMember",
      "signature": "PatchRoutingQueueMember(queueId, memberId, body)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "memberId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "QueueMember"
        }
      ]
    },
    "PATCH /api/v2/routing/queues/{queueId}/members": {
      "functionName": "PatchRoutingQueueMembers",
      "signature": "PatchRoutingQueueMembers(queueId, body)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;QueueMember&gt;"
        }
      ],
      "return": "QueueMemberEntityListing"
    },
    "PATCH /api/v2/routing/queues/{queueId}/users/{memberId}": {
      "functionName": "PatchRoutingQueueUser",
      "signature": "PatchRoutingQueueUser(queueId, memberId, body)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "memberId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "QueueMember"
        }
      ]
    },
    "PATCH /api/v2/routing/queues/{queueId}/users": {
      "functionName": "PatchRoutingQueueUsers",
      "signature": "PatchRoutingQueueUsers(queueId, body)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;QueueMember&gt;"
        }
      ],
      "return": "QueueMemberEntityListingV1"
    },
    "PATCH /api/v2/routing/settings/contactcenter": {
      "functionName": "PatchRoutingSettingsContactcenter",
      "signature": "PatchRoutingSettingsContactcenter(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ContactCenterSettings"
        }
      ]
    },
    "PATCH /api/v2/users/{userId}/queues/{queueId}": {
      "functionName": "PatchUserQueue",
      "signature": "PatchUserQueue(queueId, userId, body)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UserQueue"
        }
      ],
      "return": "UserQueue"
    },
    "PATCH /api/v2/users/{userId}/queues": {
      "functionName": "PatchUserQueues",
      "signature": "PatchUserQueues(userId, body, divisionId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;UserQueue&gt;"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "UserQueueEntityListing"
    },
    "PATCH /api/v2/users/{userId}/routinglanguages/{languageId}": {
      "functionName": "PatchUserRoutinglanguage",
      "signature": "PatchUserRoutinglanguage(userId, languageId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "languageId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UserRoutingLanguage"
        }
      ],
      "return": "UserRoutingLanguage"
    },
    "PATCH /api/v2/users/{userId}/routinglanguages/bulk": {
      "functionName": "PatchUserRoutinglanguagesBulk",
      "signature": "PatchUserRoutinglanguagesBulk(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;UserRoutingLanguagePost&gt;"
        }
      ],
      "return": "UserLanguageEntityListing"
    },
    "PATCH /api/v2/users/{userId}/routingskills/bulk": {
      "functionName": "PatchUserRoutingskillsBulk",
      "signature": "PatchUserRoutingskillsBulk(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;UserRoutingSkillPost&gt;"
        }
      ],
      "return": "UserSkillEntityListing"
    },
    "POST /api/v2/analytics/queues/observations/query": {
      "functionName": "PostAnalyticsQueuesObservationsQuery",
      "signature": "PostAnalyticsQueuesObservationsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "QueueObservationQuery"
        }
      ],
      "return": "QueueObservationQueryResponse"
    },
    "POST /api/v2/routing/assessments": {
      "functionName": "PostRoutingAssessments",
      "signature": "PostRoutingAssessments(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateBenefitAssessmentRequest"
        }
      ],
      "return": "BenefitAssessment"
    },
    "POST /api/v2/routing/assessments/jobs": {
      "functionName": "PostRoutingAssessmentsJobs",
      "signature": "PostRoutingAssessmentsJobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateBenefitAssessmentJobRequest"
        }
      ],
      "return": "BenefitAssessmentJob"
    },
    "POST /api/v2/routing/email/domains/{domainName}/routes": {
      "functionName": "PostRoutingEmailDomainRoutes",
      "signature": "PostRoutingEmailDomainRoutes(domainName, body)",
      "parameters": [
        {
          "name": "domainName",
          "type": "string"
        },
        {
          "name": "body",
          "type": "InboundRoute"
        }
      ],
      "return": "InboundRoute"
    },
    "POST /api/v2/routing/email/domains/{domainId}/testconnection": {
      "functionName": "PostRoutingEmailDomainTestconnection",
      "signature": "PostRoutingEmailDomainTestconnection(domainId, body)",
      "parameters": [
        {
          "name": "domainId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "TestMessage"
        }
      ],
      "return": "TestMessage"
    },
    "POST /api/v2/routing/email/domains": {
      "functionName": "PostRoutingEmailDomains",
      "signature": "PostRoutingEmailDomains(body)",
      "parameters": [
        {
          "name": "body",
          "type": "InboundDomain"
        }
      ],
      "return": "InboundDomain"
    },
    "POST /api/v2/routing/languages": {
      "functionName": "PostRoutingLanguages",
      "signature": "PostRoutingLanguages(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Language"
        }
      ],
      "return": "Language"
    },
    "POST /api/v2/routing/predictors": {
      "functionName": "PostRoutingPredictors",
      "signature": "PostRoutingPredictors(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreatePredictorRequest"
        }
      ],
      "return": "Predictor"
    },
    "POST /api/v2/routing/queues/{queueId}/members": {
      "functionName": "PostRoutingQueueMembers",
      "signature": "PostRoutingQueueMembers(queueId, body, delete)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;WritableEntity&gt;"
        },
        {
          "name": "delete",
          "type": "bool?"
        }
      ]
    },
    "POST /api/v2/routing/queues/{queueId}/users": {
      "functionName": "PostRoutingQueueUsers",
      "signature": "PostRoutingQueueUsers(queueId, body, delete)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;WritableEntity&gt;"
        },
        {
          "name": "delete",
          "type": "bool?"
        }
      ]
    },
    "POST /api/v2/routing/queues/{queueId}/wrapupcodes": {
      "functionName": "PostRoutingQueueWrapupcodes",
      "signature": "PostRoutingQueueWrapupcodes(queueId, body)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;WrapUpCodeReference&gt;"
        }
      ],
      "return": "List&lt;WrapupCode&gt;"
    },
    "POST /api/v2/routing/queues": {
      "functionName": "PostRoutingQueues",
      "signature": "PostRoutingQueues(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateQueueRequest"
        }
      ],
      "return": "Queue"
    },
    "POST /api/v2/routing/skills": {
      "functionName": "PostRoutingSkills",
      "signature": "PostRoutingSkills(body)",
      "parameters": [
        {
          "name": "body",
          "type": "RoutingSkill"
        }
      ],
      "return": "RoutingSkill"
    },
    "POST /api/v2/routing/sms/addresses": {
      "functionName": "PostRoutingSmsAddresses",
      "signature": "PostRoutingSmsAddresses(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SmsAddressProvision"
        }
      ],
      "return": "SmsAddress"
    },
    "POST /api/v2/routing/sms/phonenumbers": {
      "functionName": "PostRoutingSmsPhonenumbers",
      "signature": "PostRoutingSmsPhonenumbers(body, async)",
      "parameters": [
        {
          "name": "body",
          "type": "SmsPhoneNumberProvision"
        },
        {
          "name": "async",
          "type": "bool?"
        }
      ],
      "return": "SmsPhoneNumber"
    },
    "POST /api/v2/routing/wrapupcodes": {
      "functionName": "PostRoutingWrapupcodes",
      "signature": "PostRoutingWrapupcodes(body)",
      "parameters": [
        {
          "name": "body",
          "type": "WrapupCode"
        }
      ],
      "return": "WrapupCode"
    },
    "POST /api/v2/users/{userId}/routinglanguages": {
      "functionName": "PostUserRoutinglanguages",
      "signature": "PostUserRoutinglanguages(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UserRoutingLanguagePost"
        }
      ],
      "return": "UserRoutingLanguage"
    },
    "POST /api/v2/users/{userId}/routingskills": {
      "functionName": "PostUserRoutingskills",
      "signature": "PostUserRoutingskills(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UserRoutingSkillPost"
        }
      ],
      "return": "UserRoutingSkill"
    },
    "PUT /api/v2/routing/email/domains/{domainName}/routes/{routeId}": {
      "functionName": "PutRoutingEmailDomainRoute",
      "signature": "PutRoutingEmailDomainRoute(domainName, routeId, body)",
      "parameters": [
        {
          "name": "domainName",
          "type": "string"
        },
        {
          "name": "routeId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "InboundRoute"
        }
      ],
      "return": "InboundRoute"
    },
    "PUT /api/v2/routing/message/recipients/{recipientId}": {
      "functionName": "PutRoutingMessageRecipient",
      "signature": "PutRoutingMessageRecipient(recipientId, body)",
      "parameters": [
        {
          "name": "recipientId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Recipient"
        }
      ],
      "return": "Recipient"
    },
    "PUT /api/v2/routing/queues/{queueId}": {
      "functionName": "PutRoutingQueue",
      "signature": "PutRoutingQueue(queueId, body)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "QueueRequest"
        }
      ],
      "return": "Queue"
    },
    "PUT /api/v2/routing/settings": {
      "functionName": "PutRoutingSettings",
      "signature": "PutRoutingSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "RoutingSettings"
        }
      ],
      "return": "RoutingSettings"
    },
    "PUT /api/v2/routing/settings/transcription": {
      "functionName": "PutRoutingSettingsTranscription",
      "signature": "PutRoutingSettingsTranscription(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TranscriptionSettings"
        }
      ],
      "return": "TranscriptionSettings"
    },
    "PUT /api/v2/routing/sms/phonenumbers/{addressId}": {
      "functionName": "PutRoutingSmsPhonenumber",
      "signature": "PutRoutingSmsPhonenumber(addressId, body, async)",
      "parameters": [
        {
          "name": "addressId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "SmsPhoneNumber"
        },
        {
          "name": "async",
          "type": "bool?"
        }
      ],
      "return": "SmsPhoneNumber"
    },
    "PUT /api/v2/routing/users/{userId}/utilization": {
      "functionName": "PutRoutingUserUtilization",
      "signature": "PutRoutingUserUtilization(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Utilization"
        }
      ],
      "return": "AgentMaxUtilization"
    },
    "PUT /api/v2/routing/utilization": {
      "functionName": "PutRoutingUtilization",
      "signature": "PutRoutingUtilization(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Utilization"
        }
      ],
      "return": "Utilization"
    },
    "PUT /api/v2/routing/wrapupcodes/{codeId}": {
      "functionName": "PutRoutingWrapupcode",
      "signature": "PutRoutingWrapupcode(codeId, body)",
      "parameters": [
        {
          "name": "codeId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "WrapupCode"
        }
      ],
      "return": "WrapupCode"
    },
    "PUT /api/v2/users/{userId}/routingskills/{skillId}": {
      "functionName": "PutUserRoutingskill",
      "signature": "PutUserRoutingskill(userId, skillId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "skillId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UserRoutingSkill"
        }
      ],
      "return": "UserRoutingSkill"
    },
    "PUT /api/v2/users/{userId}/routingskills/bulk": {
      "functionName": "PutUserRoutingskillsBulk",
      "signature": "PutUserRoutingskillsBulk(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;UserRoutingSkillPost&gt;"
        }
      ],
      "return": "UserSkillEntityListing"
    }
  },
  "scim": {
    "DELETE /api/v2/scim/users/{userId}": {
      "functionName": "DeleteScimUser",
      "signature": "DeleteScimUser(userId, ifMatch)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "ifMatch",
          "type": "string"
        }
      ],
      "return": "Empty"
    },
    "DELETE /api/v2/scim/v2/users/{userId}": {
      "functionName": "DeleteScimV2User",
      "signature": "DeleteScimV2User(userId, ifMatch)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "ifMatch",
          "type": "string"
        }
      ],
      "return": "Empty"
    },
    "GET /api/v2/scim/groups/{groupId}": {
      "functionName": "GetScimGroup",
      "signature": "GetScimGroup(groupId, attributes, excludedAttributes, ifNoneMatch)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        },
        {
          "name": "attributes",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "excludedAttributes",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "ifNoneMatch",
          "type": "string"
        }
      ],
      "return": "ScimV2Group"
    },
    "GET /api/v2/scim/groups": {
      "functionName": "GetScimGroups",
      "signature": "GetScimGroups(startIndex, count, attributes, excludedAttributes, filter)",
      "parameters": [
        {
          "name": "startIndex",
          "type": "int?"
        },
        {
          "name": "count",
          "type": "int?"
        },
        {
          "name": "attributes",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "excludedAttributes",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "filter",
          "type": "string"
        }
      ],
      "return": "ScimGroupListResponse"
    },
    "GET /api/v2/scim/resourcetypes/{resourceType}": {
      "functionName": "GetScimResourcetype",
      "signature": "GetScimResourcetype(resourceType)",
      "parameters": [
        {
          "name": "resourceType",
          "type": "string"
        }
      ],
      "return": "ScimConfigResourceType"
    },
    "GET /api/v2/scim/resourcetypes": {
      "functionName": "GetScimResourcetypes",
      "signature": "GetScimResourcetypes()",
      "return": "ScimConfigResourceTypesListResponse"
    },
    "GET /api/v2/scim/schemas/{schemaId}": {
      "functionName": "GetScimSchema",
      "signature": "GetScimSchema(schemaId)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "string"
        }
      ],
      "return": "ScimV2SchemaDefinition"
    },
    "GET /api/v2/scim/schemas": {
      "functionName": "GetScimSchemas",
      "signature": "GetScimSchemas(filter)",
      "parameters": [
        {
          "name": "filter",
          "type": "string"
        }
      ],
      "return": "ScimV2SchemaListResponse"
    },
    "GET /api/v2/scim/serviceproviderconfig": {
      "functionName": "GetScimServiceproviderconfig",
      "signature": "GetScimServiceproviderconfig(ifNoneMatch)",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "type": "string"
        }
      ],
      "return": "ScimServiceProviderConfig"
    },
    "GET /api/v2/scim/users/{userId}": {
      "functionName": "GetScimUser",
      "signature": "GetScimUser(userId, attributes, excludedAttributes, ifNoneMatch)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "attributes",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "excludedAttributes",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "ifNoneMatch",
          "type": "string"
        }
      ],
      "return": "ScimV2User"
    },
    "GET /api/v2/scim/users": {
      "functionName": "GetScimUsers",
      "signature": "GetScimUsers(startIndex, count, attributes, excludedAttributes, filter)",
      "parameters": [
        {
          "name": "startIndex",
          "type": "int?"
        },
        {
          "name": "count",
          "type": "int?"
        },
        {
          "name": "attributes",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "excludedAttributes",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "filter",
          "type": "string"
        }
      ],
      "return": "ScimUserListResponse"
    },
    "GET /api/v2/scim/v2/groups/{groupId}": {
      "functionName": "GetScimV2Group",
      "signature": "GetScimV2Group(groupId, attributes, excludedAttributes, ifNoneMatch)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        },
        {
          "name": "attributes",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "excludedAttributes",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "ifNoneMatch",
          "type": "string"
        }
      ],
      "return": "ScimV2Group"
    },
    "GET /api/v2/scim/v2/groups": {
      "functionName": "GetScimV2Groups",
      "signature": "GetScimV2Groups(filter, startIndex, count, attributes, excludedAttributes)",
      "parameters": [
        {
          "name": "filter",
          "type": "string"
        },
        {
          "name": "startIndex",
          "type": "int?"
        },
        {
          "name": "count",
          "type": "int?"
        },
        {
          "name": "attributes",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "excludedAttributes",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "ScimGroupListResponse"
    },
    "GET /api/v2/scim/v2/resourcetypes/{resourceType}": {
      "functionName": "GetScimV2Resourcetype",
      "signature": "GetScimV2Resourcetype(resourceType)",
      "parameters": [
        {
          "name": "resourceType",
          "type": "string"
        }
      ],
      "return": "ScimConfigResourceType"
    },
    "GET /api/v2/scim/v2/resourcetypes": {
      "functionName": "GetScimV2Resourcetypes",
      "signature": "GetScimV2Resourcetypes()",
      "return": "ScimConfigResourceTypesListResponse"
    },
    "GET /api/v2/scim/v2/schemas/{schemaId}": {
      "functionName": "GetScimV2Schema",
      "signature": "GetScimV2Schema(schemaId)",
      "parameters": [
        {
          "name": "schemaId",
          "type": "string"
        }
      ],
      "return": "ScimV2SchemaDefinition"
    },
    "GET /api/v2/scim/v2/schemas": {
      "functionName": "GetScimV2Schemas",
      "signature": "GetScimV2Schemas(filter)",
      "parameters": [
        {
          "name": "filter",
          "type": "string"
        }
      ],
      "return": "ScimV2SchemaListResponse"
    },
    "GET /api/v2/scim/v2/serviceproviderconfig": {
      "functionName": "GetScimV2Serviceproviderconfig",
      "signature": "GetScimV2Serviceproviderconfig(ifNoneMatch)",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "type": "string"
        }
      ],
      "return": "ScimServiceProviderConfig"
    },
    "GET /api/v2/scim/v2/users/{userId}": {
      "functionName": "GetScimV2User",
      "signature": "GetScimV2User(userId, attributes, excludedAttributes, ifNoneMatch)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "attributes",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "excludedAttributes",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "ifNoneMatch",
          "type": "string"
        }
      ],
      "return": "ScimV2User"
    },
    "GET /api/v2/scim/v2/users": {
      "functionName": "GetScimV2Users",
      "signature": "GetScimV2Users(startIndex, count, attributes, excludedAttributes, filter)",
      "parameters": [
        {
          "name": "startIndex",
          "type": "int?"
        },
        {
          "name": "count",
          "type": "int?"
        },
        {
          "name": "attributes",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "excludedAttributes",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "filter",
          "type": "string"
        }
      ],
      "return": "ScimUserListResponse"
    },
    "PATCH /api/v2/scim/groups/{groupId}": {
      "functionName": "PatchScimGroup",
      "signature": "PatchScimGroup(groupId, body, ifMatch)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ScimV2PatchRequest"
        },
        {
          "name": "ifMatch",
          "type": "string"
        }
      ],
      "return": "ScimV2Group"
    },
    "PATCH /api/v2/scim/users/{userId}": {
      "functionName": "PatchScimUser",
      "signature": "PatchScimUser(userId, body, ifMatch)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ScimV2PatchRequest"
        },
        {
          "name": "ifMatch",
          "type": "string"
        }
      ],
      "return": "ScimV2User"
    },
    "PATCH /api/v2/scim/v2/groups/{groupId}": {
      "functionName": "PatchScimV2Group",
      "signature": "PatchScimV2Group(groupId, body, ifMatch)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ScimV2PatchRequest"
        },
        {
          "name": "ifMatch",
          "type": "string"
        }
      ],
      "return": "ScimV2Group"
    },
    "PATCH /api/v2/scim/v2/users/{userId}": {
      "functionName": "PatchScimV2User",
      "signature": "PatchScimV2User(userId, body, ifMatch)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ScimV2PatchRequest"
        },
        {
          "name": "ifMatch",
          "type": "string"
        }
      ],
      "return": "ScimV2User"
    },
    "POST /api/v2/scim/users": {
      "functionName": "PostScimUsers",
      "signature": "PostScimUsers(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ScimV2CreateUser"
        }
      ],
      "return": "ScimV2User"
    },
    "POST /api/v2/scim/v2/users": {
      "functionName": "PostScimV2Users",
      "signature": "PostScimV2Users(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ScimV2CreateUser"
        }
      ],
      "return": "ScimV2User"
    },
    "PUT /api/v2/scim/groups/{groupId}": {
      "functionName": "PutScimGroup",
      "signature": "PutScimGroup(groupId, body, ifMatch)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ScimV2Group"
        },
        {
          "name": "ifMatch",
          "type": "string"
        }
      ],
      "return": "ScimV2Group"
    },
    "PUT /api/v2/scim/users/{userId}": {
      "functionName": "PutScimUser",
      "signature": "PutScimUser(userId, body, ifMatch)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ScimV2User"
        },
        {
          "name": "ifMatch",
          "type": "string"
        }
      ],
      "return": "ScimV2User"
    },
    "PUT /api/v2/scim/v2/groups/{groupId}": {
      "functionName": "PutScimV2Group",
      "signature": "PutScimV2Group(groupId, body, ifMatch)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ScimV2Group"
        },
        {
          "name": "ifMatch",
          "type": "string"
        }
      ],
      "return": "ScimV2Group"
    },
    "PUT /api/v2/scim/v2/users/{userId}": {
      "functionName": "PutScimV2User",
      "signature": "PutScimV2User(userId, body, ifMatch)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ScimV2User"
        },
        {
          "name": "ifMatch",
          "type": "string"
        }
      ],
      "return": "ScimV2User"
    }
  },
  "scripts": {
    "GET /api/v2/scripts/{scriptId}": {
      "functionName": "GetScript",
      "signature": "GetScript(scriptId)",
      "parameters": [
        {
          "name": "scriptId",
          "type": "string"
        }
      ],
      "return": "Script"
    },
    "GET /api/v2/scripts/{scriptId}/pages/{pageId}": {
      "functionName": "GetScriptPage",
      "signature": "GetScriptPage(scriptId, pageId, scriptDataVersion)",
      "parameters": [
        {
          "name": "scriptId",
          "type": "string"
        },
        {
          "name": "pageId",
          "type": "string"
        },
        {
          "name": "scriptDataVersion",
          "type": "string"
        }
      ],
      "return": "Page"
    },
    "GET /api/v2/scripts/{scriptId}/pages": {
      "functionName": "GetScriptPages",
      "signature": "GetScriptPages(scriptId, scriptDataVersion)",
      "parameters": [
        {
          "name": "scriptId",
          "type": "string"
        },
        {
          "name": "scriptDataVersion",
          "type": "string"
        }
      ],
      "return": "List&lt;Page&gt;"
    },
    "GET /api/v2/scripts": {
      "functionName": "GetScripts",
      "signature": "GetScripts(pageSize, pageNumber, expand, name, feature, flowId, sortBy, sortOrder, scriptDataVersion)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "feature",
          "type": "string"
        },
        {
          "name": "flowId",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "scriptDataVersion",
          "type": "string"
        }
      ],
      "return": "ScriptEntityListing"
    },
    "GET /api/v2/scripts/published": {
      "functionName": "GetScriptsPublished",
      "signature": "GetScriptsPublished(pageSize, pageNumber, expand, name, feature, flowId, scriptDataVersion)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "feature",
          "type": "string"
        },
        {
          "name": "flowId",
          "type": "string"
        },
        {
          "name": "scriptDataVersion",
          "type": "string"
        }
      ],
      "return": "ScriptEntityListing"
    },
    "GET /api/v2/scripts/published/{scriptId}": {
      "functionName": "GetScriptsPublishedScriptId",
      "signature": "GetScriptsPublishedScriptId(scriptId, scriptDataVersion)",
      "parameters": [
        {
          "name": "scriptId",
          "type": "string"
        },
        {
          "name": "scriptDataVersion",
          "type": "string"
        }
      ],
      "return": "Script"
    },
    "GET /api/v2/scripts/published/{scriptId}/pages/{pageId}": {
      "functionName": "GetScriptsPublishedScriptIdPage",
      "signature": "GetScriptsPublishedScriptIdPage(scriptId, pageId, scriptDataVersion)",
      "parameters": [
        {
          "name": "scriptId",
          "type": "string"
        },
        {
          "name": "pageId",
          "type": "string"
        },
        {
          "name": "scriptDataVersion",
          "type": "string"
        }
      ],
      "return": "Page"
    },
    "GET /api/v2/scripts/published/{scriptId}/pages": {
      "functionName": "GetScriptsPublishedScriptIdPages",
      "signature": "GetScriptsPublishedScriptIdPages(scriptId, scriptDataVersion)",
      "parameters": [
        {
          "name": "scriptId",
          "type": "string"
        },
        {
          "name": "scriptDataVersion",
          "type": "string"
        }
      ],
      "return": "List&lt;Page&gt;"
    },
    "GET /api/v2/scripts/published/{scriptId}/variables": {
      "functionName": "GetScriptsPublishedScriptIdVariables",
      "signature": "GetScriptsPublishedScriptIdVariables(scriptId, input, output, type, scriptDataVersion)",
      "parameters": [
        {
          "name": "scriptId",
          "type": "string"
        },
        {
          "name": "input",
          "type": "string"
        },
        {
          "name": "output",
          "type": "string"
        },
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "scriptDataVersion",
          "type": "string"
        }
      ],
      "return": "Object"
    },
    "GET /api/v2/scripts/uploads/{uploadId}/status": {
      "functionName": "GetScriptsUploadStatus",
      "signature": "GetScriptsUploadStatus(uploadId, longPoll)",
      "parameters": [
        {
          "name": "uploadId",
          "type": "string"
        },
        {
          "name": "longPoll",
          "type": "bool?"
        }
      ],
      "return": "ImportScriptStatusResponse"
    },
    "POST /api/v2/scripts/{scriptId}/export": {
      "functionName": "PostScriptExport",
      "signature": "PostScriptExport(scriptId, body)",
      "parameters": [
        {
          "name": "scriptId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ExportScriptRequest"
        }
      ],
      "return": "ExportScriptResponse"
    }
  },
  "search": {
    "GET /api/v2/documentation/gkn/search": {
      "functionName": "GetDocumentationGknSearch",
      "signature": "GetDocumentationGknSearch(q64)",
      "parameters": [
        {
          "name": "q64",
          "type": "string"
        }
      ],
      "return": "GKNDocumentationSearchResponse"
    },
    "GET /api/v2/documentation/search": {
      "functionName": "GetDocumentationSearch",
      "signature": "GetDocumentationSearch(q64)",
      "parameters": [
        {
          "name": "q64",
          "type": "string"
        }
      ],
      "return": "DocumentationSearchResponse"
    },
    "GET /api/v2/groups/search": {
      "functionName": "GetGroupsSearch",
      "signature": "GetGroupsSearch(q64, expand)",
      "parameters": [
        {
          "name": "q64",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "GroupsSearchResponse"
    },
    "GET /api/v2/locations/search": {
      "functionName": "GetLocationsSearch",
      "signature": "GetLocationsSearch(q64, expand)",
      "parameters": [
        {
          "name": "q64",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "LocationsSearchResponse"
    },
    "GET /api/v2/search": {
      "functionName": "GetSearch",
      "signature": "GetSearch(q64, expand, profile)",
      "parameters": [
        {
          "name": "q64",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "profile",
          "type": "bool?"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "GET /api/v2/search/suggest": {
      "functionName": "GetSearchSuggest",
      "signature": "GetSearchSuggest(q64, expand, profile)",
      "parameters": [
        {
          "name": "q64",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "profile",
          "type": "bool?"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "GET /api/v2/users/search": {
      "functionName": "GetUsersSearch",
      "signature": "GetUsersSearch(q64, expand, integrationPresenceSource)",
      "parameters": [
        {
          "name": "q64",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "integrationPresenceSource",
          "type": "string"
        }
      ],
      "return": "UsersSearchResponse"
    },
    "GET /api/v2/voicemail/search": {
      "functionName": "GetVoicemailSearch",
      "signature": "GetVoicemailSearch(q64, expand)",
      "parameters": [
        {
          "name": "q64",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "VoicemailsSearchResponse"
    },
    "POST /api/v2/analytics/conversations/transcripts/query": {
      "functionName": "PostAnalyticsConversationsTranscriptsQuery",
      "signature": "PostAnalyticsConversationsTranscriptsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TranscriptConversationDetailSearchRequest"
        }
      ],
      "return": "AnalyticsConversationWithoutAttributesMultiGetResponse"
    },
    "POST /api/v2/documentation/gkn/search": {
      "functionName": "PostDocumentationGknSearch",
      "signature": "PostDocumentationGknSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "GKNDocumentationSearchRequest"
        }
      ],
      "return": "GKNDocumentationSearchResponse"
    },
    "POST /api/v2/documentation/search": {
      "functionName": "PostDocumentationSearch",
      "signature": "PostDocumentationSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DocumentationSearchRequest"
        }
      ],
      "return": "DocumentationSearchResponse"
    },
    "POST /api/v2/groups/search": {
      "functionName": "PostGroupsSearch",
      "signature": "PostGroupsSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "GroupSearchRequest"
        }
      ],
      "return": "GroupsSearchResponse"
    },
    "POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/search": {
      "functionName": "PostKnowledgeKnowledgebaseSearch",
      "signature": "PostKnowledgeKnowledgebaseSearch(knowledgeBaseId, body)",
      "parameters": [
        {
          "name": "knowledgeBaseId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "KnowledgeSearchRequest"
        }
      ],
      "return": "KnowledgeSearchResponse"
    },
    "POST /api/v2/locations/search": {
      "functionName": "PostLocationsSearch",
      "signature": "PostLocationsSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "LocationSearchRequest"
        }
      ],
      "return": "LocationsSearchResponse"
    },
    "POST /api/v2/search": {
      "functionName": "PostSearch",
      "signature": "PostSearch(body, profile)",
      "parameters": [
        {
          "name": "body",
          "type": "SearchRequest"
        },
        {
          "name": "profile",
          "type": "bool?"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "POST /api/v2/search/suggest": {
      "functionName": "PostSearchSuggest",
      "signature": "PostSearchSuggest(body, profile)",
      "parameters": [
        {
          "name": "body",
          "type": "SuggestSearchRequest"
        },
        {
          "name": "profile",
          "type": "bool?"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "POST /api/v2/speechandtextanalytics/transcripts/search": {
      "functionName": "PostSpeechandtextanalyticsTranscriptsSearch",
      "signature": "PostSpeechandtextanalyticsTranscriptsSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TranscriptSearchRequest"
        }
      ],
      "return": "JsonSearchResponse"
    },
    "POST /api/v2/users/search": {
      "functionName": "PostUsersSearch",
      "signature": "PostUsersSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UserSearchRequest"
        }
      ],
      "return": "UsersSearchResponse"
    },
    "POST /api/v2/voicemail/search": {
      "functionName": "PostVoicemailSearch",
      "signature": "PostVoicemailSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "VoicemailSearchRequest"
        }
      ],
      "return": "VoicemailsSearchResponse"
    }
  },
  "speechtextanalytics": {
    "DELETE /api/v2/speechandtextanalytics/programs/{programId}": {
      "functionName": "DeleteSpeechandtextanalyticsProgram",
      "signature": "DeleteSpeechandtextanalyticsProgram(programId, forceDelete)",
      "parameters": [
        {
          "name": "programId",
          "type": "string"
        },
        {
          "name": "forceDelete",
          "type": "bool?"
        }
      ]
    },
    "DELETE /api/v2/speechandtextanalytics/sentimentfeedback": {
      "functionName": "DeleteSpeechandtextanalyticsSentimentfeedback",
      "signature": "DeleteSpeechandtextanalyticsSentimentfeedback()"
    },
    "DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}": {
      "functionName": "DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackId",
      "signature": "DeleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackId(sentimentFeedbackId)",
      "parameters": [
        {
          "name": "sentimentFeedbackId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/speechandtextanalytics/topics/{topicId}": {
      "functionName": "DeleteSpeechandtextanalyticsTopic",
      "signature": "DeleteSpeechandtextanalyticsTopic(topicId)",
      "parameters": [
        {
          "name": "topicId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/speechandtextanalytics/conversations/{conversationId}": {
      "functionName": "GetSpeechandtextanalyticsConversation",
      "signature": "GetSpeechandtextanalyticsConversation(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "ConversationMetrics"
    },
    "GET /api/v2/speechandtextanalytics/conversations/{conversationId}/communications/{communicationId}/transcripturl": {
      "functionName": "GetSpeechandtextanalyticsConversationCommunicationTranscripturl",
      "signature": "GetSpeechandtextanalyticsConversationCommunicationTranscripturl(conversationId, communicationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "communicationId",
          "type": "string"
        }
      ],
      "return": "TranscriptUrl"
    },
    "GET /api/v2/speechandtextanalytics/programs/{programId}": {
      "functionName": "GetSpeechandtextanalyticsProgram",
      "signature": "GetSpeechandtextanalyticsProgram(programId)",
      "parameters": [
        {
          "name": "programId",
          "type": "string"
        }
      ],
      "return": "Program"
    },
    "GET /api/v2/speechandtextanalytics/programs/{programId}/mappings": {
      "functionName": "GetSpeechandtextanalyticsProgramMappings",
      "signature": "GetSpeechandtextanalyticsProgramMappings(programId)",
      "parameters": [
        {
          "name": "programId",
          "type": "string"
        }
      ],
      "return": "ProgramMappings"
    },
    "GET /api/v2/speechandtextanalytics/programs": {
      "functionName": "GetSpeechandtextanalyticsPrograms",
      "signature": "GetSpeechandtextanalyticsPrograms(nextPage, pageSize)",
      "parameters": [
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "ProgramsEntityListing"
    },
    "GET /api/v2/speechandtextanalytics/programs/general/jobs/{jobId}": {
      "functionName": "GetSpeechandtextanalyticsProgramsGeneralJob",
      "signature": "GetSpeechandtextanalyticsProgramsGeneralJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        }
      ],
      "return": "GeneralProgramJob"
    },
    "GET /api/v2/speechandtextanalytics/programs/mappings": {
      "functionName": "GetSpeechandtextanalyticsProgramsMappings",
      "signature": "GetSpeechandtextanalyticsProgramsMappings(nextPage, pageSize)",
      "parameters": [
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "ProgramsMappingsEntityListing"
    },
    "GET /api/v2/speechandtextanalytics/programs/publishjobs/{jobId}": {
      "functionName": "GetSpeechandtextanalyticsProgramsPublishjob",
      "signature": "GetSpeechandtextanalyticsProgramsPublishjob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        }
      ],
      "return": "ProgramJob"
    },
    "GET /api/v2/speechandtextanalytics/programs/unpublished": {
      "functionName": "GetSpeechandtextanalyticsProgramsUnpublished",
      "signature": "GetSpeechandtextanalyticsProgramsUnpublished(nextPage, pageSize)",
      "parameters": [
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "UnpublishedProgramsEntityListing"
    },
    "GET /api/v2/speechandtextanalytics/sentiment/dialects": {
      "functionName": "GetSpeechandtextanalyticsSentimentDialects",
      "signature": "GetSpeechandtextanalyticsSentimentDialects()",
      "return": "EntityListing"
    },
    "GET /api/v2/speechandtextanalytics/sentimentfeedback": {
      "functionName": "GetSpeechandtextanalyticsSentimentfeedback",
      "signature": "GetSpeechandtextanalyticsSentimentfeedback(dialect)",
      "parameters": [
        {
          "name": "dialect",
          "type": "string"
        }
      ],
      "return": "SentimentFeedbackEntityListing"
    },
    "GET /api/v2/speechandtextanalytics/settings": {
      "functionName": "GetSpeechandtextanalyticsSettings",
      "signature": "GetSpeechandtextanalyticsSettings()",
      "return": "SpeechTextAnalyticsSettingsResponse"
    },
    "GET /api/v2/speechandtextanalytics/topics/{topicId}": {
      "functionName": "GetSpeechandtextanalyticsTopic",
      "signature": "GetSpeechandtextanalyticsTopic(topicId)",
      "parameters": [
        {
          "name": "topicId",
          "type": "string"
        }
      ],
      "return": "Topic"
    },
    "GET /api/v2/speechandtextanalytics/topics": {
      "functionName": "GetSpeechandtextanalyticsTopics",
      "signature": "GetSpeechandtextanalyticsTopics(nextPage, pageSize, state, name, ids, sortBy, sortOrder)",
      "parameters": [
        {
          "name": "nextPage",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "state",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "ids",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "TopicsEntityListing"
    },
    "GET /api/v2/speechandtextanalytics/topics/dialects": {
      "functionName": "GetSpeechandtextanalyticsTopicsDialects",
      "signature": "GetSpeechandtextanalyticsTopicsDialects()",
      "return": "EntityListing"
    },
    "GET /api/v2/speechandtextanalytics/topics/general": {
      "functionName": "GetSpeechandtextanalyticsTopicsGeneral",
      "signature": "GetSpeechandtextanalyticsTopicsGeneral(dialect)",
      "parameters": [
        {
          "name": "dialect",
          "type": "string"
        }
      ],
      "return": "GeneralTopicsEntityListing"
    },
    "GET /api/v2/speechandtextanalytics/topics/publishjobs/{jobId}": {
      "functionName": "GetSpeechandtextanalyticsTopicsPublishjob",
      "signature": "GetSpeechandtextanalyticsTopicsPublishjob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        }
      ],
      "return": "TopicJob"
    },
    "PATCH /api/v2/speechandtextanalytics/settings": {
      "functionName": "PatchSpeechandtextanalyticsSettings",
      "signature": "PatchSpeechandtextanalyticsSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SpeechTextAnalyticsSettingsRequest"
        }
      ],
      "return": "SpeechTextAnalyticsSettingsResponse"
    },
    "POST /api/v2/speechandtextanalytics/programs": {
      "functionName": "PostSpeechandtextanalyticsPrograms",
      "signature": "PostSpeechandtextanalyticsPrograms(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ProgramRequest"
        }
      ],
      "return": "Program"
    },
    "POST /api/v2/speechandtextanalytics/programs/general/jobs": {
      "functionName": "PostSpeechandtextanalyticsProgramsGeneralJobs",
      "signature": "PostSpeechandtextanalyticsProgramsGeneralJobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "GeneralProgramJobRequest"
        }
      ],
      "return": "GeneralProgramJob"
    },
    "POST /api/v2/speechandtextanalytics/programs/publishjobs": {
      "functionName": "PostSpeechandtextanalyticsProgramsPublishjobs",
      "signature": "PostSpeechandtextanalyticsProgramsPublishjobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ProgramJobRequest"
        }
      ],
      "return": "ProgramJob"
    },
    "POST /api/v2/speechandtextanalytics/sentimentfeedback": {
      "functionName": "PostSpeechandtextanalyticsSentimentfeedback",
      "signature": "PostSpeechandtextanalyticsSentimentfeedback(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SentimentFeedback"
        }
      ],
      "return": "SentimentFeedback"
    },
    "POST /api/v2/speechandtextanalytics/topics": {
      "functionName": "PostSpeechandtextanalyticsTopics",
      "signature": "PostSpeechandtextanalyticsTopics(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TopicRequest"
        }
      ],
      "return": "Topic"
    },
    "POST /api/v2/speechandtextanalytics/topics/publishjobs": {
      "functionName": "PostSpeechandtextanalyticsTopicsPublishjobs",
      "signature": "PostSpeechandtextanalyticsTopicsPublishjobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TopicJobRequest"
        }
      ],
      "return": "TopicJob"
    },
    "POST /api/v2/speechandtextanalytics/transcripts/search": {
      "functionName": "PostSpeechandtextanalyticsTranscriptsSearch",
      "signature": "PostSpeechandtextanalyticsTranscriptsSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TranscriptSearchRequest"
        }
      ],
      "return": "JsonSearchResponse"
    },
    "PUT /api/v2/speechandtextanalytics/programs/{programId}": {
      "functionName": "PutSpeechandtextanalyticsProgram",
      "signature": "PutSpeechandtextanalyticsProgram(programId, body)",
      "parameters": [
        {
          "name": "programId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ProgramRequest"
        }
      ],
      "return": "Program"
    },
    "PUT /api/v2/speechandtextanalytics/programs/{programId}/mappings": {
      "functionName": "PutSpeechandtextanalyticsProgramMappings",
      "signature": "PutSpeechandtextanalyticsProgramMappings(programId, body)",
      "parameters": [
        {
          "name": "programId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ProgramMappingsRequest"
        }
      ],
      "return": "ProgramMappings"
    },
    "PUT /api/v2/speechandtextanalytics/settings": {
      "functionName": "PutSpeechandtextanalyticsSettings",
      "signature": "PutSpeechandtextanalyticsSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "SpeechTextAnalyticsSettingsRequest"
        }
      ],
      "return": "SpeechTextAnalyticsSettingsResponse"
    },
    "PUT /api/v2/speechandtextanalytics/topics/{topicId}": {
      "functionName": "PutSpeechandtextanalyticsTopic",
      "signature": "PutSpeechandtextanalyticsTopic(topicId, body)",
      "parameters": [
        {
          "name": "topicId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "TopicRequest"
        }
      ],
      "return": "Topic"
    }
  },
  "stations": {
    "DELETE /api/v2/stations/{stationId}/associateduser": {
      "functionName": "DeleteStationAssociateduser",
      "signature": "DeleteStationAssociateduser(stationId)",
      "parameters": [
        {
          "name": "stationId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/stations/{stationId}": {
      "functionName": "GetStation",
      "signature": "GetStation(stationId)",
      "parameters": [
        {
          "name": "stationId",
          "type": "string"
        }
      ],
      "return": "Station"
    },
    "GET /api/v2/stations": {
      "functionName": "GetStations",
      "signature": "GetStations(pageSize, pageNumber, sortBy, name, userSelectable, webRtcUserId, id, lineAppearanceId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "userSelectable",
          "type": "string"
        },
        {
          "name": "webRtcUserId",
          "type": "string"
        },
        {
          "name": "id",
          "type": "string"
        },
        {
          "name": "lineAppearanceId",
          "type": "string"
        }
      ],
      "return": "StationEntityListing"
    },
    "GET /api/v2/stations/settings": {
      "functionName": "GetStationsSettings",
      "signature": "GetStationsSettings()",
      "return": "StationSettings"
    },
    "PATCH /api/v2/stations/settings": {
      "functionName": "PatchStationsSettings",
      "signature": "PatchStationsSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "StationSettings"
        }
      ],
      "return": "StationSettings"
    }
  },
  "suggest": {
    "GET /api/v2/search": {
      "functionName": "GetSearch",
      "signature": "GetSearch(q64, expand, profile)",
      "parameters": [
        {
          "name": "q64",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "profile",
          "type": "bool?"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "GET /api/v2/search/suggest": {
      "functionName": "GetSearchSuggest",
      "signature": "GetSearchSuggest(q64, expand, profile)",
      "parameters": [
        {
          "name": "q64",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "profile",
          "type": "bool?"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "POST /api/v2/search": {
      "functionName": "PostSearch",
      "signature": "PostSearch(body, profile)",
      "parameters": [
        {
          "name": "body",
          "type": "SearchRequest"
        },
        {
          "name": "profile",
          "type": "bool?"
        }
      ],
      "return": "JsonNodeSearchResponse"
    },
    "POST /api/v2/search/suggest": {
      "functionName": "PostSearchSuggest",
      "signature": "PostSearchSuggest(body, profile)",
      "parameters": [
        {
          "name": "body",
          "type": "SuggestSearchRequest"
        },
        {
          "name": "profile",
          "type": "bool?"
        }
      ],
      "return": "JsonNodeSearchResponse"
    }
  },
  "telephony": {
    "GET /api/v2/telephony/siptraces": {
      "functionName": "GetTelephonySiptraces",
      "signature": "GetTelephonySiptraces(dateStart, dateEnd, callId, toUser, fromUser, conversationId)",
      "parameters": [
        {
          "name": "dateStart",
          "type": "DateTime?"
        },
        {
          "name": "dateEnd",
          "type": "DateTime?"
        },
        {
          "name": "callId",
          "type": "string"
        },
        {
          "name": "toUser",
          "type": "string"
        },
        {
          "name": "fromUser",
          "type": "string"
        },
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "SipSearchResult"
    },
    "GET /api/v2/telephony/siptraces/download/{downloadId}": {
      "functionName": "GetTelephonySiptracesDownloadDownloadId",
      "signature": "GetTelephonySiptracesDownloadDownloadId(downloadId)",
      "parameters": [
        {
          "name": "downloadId",
          "type": "string"
        }
      ],
      "return": "SignedUrlResponse"
    },
    "POST /api/v2/telephony/siptraces/download": {
      "functionName": "PostTelephonySiptracesDownload",
      "signature": "PostTelephonySiptracesDownload(sIPSearchPublicRequest)",
      "parameters": [
        {
          "name": "sIPSearchPublicRequest",
          "type": "SIPSearchPublicRequest"
        }
      ],
      "return": "SipDownloadResponse"
    }
  },
  "telephonyprovidersedge": {
    "DELETE /api/v2/telephony/providers/edges/{edgeId}": {
      "functionName": "DeleteTelephonyProvidersEdge",
      "signature": "DeleteTelephonyProvidersEdge(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces/{interfaceId}": {
      "functionName": "DeleteTelephonyProvidersEdgeLogicalinterface",
      "signature": "DeleteTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "interfaceId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/{edgeId}/softwareupdate": {
      "functionName": "DeleteTelephonyProvidersEdgeSoftwareupdate",
      "signature": "DeleteTelephonyProvidersEdgeSoftwareupdate(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/certificateauthorities/{certificateId}": {
      "functionName": "DeleteTelephonyProvidersEdgesCertificateauthority",
      "signature": "DeleteTelephonyProvidersEdgesCertificateauthority(certificateId)",
      "parameters": [
        {
          "name": "certificateId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/didpools/{didPoolId}": {
      "functionName": "DeleteTelephonyProvidersEdgesDidpool",
      "signature": "DeleteTelephonyProvidersEdgesDidpool(didPoolId)",
      "parameters": [
        {
          "name": "didPoolId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/edgegroups/{edgeGroupId}": {
      "functionName": "DeleteTelephonyProvidersEdgesEdgegroup",
      "signature": "DeleteTelephonyProvidersEdgesEdgegroup(edgeGroupId)",
      "parameters": [
        {
          "name": "edgeGroupId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/extensionpools/{extensionPoolId}": {
      "functionName": "DeleteTelephonyProvidersEdgesExtensionpool",
      "signature": "DeleteTelephonyProvidersEdgesExtensionpool(extensionPoolId)",
      "parameters": [
        {
          "name": "extensionPoolId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/outboundroutes/{outboundRouteId}": {
      "functionName": "DeleteTelephonyProvidersEdgesOutboundroute",
      "signature": "DeleteTelephonyProvidersEdgesOutboundroute(outboundRouteId)",
      "parameters": [
        {
          "name": "outboundRouteId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/phones/{phoneId}": {
      "functionName": "DeleteTelephonyProvidersEdgesPhone",
      "signature": "DeleteTelephonyProvidersEdgesPhone(phoneId)",
      "parameters": [
        {
          "name": "phoneId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/phonebasesettings/{phoneBaseId}": {
      "functionName": "DeleteTelephonyProvidersEdgesPhonebasesetting",
      "signature": "DeleteTelephonyProvidersEdgesPhonebasesetting(phoneBaseId)",
      "parameters": [
        {
          "name": "phoneBaseId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/sites/{siteId}": {
      "functionName": "DeleteTelephonyProvidersEdgesSite",
      "signature": "DeleteTelephonyProvidersEdgesSite(siteId)",
      "parameters": [
        {
          "name": "siteId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes/{outboundRouteId}": {
      "functionName": "DeleteTelephonyProvidersEdgesSiteOutboundroute",
      "signature": "DeleteTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId)",
      "parameters": [
        {
          "name": "siteId",
          "type": "string"
        },
        {
          "name": "outboundRouteId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/telephony/providers/edges/trunkbasesettings/{trunkBaseSettingsId}": {
      "functionName": "DeleteTelephonyProvidersEdgesTrunkbasesetting",
      "signature": "DeleteTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId)",
      "parameters": [
        {
          "name": "trunkBaseSettingsId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/configuration/schemas/edges/vnext": {
      "functionName": "GetConfigurationSchemasEdgesVnext",
      "signature": "GetConfigurationSchemasEdgesVnext(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "SchemaCategoryEntityListing"
    },
    "GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}": {
      "functionName": "GetConfigurationSchemasEdgesVnextSchemaCategory",
      "signature": "GetConfigurationSchemasEdgesVnextSchemaCategory(schemaCategory, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "schemaCategory",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "SchemaReferenceEntityListing"
    },
    "GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}": {
      "functionName": "GetConfigurationSchemasEdgesVnextSchemaCategorySchemaType",
      "signature": "GetConfigurationSchemasEdgesVnextSchemaCategorySchemaType(schemaCategory, schemaType, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "schemaCategory",
          "type": "string"
        },
        {
          "name": "schemaType",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "SchemaReferenceEntityListing"
    },
    "GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}": {
      "functionName": "GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaId",
      "signature": "GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaId(schemaCategory, schemaType, schemaId)",
      "parameters": [
        {
          "name": "schemaCategory",
          "type": "string"
        },
        {
          "name": "schemaType",
          "type": "string"
        },
        {
          "name": "schemaId",
          "type": "string"
        }
      ],
      "return": "Organization"
    },
    "GET /api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}/{extensionType}/{metadataId}": {
      "functionName": "GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataId",
      "signature": "GetConfigurationSchemasEdgesVnextSchemaCategorySchemaTypeSchemaIdExtensionTypeMetadataId(schemaCategory, schemaType, schemaId, extensionType, metadataId, type)",
      "parameters": [
        {
          "name": "schemaCategory",
          "type": "string"
        },
        {
          "name": "schemaType",
          "type": "string"
        },
        {
          "name": "schemaId",
          "type": "string"
        },
        {
          "name": "extensionType",
          "type": "string"
        },
        {
          "name": "metadataId",
          "type": "string"
        },
        {
          "name": "type",
          "type": "string"
        }
      ],
      "return": "Organization"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}": {
      "functionName": "GetTelephonyProvidersEdge",
      "signature": "GetTelephonyProvidersEdge(edgeId, expand)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "Edge"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/diagnostic/nslookup": {
      "functionName": "GetTelephonyProvidersEdgeDiagnosticNslookup",
      "signature": "GetTelephonyProvidersEdgeDiagnosticNslookup(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        }
      ],
      "return": "EdgeNetworkDiagnosticResponse"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/diagnostic/ping": {
      "functionName": "GetTelephonyProvidersEdgeDiagnosticPing",
      "signature": "GetTelephonyProvidersEdgeDiagnosticPing(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        }
      ],
      "return": "EdgeNetworkDiagnosticResponse"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/diagnostic/route": {
      "functionName": "GetTelephonyProvidersEdgeDiagnosticRoute",
      "signature": "GetTelephonyProvidersEdgeDiagnosticRoute(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        }
      ],
      "return": "EdgeNetworkDiagnosticResponse"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/diagnostic/tracepath": {
      "functionName": "GetTelephonyProvidersEdgeDiagnosticTracepath",
      "signature": "GetTelephonyProvidersEdgeDiagnosticTracepath(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        }
      ],
      "return": "EdgeNetworkDiagnosticResponse"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/lines/{lineId}": {
      "functionName": "GetTelephonyProvidersEdgeLine",
      "signature": "GetTelephonyProvidersEdgeLine(edgeId, lineId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "lineId",
          "type": "string"
        }
      ],
      "return": "EdgeLine"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/lines": {
      "functionName": "GetTelephonyProvidersEdgeLines",
      "signature": "GetTelephonyProvidersEdgeLines(edgeId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "EdgeLineEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces/{interfaceId}": {
      "functionName": "GetTelephonyProvidersEdgeLogicalinterface",
      "signature": "GetTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId, expand)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "interfaceId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "DomainLogicalInterface"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces": {
      "functionName": "GetTelephonyProvidersEdgeLogicalinterfaces",
      "signature": "GetTelephonyProvidersEdgeLogicalinterfaces(edgeId, expand)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "LogicalInterfaceEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/logs/jobs/{jobId}": {
      "functionName": "GetTelephonyProvidersEdgeLogsJob",
      "signature": "GetTelephonyProvidersEdgeLogsJob(edgeId, jobId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "jobId",
          "type": "string"
        }
      ],
      "return": "EdgeLogsJob"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/metrics": {
      "functionName": "GetTelephonyProvidersEdgeMetrics",
      "signature": "GetTelephonyProvidersEdgeMetrics(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        }
      ],
      "return": "EdgeMetrics"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/physicalinterfaces/{interfaceId}": {
      "functionName": "GetTelephonyProvidersEdgePhysicalinterface",
      "signature": "GetTelephonyProvidersEdgePhysicalinterface(edgeId, interfaceId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "interfaceId",
          "type": "string"
        }
      ],
      "return": "DomainPhysicalInterface"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/physicalinterfaces": {
      "functionName": "GetTelephonyProvidersEdgePhysicalinterfaces",
      "signature": "GetTelephonyProvidersEdgePhysicalinterfaces(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        }
      ],
      "return": "PhysicalInterfaceEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/setuppackage": {
      "functionName": "GetTelephonyProvidersEdgeSetuppackage",
      "signature": "GetTelephonyProvidersEdgeSetuppackage(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        }
      ],
      "return": "VmPairingInfo"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/softwareupdate": {
      "functionName": "GetTelephonyProvidersEdgeSoftwareupdate",
      "signature": "GetTelephonyProvidersEdgeSoftwareupdate(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        }
      ],
      "return": "DomainEdgeSoftwareUpdateDto"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/softwareversions": {
      "functionName": "GetTelephonyProvidersEdgeSoftwareversions",
      "signature": "GetTelephonyProvidersEdgeSoftwareversions(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        }
      ],
      "return": "DomainEdgeSoftwareVersionDtoEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/{edgeId}/trunks": {
      "functionName": "GetTelephonyProvidersEdgeTrunks",
      "signature": "GetTelephonyProvidersEdgeTrunks(edgeId, pageNumber, pageSize, sortBy, sortOrder, trunkBaseId, trunkType)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "trunkBaseId",
          "type": "string"
        },
        {
          "name": "trunkType",
          "type": "string"
        }
      ],
      "return": "TrunkEntityListing"
    },
    "GET /api/v2/telephony/providers/edges": {
      "functionName": "GetTelephonyProvidersEdges",
      "signature": "GetTelephonyProvidersEdges(pageSize, pageNumber, name, siteId, edgeGroupId, sortBy, managed)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "siteId",
          "type": "string"
        },
        {
          "name": "edgeGroupId",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "managed",
          "type": "bool?"
        }
      ],
      "return": "EdgeEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/availablelanguages": {
      "functionName": "GetTelephonyProvidersEdgesAvailablelanguages",
      "signature": "GetTelephonyProvidersEdgesAvailablelanguages()",
      "return": "AvailableLanguageList"
    },
    "GET /api/v2/telephony/providers/edges/certificateauthorities": {
      "functionName": "GetTelephonyProvidersEdgesCertificateauthorities",
      "signature": "GetTelephonyProvidersEdgesCertificateauthorities()",
      "return": "CertificateAuthorityEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/certificateauthorities/{certificateId}": {
      "functionName": "GetTelephonyProvidersEdgesCertificateauthority",
      "signature": "GetTelephonyProvidersEdgesCertificateauthority(certificateId)",
      "parameters": [
        {
          "name": "certificateId",
          "type": "string"
        }
      ],
      "return": "DomainCertificateAuthority"
    },
    "GET /api/v2/telephony/providers/edges/dids/{didId}": {
      "functionName": "GetTelephonyProvidersEdgesDid",
      "signature": "GetTelephonyProvidersEdgesDid(didId)",
      "parameters": [
        {
          "name": "didId",
          "type": "string"
        }
      ],
      "return": "DID"
    },
    "GET /api/v2/telephony/providers/edges/didpools/{didPoolId}": {
      "functionName": "GetTelephonyProvidersEdgesDidpool",
      "signature": "GetTelephonyProvidersEdgesDidpool(didPoolId)",
      "parameters": [
        {
          "name": "didPoolId",
          "type": "string"
        }
      ],
      "return": "DIDPool"
    },
    "GET /api/v2/telephony/providers/edges/didpools": {
      "functionName": "GetTelephonyProvidersEdgesDidpools",
      "signature": "GetTelephonyProvidersEdgesDidpools(pageSize, pageNumber, sortBy, id)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "DIDPoolEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/didpools/dids": {
      "functionName": "GetTelephonyProvidersEdgesDidpoolsDids",
      "signature": "GetTelephonyProvidersEdgesDidpoolsDids(type, id, numberMatch, pageSize, pageNumber, sortOrder)",
      "parameters": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "numberMatch",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "DIDNumberEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/dids": {
      "functionName": "GetTelephonyProvidersEdgesDids",
      "signature": "GetTelephonyProvidersEdgesDids(pageSize, pageNumber, sortBy, sortOrder, phoneNumber, ownerId, didPoolId, id)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "phoneNumber",
          "type": "string"
        },
        {
          "name": "ownerId",
          "type": "string"
        },
        {
          "name": "didPoolId",
          "type": "string"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "DIDEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/edgegroups/{edgeGroupId}": {
      "functionName": "GetTelephonyProvidersEdgesEdgegroup",
      "signature": "GetTelephonyProvidersEdgesEdgegroup(edgeGroupId, expand)",
      "parameters": [
        {
          "name": "edgeGroupId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "EdgeGroup"
    },
    "GET /api/v2/telephony/providers/edges/edgegroups/{edgegroupId}/edgetrunkbases/{edgetrunkbaseId}": {
      "functionName": "GetTelephonyProvidersEdgesEdgegroupEdgetrunkbase",
      "signature": "GetTelephonyProvidersEdgesEdgegroupEdgetrunkbase(edgegroupId, edgetrunkbaseId)",
      "parameters": [
        {
          "name": "edgegroupId",
          "type": "string"
        },
        {
          "name": "edgetrunkbaseId",
          "type": "string"
        }
      ],
      "return": "EdgeTrunkBase"
    },
    "GET /api/v2/telephony/providers/edges/edgegroups": {
      "functionName": "GetTelephonyProvidersEdgesEdgegroups",
      "signature": "GetTelephonyProvidersEdgesEdgegroups(pageSize, pageNumber, name, sortBy, managed)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "managed",
          "type": "bool?"
        }
      ],
      "return": "EdgeGroupEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/edgeversionreport": {
      "functionName": "GetTelephonyProvidersEdgesEdgeversionreport",
      "signature": "GetTelephonyProvidersEdgesEdgeversionreport()",
      "return": "EdgeVersionReport"
    },
    "GET /api/v2/telephony/providers/edges/expired": {
      "functionName": "GetTelephonyProvidersEdgesExpired",
      "signature": "GetTelephonyProvidersEdgesExpired()",
      "return": "ExpiredEdgeListing"
    },
    "GET /api/v2/telephony/providers/edges/extensions/{extensionId}": {
      "functionName": "GetTelephonyProvidersEdgesExtension",
      "signature": "GetTelephonyProvidersEdgesExtension(extensionId)",
      "parameters": [
        {
          "name": "extensionId",
          "type": "string"
        }
      ],
      "return": "Extension"
    },
    "GET /api/v2/telephony/providers/edges/extensionpools/{extensionPoolId}": {
      "functionName": "GetTelephonyProvidersEdgesExtensionpool",
      "signature": "GetTelephonyProvidersEdgesExtensionpool(extensionPoolId)",
      "parameters": [
        {
          "name": "extensionPoolId",
          "type": "string"
        }
      ],
      "return": "ExtensionPool"
    },
    "GET /api/v2/telephony/providers/edges/extensionpools": {
      "functionName": "GetTelephonyProvidersEdgesExtensionpools",
      "signature": "GetTelephonyProvidersEdgesExtensionpools(pageSize, pageNumber, sortBy, number)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "number",
          "type": "string"
        }
      ],
      "return": "ExtensionPoolEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/extensions": {
      "functionName": "GetTelephonyProvidersEdgesExtensions",
      "signature": "GetTelephonyProvidersEdgesExtensions(pageSize, pageNumber, sortBy, sortOrder, number)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "number",
          "type": "string"
        }
      ],
      "return": "ExtensionEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/lines/{lineId}": {
      "functionName": "GetTelephonyProvidersEdgesLine",
      "signature": "GetTelephonyProvidersEdgesLine(lineId)",
      "parameters": [
        {
          "name": "lineId",
          "type": "string"
        }
      ],
      "return": "Line"
    },
    "GET /api/v2/telephony/providers/edges/linebasesettings/{lineBaseId}": {
      "functionName": "GetTelephonyProvidersEdgesLinebasesetting",
      "signature": "GetTelephonyProvidersEdgesLinebasesetting(lineBaseId)",
      "parameters": [
        {
          "name": "lineBaseId",
          "type": "string"
        }
      ],
      "return": "LineBase"
    },
    "GET /api/v2/telephony/providers/edges/linebasesettings": {
      "functionName": "GetTelephonyProvidersEdgesLinebasesettings",
      "signature": "GetTelephonyProvidersEdgesLinebasesettings(pageNumber, pageSize, sortBy, sortOrder, expand)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "LineBaseEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/lines": {
      "functionName": "GetTelephonyProvidersEdgesLines",
      "signature": "GetTelephonyProvidersEdgesLines(pageSize, pageNumber, name, sortBy, expand)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "LineEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/lines/template": {
      "functionName": "GetTelephonyProvidersEdgesLinesTemplate",
      "signature": "GetTelephonyProvidersEdgesLinesTemplate(lineBaseSettingsId)",
      "parameters": [
        {
          "name": "lineBaseSettingsId",
          "type": "string"
        }
      ],
      "return": "Line"
    },
    "GET /api/v2/telephony/providers/edges/logicalinterfaces": {
      "functionName": "GetTelephonyProvidersEdgesLogicalinterfaces",
      "signature": "GetTelephonyProvidersEdgesLogicalinterfaces(edgeIds, expand)",
      "parameters": [
        {
          "name": "edgeIds",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "LogicalInterfaceEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/metrics": {
      "functionName": "GetTelephonyProvidersEdgesMetrics",
      "signature": "GetTelephonyProvidersEdgesMetrics(edgeIds)",
      "parameters": [
        {
          "name": "edgeIds",
          "type": "string"
        }
      ],
      "return": "List&lt;EdgeMetrics&gt;"
    },
    "GET /api/v2/telephony/providers/edges/outboundroutes/{outboundRouteId}": {
      "functionName": "GetTelephonyProvidersEdgesOutboundroute",
      "signature": "GetTelephonyProvidersEdgesOutboundroute(outboundRouteId)",
      "parameters": [
        {
          "name": "outboundRouteId",
          "type": "string"
        }
      ],
      "return": "OutboundRoute"
    },
    "GET /api/v2/telephony/providers/edges/outboundroutes": {
      "functionName": "GetTelephonyProvidersEdgesOutboundroutes",
      "signature": "GetTelephonyProvidersEdgesOutboundroutes(pageSize, pageNumber, name, siteId, externalTrunkBasesIds, sortBy)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "siteId",
          "type": "string"
        },
        {
          "name": "externalTrunkBasesIds",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        }
      ],
      "return": "OutboundRouteEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/phones/{phoneId}": {
      "functionName": "GetTelephonyProvidersEdgesPhone",
      "signature": "GetTelephonyProvidersEdgesPhone(phoneId)",
      "parameters": [
        {
          "name": "phoneId",
          "type": "string"
        }
      ],
      "return": "Phone"
    },
    "GET /api/v2/telephony/providers/edges/phonebasesettings/{phoneBaseId}": {
      "functionName": "GetTelephonyProvidersEdgesPhonebasesetting",
      "signature": "GetTelephonyProvidersEdgesPhonebasesetting(phoneBaseId)",
      "parameters": [
        {
          "name": "phoneBaseId",
          "type": "string"
        }
      ],
      "return": "PhoneBase"
    },
    "GET /api/v2/telephony/providers/edges/phonebasesettings": {
      "functionName": "GetTelephonyProvidersEdgesPhonebasesettings",
      "signature": "GetTelephonyProvidersEdgesPhonebasesettings(pageSize, pageNumber, sortBy, sortOrder, expand, name)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "name",
          "type": "string"
        }
      ],
      "return": "PhoneBaseEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/phonebasesettings/availablemetabases": {
      "functionName": "GetTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases",
      "signature": "GetTelephonyProvidersEdgesPhonebasesettingsAvailablemetabases(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "PhoneMetaBaseEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/phonebasesettings/template": {
      "functionName": "GetTelephonyProvidersEdgesPhonebasesettingsTemplate",
      "signature": "GetTelephonyProvidersEdgesPhonebasesettingsTemplate(phoneMetabaseId)",
      "parameters": [
        {
          "name": "phoneMetabaseId",
          "type": "string"
        }
      ],
      "return": "PhoneBase"
    },
    "GET /api/v2/telephony/providers/edges/phones": {
      "functionName": "GetTelephonyProvidersEdgesPhones",
      "signature": "GetTelephonyProvidersEdgesPhones(pageNumber, pageSize, sortBy, sortOrder, siteId, webRtcUserId, phoneBaseSettingsId, linesLoggedInUserId, linesDefaultForUserId, phoneHardwareId, linesId, linesName, name, statusOperationalStatus, secondaryStatusOperationalStatus, expand, fields)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "siteId",
          "type": "string"
        },
        {
          "name": "webRtcUserId",
          "type": "string"
        },
        {
          "name": "phoneBaseSettingsId",
          "type": "string"
        },
        {
          "name": "linesLoggedInUserId",
          "type": "string"
        },
        {
          "name": "linesDefaultForUserId",
          "type": "string"
        },
        {
          "name": "phoneHardwareId",
          "type": "string"
        },
        {
          "name": "linesId",
          "type": "string"
        },
        {
          "name": "linesName",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "statusOperationalStatus",
          "type": "string"
        },
        {
          "name": "secondaryStatusOperationalStatus",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "fields",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "PhoneEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/phones/template": {
      "functionName": "GetTelephonyProvidersEdgesPhonesTemplate",
      "signature": "GetTelephonyProvidersEdgesPhonesTemplate(phoneBaseSettingsId)",
      "parameters": [
        {
          "name": "phoneBaseSettingsId",
          "type": "string"
        }
      ],
      "return": "Phone"
    },
    "GET /api/v2/telephony/providers/edges/physicalinterfaces": {
      "functionName": "GetTelephonyProvidersEdgesPhysicalinterfaces",
      "signature": "GetTelephonyProvidersEdgesPhysicalinterfaces(edgeIds)",
      "parameters": [
        {
          "name": "edgeIds",
          "type": "string"
        }
      ],
      "return": "PhysicalInterfaceEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/sites/{siteId}": {
      "functionName": "GetTelephonyProvidersEdgesSite",
      "signature": "GetTelephonyProvidersEdgesSite(siteId)",
      "parameters": [
        {
          "name": "siteId",
          "type": "string"
        }
      ],
      "return": "Site"
    },
    "GET /api/v2/telephony/providers/edges/sites/{siteId}/numberplans/{numberPlanId}": {
      "functionName": "GetTelephonyProvidersEdgesSiteNumberplan",
      "signature": "GetTelephonyProvidersEdgesSiteNumberplan(siteId, numberPlanId)",
      "parameters": [
        {
          "name": "siteId",
          "type": "string"
        },
        {
          "name": "numberPlanId",
          "type": "string"
        }
      ],
      "return": "NumberPlan"
    },
    "GET /api/v2/telephony/providers/edges/sites/{siteId}/numberplans": {
      "functionName": "GetTelephonyProvidersEdgesSiteNumberplans",
      "signature": "GetTelephonyProvidersEdgesSiteNumberplans(siteId)",
      "parameters": [
        {
          "name": "siteId",
          "type": "string"
        }
      ],
      "return": "List&lt;NumberPlan&gt;"
    },
    "GET /api/v2/telephony/providers/edges/sites/{siteId}/numberplans/classifications": {
      "functionName": "GetTelephonyProvidersEdgesSiteNumberplansClassifications",
      "signature": "GetTelephonyProvidersEdgesSiteNumberplansClassifications(siteId, classification)",
      "parameters": [
        {
          "name": "siteId",
          "type": "string"
        },
        {
          "name": "classification",
          "type": "string"
        }
      ],
      "return": "List&lt;string&gt;"
    },
    "GET /api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes/{outboundRouteId}": {
      "functionName": "GetTelephonyProvidersEdgesSiteOutboundroute",
      "signature": "GetTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId)",
      "parameters": [
        {
          "name": "siteId",
          "type": "string"
        },
        {
          "name": "outboundRouteId",
          "type": "string"
        }
      ],
      "return": "OutboundRouteBase"
    },
    "GET /api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes": {
      "functionName": "GetTelephonyProvidersEdgesSiteOutboundroutes",
      "signature": "GetTelephonyProvidersEdgesSiteOutboundroutes(siteId, pageSize, pageNumber, name, externalTrunkBasesIds, sortBy)",
      "parameters": [
        {
          "name": "siteId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "externalTrunkBasesIds",
          "type": "string"
        },
        {
          "name": "sortBy",
          "type": "string"
        }
      ],
      "return": "OutboundRouteBaseEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/sites": {
      "functionName": "GetTelephonyProvidersEdgesSites",
      "signature": "GetTelephonyProvidersEdgesSites(pageSize, pageNumber, sortBy, sortOrder, name, locationId, managed)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "locationId",
          "type": "string"
        },
        {
          "name": "managed",
          "type": "bool?"
        }
      ],
      "return": "SiteEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/timezones": {
      "functionName": "GetTelephonyProvidersEdgesTimezones",
      "signature": "GetTelephonyProvidersEdgesTimezones(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "TimeZoneEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/trunks/{trunkId}": {
      "functionName": "GetTelephonyProvidersEdgesTrunk",
      "signature": "GetTelephonyProvidersEdgesTrunk(trunkId)",
      "parameters": [
        {
          "name": "trunkId",
          "type": "string"
        }
      ],
      "return": "Trunk"
    },
    "GET /api/v2/telephony/providers/edges/trunks/{trunkId}/metrics": {
      "functionName": "GetTelephonyProvidersEdgesTrunkMetrics",
      "signature": "GetTelephonyProvidersEdgesTrunkMetrics(trunkId)",
      "parameters": [
        {
          "name": "trunkId",
          "type": "string"
        }
      ],
      "return": "TrunkMetrics"
    },
    "GET /api/v2/telephony/providers/edges/trunkbasesettings/{trunkBaseSettingsId}": {
      "functionName": "GetTelephonyProvidersEdgesTrunkbasesetting",
      "signature": "GetTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId, ignoreHidden)",
      "parameters": [
        {
          "name": "trunkBaseSettingsId",
          "type": "string"
        },
        {
          "name": "ignoreHidden",
          "type": "bool?"
        }
      ],
      "return": "TrunkBase"
    },
    "GET /api/v2/telephony/providers/edges/trunkbasesettings": {
      "functionName": "GetTelephonyProvidersEdgesTrunkbasesettings",
      "signature": "GetTelephonyProvidersEdgesTrunkbasesettings(pageNumber, pageSize, sortBy, sortOrder, recordingEnabled, ignoreHidden, managed, expand, name)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "recordingEnabled",
          "type": "bool?"
        },
        {
          "name": "ignoreHidden",
          "type": "bool?"
        },
        {
          "name": "managed",
          "type": "bool?"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "name",
          "type": "string"
        }
      ],
      "return": "TrunkBaseEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/trunkbasesettings/availablemetabases": {
      "functionName": "GetTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases",
      "signature": "GetTelephonyProvidersEdgesTrunkbasesettingsAvailablemetabases(type, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "TrunkMetabaseEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/trunkbasesettings/template": {
      "functionName": "GetTelephonyProvidersEdgesTrunkbasesettingsTemplate",
      "signature": "GetTelephonyProvidersEdgesTrunkbasesettingsTemplate(trunkMetabaseId)",
      "parameters": [
        {
          "name": "trunkMetabaseId",
          "type": "string"
        }
      ],
      "return": "TrunkBase"
    },
    "GET /api/v2/telephony/providers/edges/trunks": {
      "functionName": "GetTelephonyProvidersEdgesTrunks",
      "signature": "GetTelephonyProvidersEdgesTrunks(pageNumber, pageSize, sortBy, sortOrder, edgeId, trunkBaseId, trunkType)",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "sortBy",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "trunkBaseId",
          "type": "string"
        },
        {
          "name": "trunkType",
          "type": "string"
        }
      ],
      "return": "TrunkEntityListing"
    },
    "GET /api/v2/telephony/providers/edges/trunks/metrics": {
      "functionName": "GetTelephonyProvidersEdgesTrunksMetrics",
      "signature": "GetTelephonyProvidersEdgesTrunksMetrics(trunkIds)",
      "parameters": [
        {
          "name": "trunkIds",
          "type": "string"
        }
      ],
      "return": "List&lt;TrunkMetrics&gt;"
    },
    "GET /api/v2/telephony/providers/edges/trunkswithrecording": {
      "functionName": "GetTelephonyProvidersEdgesTrunkswithrecording",
      "signature": "GetTelephonyProvidersEdgesTrunkswithrecording(trunkType)",
      "parameters": [
        {
          "name": "trunkType",
          "type": "string"
        }
      ],
      "return": "TrunkRecordingEnabledCount"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/diagnostic/nslookup": {
      "functionName": "PostTelephonyProvidersEdgeDiagnosticNslookup",
      "signature": "PostTelephonyProvidersEdgeDiagnosticNslookup(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "EdgeNetworkDiagnosticRequest"
        }
      ],
      "return": "EdgeNetworkDiagnostic"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/diagnostic/ping": {
      "functionName": "PostTelephonyProvidersEdgeDiagnosticPing",
      "signature": "PostTelephonyProvidersEdgeDiagnosticPing(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "EdgeNetworkDiagnosticRequest"
        }
      ],
      "return": "EdgeNetworkDiagnostic"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/diagnostic/route": {
      "functionName": "PostTelephonyProvidersEdgeDiagnosticRoute",
      "signature": "PostTelephonyProvidersEdgeDiagnosticRoute(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "EdgeNetworkDiagnosticRequest"
        }
      ],
      "return": "EdgeNetworkDiagnostic"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/diagnostic/tracepath": {
      "functionName": "PostTelephonyProvidersEdgeDiagnosticTracepath",
      "signature": "PostTelephonyProvidersEdgeDiagnosticTracepath(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "EdgeNetworkDiagnosticRequest"
        }
      ],
      "return": "EdgeNetworkDiagnostic"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces": {
      "functionName": "PostTelephonyProvidersEdgeLogicalinterfaces",
      "signature": "PostTelephonyProvidersEdgeLogicalinterfaces(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DomainLogicalInterface"
        }
      ],
      "return": "DomainLogicalInterface"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/logs/jobs/{jobId}/upload": {
      "functionName": "PostTelephonyProvidersEdgeLogsJobUpload",
      "signature": "PostTelephonyProvidersEdgeLogsJobUpload(edgeId, jobId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "jobId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "EdgeLogsJobUploadRequest"
        }
      ]
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/logs/jobs": {
      "functionName": "PostTelephonyProvidersEdgeLogsJobs",
      "signature": "PostTelephonyProvidersEdgeLogsJobs(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "EdgeLogsJobRequest"
        }
      ],
      "return": "EdgeLogsJobResponse"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/reboot": {
      "functionName": "PostTelephonyProvidersEdgeReboot",
      "signature": "PostTelephonyProvidersEdgeReboot(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "EdgeRebootParameters"
        }
      ],
      "return": "string"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/softwareupdate": {
      "functionName": "PostTelephonyProvidersEdgeSoftwareupdate",
      "signature": "PostTelephonyProvidersEdgeSoftwareupdate(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DomainEdgeSoftwareUpdateDto"
        }
      ],
      "return": "DomainEdgeSoftwareUpdateDto"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/statuscode": {
      "functionName": "PostTelephonyProvidersEdgeStatuscode",
      "signature": "PostTelephonyProvidersEdgeStatuscode(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "EdgeServiceStateRequest"
        }
      ],
      "return": "string"
    },
    "POST /api/v2/telephony/providers/edges/{edgeId}/unpair": {
      "functionName": "PostTelephonyProvidersEdgeUnpair",
      "signature": "PostTelephonyProvidersEdgeUnpair(edgeId)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        }
      ],
      "return": "string"
    },
    "POST /api/v2/telephony/providers/edges": {
      "functionName": "PostTelephonyProvidersEdges",
      "signature": "PostTelephonyProvidersEdges(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Edge"
        }
      ],
      "return": "Edge"
    },
    "POST /api/v2/telephony/providers/edges/addressvalidation": {
      "functionName": "PostTelephonyProvidersEdgesAddressvalidation",
      "signature": "PostTelephonyProvidersEdgesAddressvalidation(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ValidateAddressRequest"
        }
      ],
      "return": "ValidateAddressResponse"
    },
    "POST /api/v2/telephony/providers/edges/certificateauthorities": {
      "functionName": "PostTelephonyProvidersEdgesCertificateauthorities",
      "signature": "PostTelephonyProvidersEdgesCertificateauthorities(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DomainCertificateAuthority"
        }
      ],
      "return": "DomainCertificateAuthority"
    },
    "POST /api/v2/telephony/providers/edges/didpools": {
      "functionName": "PostTelephonyProvidersEdgesDidpools",
      "signature": "PostTelephonyProvidersEdgesDidpools(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DIDPool"
        }
      ],
      "return": "DIDPool"
    },
    "POST /api/v2/telephony/providers/edges/edgegroups": {
      "functionName": "PostTelephonyProvidersEdgesEdgegroups",
      "signature": "PostTelephonyProvidersEdgesEdgegroups(body)",
      "parameters": [
        {
          "name": "body",
          "type": "EdgeGroup"
        }
      ],
      "return": "EdgeGroup"
    },
    "POST /api/v2/telephony/providers/edges/extensionpools": {
      "functionName": "PostTelephonyProvidersEdgesExtensionpools",
      "signature": "PostTelephonyProvidersEdgesExtensionpools(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ExtensionPool"
        }
      ],
      "return": "ExtensionPool"
    },
    "POST /api/v2/telephony/providers/edges/outboundroutes": {
      "functionName": "PostTelephonyProvidersEdgesOutboundroutes",
      "signature": "PostTelephonyProvidersEdgesOutboundroutes(body)",
      "parameters": [
        {
          "name": "body",
          "type": "OutboundRoute"
        }
      ],
      "return": "OutboundRoute"
    },
    "POST /api/v2/telephony/providers/edges/phones/{phoneId}/reboot": {
      "functionName": "PostTelephonyProvidersEdgesPhoneReboot",
      "signature": "PostTelephonyProvidersEdgesPhoneReboot(phoneId)",
      "parameters": [
        {
          "name": "phoneId",
          "type": "string"
        }
      ]
    },
    "POST /api/v2/telephony/providers/edges/phonebasesettings": {
      "functionName": "PostTelephonyProvidersEdgesPhonebasesettings",
      "signature": "PostTelephonyProvidersEdgesPhonebasesettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PhoneBase"
        }
      ],
      "return": "PhoneBase"
    },
    "POST /api/v2/telephony/providers/edges/phones": {
      "functionName": "PostTelephonyProvidersEdgesPhones",
      "signature": "PostTelephonyProvidersEdgesPhones(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Phone"
        }
      ],
      "return": "Phone"
    },
    "POST /api/v2/telephony/providers/edges/phones/reboot": {
      "functionName": "PostTelephonyProvidersEdgesPhonesReboot",
      "signature": "PostTelephonyProvidersEdgesPhonesReboot(body)",
      "parameters": [
        {
          "name": "body",
          "type": "PhonesReboot"
        }
      ]
    },
    "POST /api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes": {
      "functionName": "PostTelephonyProvidersEdgesSiteOutboundroutes",
      "signature": "PostTelephonyProvidersEdgesSiteOutboundroutes(siteId, body)",
      "parameters": [
        {
          "name": "siteId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "OutboundRouteBase"
        }
      ],
      "return": "OutboundRouteBase"
    },
    "POST /api/v2/telephony/providers/edges/sites/{siteId}/rebalance": {
      "functionName": "PostTelephonyProvidersEdgesSiteRebalance",
      "signature": "PostTelephonyProvidersEdgesSiteRebalance(siteId)",
      "parameters": [
        {
          "name": "siteId",
          "type": "string"
        }
      ]
    },
    "POST /api/v2/telephony/providers/edges/sites": {
      "functionName": "PostTelephonyProvidersEdgesSites",
      "signature": "PostTelephonyProvidersEdgesSites(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Site"
        }
      ],
      "return": "Site"
    },
    "POST /api/v2/telephony/providers/edges/trunkbasesettings": {
      "functionName": "PostTelephonyProvidersEdgesTrunkbasesettings",
      "signature": "PostTelephonyProvidersEdgesTrunkbasesettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "TrunkBase"
        }
      ],
      "return": "TrunkBase"
    },
    "PUT /api/v2/telephony/providers/edges/{edgeId}": {
      "functionName": "PutTelephonyProvidersEdge",
      "signature": "PutTelephonyProvidersEdge(edgeId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Edge"
        }
      ],
      "return": "Edge"
    },
    "PUT /api/v2/telephony/providers/edges/{edgeId}/lines/{lineId}": {
      "functionName": "PutTelephonyProvidersEdgeLine",
      "signature": "PutTelephonyProvidersEdgeLine(edgeId, lineId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "lineId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "EdgeLine"
        }
      ],
      "return": "EdgeLine"
    },
    "PUT /api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces/{interfaceId}": {
      "functionName": "PutTelephonyProvidersEdgeLogicalinterface",
      "signature": "PutTelephonyProvidersEdgeLogicalinterface(edgeId, interfaceId, body)",
      "parameters": [
        {
          "name": "edgeId",
          "type": "string"
        },
        {
          "name": "interfaceId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DomainLogicalInterface"
        }
      ],
      "return": "DomainLogicalInterface"
    },
    "PUT /api/v2/telephony/providers/edges/certificateauthorities/{certificateId}": {
      "functionName": "PutTelephonyProvidersEdgesCertificateauthority",
      "signature": "PutTelephonyProvidersEdgesCertificateauthority(certificateId, body)",
      "parameters": [
        {
          "name": "certificateId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DomainCertificateAuthority"
        }
      ],
      "return": "DomainCertificateAuthority"
    },
    "PUT /api/v2/telephony/providers/edges/dids/{didId}": {
      "functionName": "PutTelephonyProvidersEdgesDid",
      "signature": "PutTelephonyProvidersEdgesDid(didId, body)",
      "parameters": [
        {
          "name": "didId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DID"
        }
      ],
      "return": "DID"
    },
    "PUT /api/v2/telephony/providers/edges/didpools/{didPoolId}": {
      "functionName": "PutTelephonyProvidersEdgesDidpool",
      "signature": "PutTelephonyProvidersEdgesDidpool(didPoolId, body)",
      "parameters": [
        {
          "name": "didPoolId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "DIDPool"
        }
      ],
      "return": "DIDPool"
    },
    "PUT /api/v2/telephony/providers/edges/edgegroups/{edgeGroupId}": {
      "functionName": "PutTelephonyProvidersEdgesEdgegroup",
      "signature": "PutTelephonyProvidersEdgesEdgegroup(edgeGroupId, body)",
      "parameters": [
        {
          "name": "edgeGroupId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "EdgeGroup"
        }
      ],
      "return": "EdgeGroup"
    },
    "PUT /api/v2/telephony/providers/edges/edgegroups/{edgegroupId}/edgetrunkbases/{edgetrunkbaseId}": {
      "functionName": "PutTelephonyProvidersEdgesEdgegroupEdgetrunkbase",
      "signature": "PutTelephonyProvidersEdgesEdgegroupEdgetrunkbase(edgegroupId, edgetrunkbaseId, body)",
      "parameters": [
        {
          "name": "edgegroupId",
          "type": "string"
        },
        {
          "name": "edgetrunkbaseId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "EdgeTrunkBase"
        }
      ],
      "return": "EdgeTrunkBase"
    },
    "PUT /api/v2/telephony/providers/edges/extensions/{extensionId}": {
      "functionName": "PutTelephonyProvidersEdgesExtension",
      "signature": "PutTelephonyProvidersEdgesExtension(extensionId, body)",
      "parameters": [
        {
          "name": "extensionId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Extension"
        }
      ],
      "return": "Extension"
    },
    "PUT /api/v2/telephony/providers/edges/extensionpools/{extensionPoolId}": {
      "functionName": "PutTelephonyProvidersEdgesExtensionpool",
      "signature": "PutTelephonyProvidersEdgesExtensionpool(extensionPoolId, body)",
      "parameters": [
        {
          "name": "extensionPoolId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ExtensionPool"
        }
      ],
      "return": "ExtensionPool"
    },
    "PUT /api/v2/telephony/providers/edges/outboundroutes/{outboundRouteId}": {
      "functionName": "PutTelephonyProvidersEdgesOutboundroute",
      "signature": "PutTelephonyProvidersEdgesOutboundroute(outboundRouteId, body)",
      "parameters": [
        {
          "name": "outboundRouteId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "OutboundRoute"
        }
      ],
      "return": "OutboundRoute"
    },
    "PUT /api/v2/telephony/providers/edges/phones/{phoneId}": {
      "functionName": "PutTelephonyProvidersEdgesPhone",
      "signature": "PutTelephonyProvidersEdgesPhone(phoneId, body)",
      "parameters": [
        {
          "name": "phoneId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Phone"
        }
      ],
      "return": "Phone"
    },
    "PUT /api/v2/telephony/providers/edges/phonebasesettings/{phoneBaseId}": {
      "functionName": "PutTelephonyProvidersEdgesPhonebasesetting",
      "signature": "PutTelephonyProvidersEdgesPhonebasesetting(phoneBaseId, body)",
      "parameters": [
        {
          "name": "phoneBaseId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "PhoneBase"
        }
      ],
      "return": "PhoneBase"
    },
    "PUT /api/v2/telephony/providers/edges/sites/{siteId}": {
      "functionName": "PutTelephonyProvidersEdgesSite",
      "signature": "PutTelephonyProvidersEdgesSite(siteId, body)",
      "parameters": [
        {
          "name": "siteId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Site"
        }
      ],
      "return": "Site"
    },
    "PUT /api/v2/telephony/providers/edges/sites/{siteId}/numberplans": {
      "functionName": "PutTelephonyProvidersEdgesSiteNumberplans",
      "signature": "PutTelephonyProvidersEdgesSiteNumberplans(siteId, body)",
      "parameters": [
        {
          "name": "siteId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;NumberPlan&gt;"
        }
      ],
      "return": "List&lt;NumberPlan&gt;"
    },
    "PUT /api/v2/telephony/providers/edges/sites/{siteId}/outboundroutes/{outboundRouteId}": {
      "functionName": "PutTelephonyProvidersEdgesSiteOutboundroute",
      "signature": "PutTelephonyProvidersEdgesSiteOutboundroute(siteId, outboundRouteId, body)",
      "parameters": [
        {
          "name": "siteId",
          "type": "string"
        },
        {
          "name": "outboundRouteId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "OutboundRouteBase"
        }
      ],
      "return": "OutboundRouteBase"
    },
    "PUT /api/v2/telephony/providers/edges/trunkbasesettings/{trunkBaseSettingsId}": {
      "functionName": "PutTelephonyProvidersEdgesTrunkbasesetting",
      "signature": "PutTelephonyProvidersEdgesTrunkbasesetting(trunkBaseSettingsId, body)",
      "parameters": [
        {
          "name": "trunkBaseSettingsId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "TrunkBase"
        }
      ],
      "return": "TrunkBase"
    }
  },
  "textbots": {
    "GET /api/v2/textbots/bots/search": {
      "functionName": "GetTextbotsBotsSearch",
      "signature": "GetTextbotsBotsSearch(botType, botName, botId, pageSize)",
      "parameters": [
        {
          "name": "botType",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "botName",
          "type": "string"
        },
        {
          "name": "botId",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "BotSearchResponseEntityListing"
    },
    "POST /api/v2/textbots/botflows/sessions/{sessionId}/turns": {
      "functionName": "PostTextbotsBotflowsSessionTurns",
      "signature": "PostTextbotsBotflowsSessionTurns(sessionId, turnRequest)",
      "parameters": [
        {
          "name": "sessionId",
          "type": "string"
        },
        {
          "name": "turnRequest",
          "type": "TextBotFlowTurnRequest"
        }
      ],
      "return": "TextBotFlowTurnResponse"
    },
    "POST /api/v2/textbots/botflows/sessions": {
      "functionName": "PostTextbotsBotflowsSessions",
      "signature": "PostTextbotsBotflowsSessions(launchRequest)",
      "parameters": [
        {
          "name": "launchRequest",
          "type": "TextBotFlowLaunchRequest"
        }
      ],
      "return": "TextBotFlowLaunchResponse"
    },
    "POST /api/v2/textbots/bots/execute": {
      "functionName": "PostTextbotsBotsExecute",
      "signature": "PostTextbotsBotsExecute(postTextRequest)",
      "parameters": [
        {
          "name": "postTextRequest",
          "type": "PostTextRequest"
        }
      ],
      "return": "PostTextResponse"
    }
  },
  "tokens": {
    "DELETE /api/v2/tokens/{userId}": {
      "functionName": "DeleteToken",
      "signature": "DeleteToken(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/tokens/me": {
      "functionName": "DeleteTokensMe",
      "signature": "DeleteTokensMe()"
    },
    "GET /api/v2/tokens/me": {
      "functionName": "GetTokensMe",
      "signature": "GetTokensMe()",
      "return": "TokenInfo"
    },
    "HEAD /api/v2/tokens/me": {
      "functionName": "HeadTokensMe",
      "signature": "HeadTokensMe()"
    }
  },
  "uploads": {
    "POST /api/v2/knowledge/documentuploads": {
      "functionName": "PostKnowledgeDocumentuploads",
      "signature": "PostKnowledgeDocumentuploads(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UploadUrlRequest"
        }
      ],
      "return": "UploadUrlResponse"
    },
    "POST /api/v2/languageunderstanding/miners/{minerId}/uploads": {
      "functionName": "PostLanguageunderstandingMinerUploads",
      "signature": "PostLanguageunderstandingMinerUploads(minerId, body)",
      "parameters": [
        {
          "name": "minerId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Empty"
        }
      ],
      "return": "UploadUrlResponse"
    },
    "POST /api/v2/uploads/publicassets/images": {
      "functionName": "PostUploadsPublicassetsImages",
      "signature": "PostUploadsPublicassetsImages(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UploadUrlRequest"
        }
      ],
      "return": "UploadUrlResponse"
    },
    "POST /api/v2/uploads/recordings": {
      "functionName": "PostUploadsRecordings",
      "signature": "PostUploadsRecordings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UploadUrlRequest"
        }
      ],
      "return": "UploadUrlResponse"
    },
    "POST /api/v2/uploads/workforcemanagement/historicaldata/csv": {
      "functionName": "PostUploadsWorkforcemanagementHistoricaldataCsv",
      "signature": "PostUploadsWorkforcemanagementHistoricaldataCsv(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UploadUrlRequest"
        }
      ],
      "return": "UploadUrlResponse"
    },
    "POST /api/v2/uploads/workforcemanagement/historicaldata/json": {
      "functionName": "PostUploadsWorkforcemanagementHistoricaldataJson",
      "signature": "PostUploadsWorkforcemanagementHistoricaldataJson(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UploadUrlRequest"
        }
      ],
      "return": "UploadUrlResponse"
    }
  },
  "usage": {
    "GET /api/v2/usage/query/{executionId}/results": {
      "functionName": "GetUsageQueryExecutionIdResults",
      "signature": "GetUsageQueryExecutionIdResults(executionId)",
      "parameters": [
        {
          "name": "executionId",
          "type": "string"
        }
      ],
      "return": "ApiUsageQueryResult"
    },
    "POST /api/v2/usage/query": {
      "functionName": "PostUsageQuery",
      "signature": "PostUsageQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ApiUsageQuery"
        }
      ],
      "return": "UsageExecutionResult"
    }
  },
  "userrecordings": {
    "DELETE /api/v2/userrecordings/{recordingId}": {
      "functionName": "DeleteUserrecording",
      "signature": "DeleteUserrecording(recordingId)",
      "parameters": [
        {
          "name": "recordingId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/userrecordings/{recordingId}": {
      "functionName": "GetUserrecording",
      "signature": "GetUserrecording(recordingId, expand)",
      "parameters": [
        {
          "name": "recordingId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "UserRecording"
    },
    "GET /api/v2/userrecordings/{recordingId}/media": {
      "functionName": "GetUserrecordingMedia",
      "signature": "GetUserrecordingMedia(recordingId, formatId)",
      "parameters": [
        {
          "name": "recordingId",
          "type": "string"
        },
        {
          "name": "formatId",
          "type": "string"
        }
      ],
      "return": "DownloadResponse"
    },
    "GET /api/v2/userrecordings": {
      "functionName": "GetUserrecordings",
      "signature": "GetUserrecordings(pageSize, pageNumber, expand)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "UserRecordingEntityListing"
    },
    "GET /api/v2/userrecordings/summary": {
      "functionName": "GetUserrecordingsSummary",
      "signature": "GetUserrecordingsSummary()",
      "return": "FaxSummary"
    },
    "PUT /api/v2/userrecordings/{recordingId}": {
      "functionName": "PutUserrecording",
      "signature": "PutUserrecording(recordingId, body, expand)",
      "parameters": [
        {
          "name": "recordingId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UserRecording"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "UserRecording"
    }
  },
  "users": {
    "DELETE /api/v2/analytics/users/details/jobs/{jobId}": {
      "functionName": "DeleteAnalyticsUsersDetailsJob",
      "signature": "DeleteAnalyticsUsersDetailsJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}": {
      "functionName": "DeleteAuthorizationSubjectDivisionRole",
      "signature": "DeleteAuthorizationSubjectDivisionRole(subjectId, divisionId, roleId)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "string"
        },
        {
          "name": "roleId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/routing/users/{userId}/utilization": {
      "functionName": "DeleteRoutingUserUtilization",
      "signature": "DeleteRoutingUserUtilization(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/users/{userId}": {
      "functionName": "DeleteUser",
      "signature": "DeleteUser(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "Empty"
    },
    "DELETE /api/v2/users/{userId}/routinglanguages/{languageId}": {
      "functionName": "DeleteUserRoutinglanguage",
      "signature": "DeleteUserRoutinglanguage(userId, languageId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "languageId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/users/{userId}/routingskills/{skillId}": {
      "functionName": "DeleteUserRoutingskill",
      "signature": "DeleteUserRoutingskill(userId, skillId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "skillId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/users/{userId}/station/associatedstation": {
      "functionName": "DeleteUserStationAssociatedstation",
      "signature": "DeleteUserStationAssociatedstation(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/users/{userId}/station/defaultstation": {
      "functionName": "DeleteUserStationDefaultstation",
      "signature": "DeleteUserStationDefaultstation(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/analytics/users/details/jobs/{jobId}": {
      "functionName": "GetAnalyticsUsersDetailsJob",
      "signature": "GetAnalyticsUsersDetailsJob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        }
      ],
      "return": "AsyncQueryStatus"
    },
    "GET /api/v2/analytics/users/details/jobs/{jobId}/results": {
      "functionName": "GetAnalyticsUsersDetailsJobResults",
      "signature": "GetAnalyticsUsersDetailsJobResults(jobId, cursor, pageSize)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        },
        {
          "name": "cursor",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "AnalyticsUserDetailsAsyncQueryResponse"
    },
    "GET /api/v2/analytics/users/details/jobs/availability": {
      "functionName": "GetAnalyticsUsersDetailsJobsAvailability",
      "signature": "GetAnalyticsUsersDetailsJobsAvailability()",
      "return": "DataAvailabilityResponse"
    },
    "GET /api/v2/authorization/divisionspermitted/me": {
      "functionName": "GetAuthorizationDivisionspermittedMe",
      "signature": "GetAuthorizationDivisionspermittedMe(permission, name)",
      "parameters": [
        {
          "name": "permission",
          "type": "string"
        },
        {
          "name": "name",
          "type": "string"
        }
      ],
      "return": "List&lt;AuthzDivision&gt;"
    },
    "GET /api/v2/authorization/divisionspermitted/paged/me": {
      "functionName": "GetAuthorizationDivisionspermittedPagedMe",
      "signature": "GetAuthorizationDivisionspermittedPagedMe(permission, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "permission",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "DivsPermittedEntityListing"
    },
    "GET /api/v2/authorization/divisionspermitted/paged/{subjectId}": {
      "functionName": "GetAuthorizationDivisionspermittedPagedSubjectId",
      "signature": "GetAuthorizationDivisionspermittedPagedSubjectId(subjectId, permission, pageNumber, pageSize)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "string"
        },
        {
          "name": "permission",
          "type": "string"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "pageSize",
          "type": "int?"
        }
      ],
      "return": "DivsPermittedEntityListing"
    },
    "GET /api/v2/authorization/subjects/{subjectId}": {
      "functionName": "GetAuthorizationSubject",
      "signature": "GetAuthorizationSubject(subjectId)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "string"
        }
      ],
      "return": "AuthzSubject"
    },
    "GET /api/v2/authorization/subjects/me": {
      "functionName": "GetAuthorizationSubjectsMe",
      "signature": "GetAuthorizationSubjectsMe()",
      "return": "AuthzSubject"
    },
    "GET /api/v2/fieldconfig": {
      "functionName": "GetFieldconfig",
      "signature": "GetFieldconfig(type)",
      "parameters": [
        {
          "name": "type",
          "type": "string"
        }
      ],
      "return": "FieldConfig"
    },
    "GET /api/v2/profiles/users": {
      "functionName": "GetProfilesUsers",
      "signature": "GetProfilesUsers(pageSize, pageNumber, id, jid, sortOrder, expand, integrationPresenceSource)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "jid",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "integrationPresenceSource",
          "type": "string"
        }
      ],
      "return": "UserProfileEntityListing"
    },
    "GET /api/v2/routing/users/{userId}/utilization": {
      "functionName": "GetRoutingUserUtilization",
      "signature": "GetRoutingUserUtilization(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "AgentMaxUtilization"
    },
    "GET /api/v2/users/{userId}": {
      "functionName": "GetUser",
      "signature": "GetUser(userId, expand, integrationPresenceSource, state)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "integrationPresenceSource",
          "type": "string"
        },
        {
          "name": "state",
          "type": "string"
        }
      ],
      "return": "User"
    },
    "GET /api/v2/users/{userId}/adjacents": {
      "functionName": "GetUserAdjacents",
      "signature": "GetUserAdjacents(userId, expand)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "Adjacents"
    },
    "GET /api/v2/users/{userId}/callforwarding": {
      "functionName": "GetUserCallforwarding",
      "signature": "GetUserCallforwarding(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "CallForwarding"
    },
    "GET /api/v2/users/{userId}/directreports": {
      "functionName": "GetUserDirectreports",
      "signature": "GetUserDirectreports(userId, expand)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "List&lt;User&gt;"
    },
    "GET /api/v2/users/{userId}/favorites": {
      "functionName": "GetUserFavorites",
      "signature": "GetUserFavorites(userId, pageSize, pageNumber, sortOrder, expand)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "UserEntityListing"
    },
    "GET /api/v2/users/{userId}/geolocations/{clientId}": {
      "functionName": "GetUserGeolocation",
      "signature": "GetUserGeolocation(userId, clientId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "clientId",
          "type": "string"
        }
      ],
      "return": "Geolocation"
    },
    "GET /api/v2/users/{userId}/outofoffice": {
      "functionName": "GetUserOutofoffice",
      "signature": "GetUserOutofoffice(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "OutOfOffice"
    },
    "GET /api/v2/users/{userId}/profile": {
      "functionName": "GetUserProfile",
      "signature": "GetUserProfile(userId, expand, integrationPresenceSource)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "integrationPresenceSource",
          "type": "string"
        }
      ],
      "return": "UserProfile"
    },
    "GET /api/v2/users/{userId}/profileskills": {
      "functionName": "GetUserProfileskills",
      "signature": "GetUserProfileskills(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "List&lt;string&gt;"
    },
    "GET /api/v2/users/{userId}/queues": {
      "functionName": "GetUserQueues",
      "signature": "GetUserQueues(userId, pageSize, pageNumber, joined, divisionId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "joined",
          "type": "bool?"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "UserQueueEntityListing"
    },
    "GET /api/v2/users/{userId}/roles": {
      "functionName": "GetUserRoles",
      "signature": "GetUserRoles(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "UserAuthorization"
    },
    "GET /api/v2/users/{userId}/routinglanguages": {
      "functionName": "GetUserRoutinglanguages",
      "signature": "GetUserRoutinglanguages(userId, pageSize, pageNumber, sortOrder)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "UserLanguageEntityListing"
    },
    "GET /api/v2/users/{userId}/routingskills": {
      "functionName": "GetUserRoutingskills",
      "signature": "GetUserRoutingskills(userId, pageSize, pageNumber, sortOrder)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        }
      ],
      "return": "UserSkillEntityListing"
    },
    "GET /api/v2/users/{userId}/routingstatus": {
      "functionName": "GetUserRoutingstatus",
      "signature": "GetUserRoutingstatus(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "RoutingStatus"
    },
    "GET /api/v2/users/{userId}/state": {
      "functionName": "GetUserState",
      "signature": "GetUserState(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "UserState"
    },
    "GET /api/v2/users/{userId}/station": {
      "functionName": "GetUserStation",
      "signature": "GetUserStation(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "UserStations"
    },
    "GET /api/v2/users/{userId}/superiors": {
      "functionName": "GetUserSuperiors",
      "signature": "GetUserSuperiors(userId, expand)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "List&lt;User&gt;"
    },
    "GET /api/v2/users/{userId}/trustors": {
      "functionName": "GetUserTrustors",
      "signature": "GetUserTrustors(userId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "TrustorEntityListing"
    },
    "GET /api/v2/users": {
      "functionName": "GetUsers",
      "signature": "GetUsers(pageSize, pageNumber, id, jabberId, sortOrder, expand, integrationPresenceSource, state)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "id",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "jabberId",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "integrationPresenceSource",
          "type": "string"
        },
        {
          "name": "state",
          "type": "string"
        }
      ],
      "return": "UserEntityListing"
    },
    "GET /api/v2/users/development/activities": {
      "functionName": "GetUsersDevelopmentActivities",
      "signature": "GetUsersDevelopmentActivities(userId, moduleId, interval, completionInterval, overdue, pageSize, pageNumber, sortOrder, types, statuses, relationship)",
      "parameters": [
        {
          "name": "userId",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "moduleId",
          "type": "string"
        },
        {
          "name": "interval",
          "type": "string"
        },
        {
          "name": "completionInterval",
          "type": "string"
        },
        {
          "name": "overdue",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "types",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "statuses",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "relationship",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "DevelopmentActivityListing"
    },
    "GET /api/v2/users/development/activities/me": {
      "functionName": "GetUsersDevelopmentActivitiesMe",
      "signature": "GetUsersDevelopmentActivitiesMe(moduleId, interval, completionInterval, overdue, pageSize, pageNumber, sortOrder, types, statuses, relationship)",
      "parameters": [
        {
          "name": "moduleId",
          "type": "string"
        },
        {
          "name": "interval",
          "type": "string"
        },
        {
          "name": "completionInterval",
          "type": "string"
        },
        {
          "name": "overdue",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "types",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "statuses",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "relationship",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "DevelopmentActivityListing"
    },
    "GET /api/v2/users/development/activities/{activityId}": {
      "functionName": "GetUsersDevelopmentActivity",
      "signature": "GetUsersDevelopmentActivity(activityId, type)",
      "parameters": [
        {
          "name": "activityId",
          "type": "string"
        },
        {
          "name": "type",
          "type": "string"
        }
      ],
      "return": "DevelopmentActivity"
    },
    "GET /api/v2/users/me": {
      "functionName": "GetUsersMe",
      "signature": "GetUsersMe(expand, integrationPresenceSource)",
      "parameters": [
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "integrationPresenceSource",
          "type": "string"
        }
      ],
      "return": "UserMe"
    },
    "GET /api/v2/users/search": {
      "functionName": "GetUsersSearch",
      "signature": "GetUsersSearch(q64, expand, integrationPresenceSource)",
      "parameters": [
        {
          "name": "q64",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "integrationPresenceSource",
          "type": "string"
        }
      ],
      "return": "UsersSearchResponse"
    },
    "PATCH /api/v2/users/{userId}": {
      "functionName": "PatchUser",
      "signature": "PatchUser(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UpdateUser"
        }
      ],
      "return": "User"
    },
    "PATCH /api/v2/users/{userId}/callforwarding": {
      "functionName": "PatchUserCallforwarding",
      "signature": "PatchUserCallforwarding(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CallForwarding"
        }
      ],
      "return": "CallForwarding"
    },
    "PATCH /api/v2/users/{userId}/geolocations/{clientId}": {
      "functionName": "PatchUserGeolocation",
      "signature": "PatchUserGeolocation(userId, clientId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "clientId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Geolocation"
        }
      ],
      "return": "Geolocation"
    },
    "PATCH /api/v2/users/{userId}/queues/{queueId}": {
      "functionName": "PatchUserQueue",
      "signature": "PatchUserQueue(queueId, userId, body)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UserQueue"
        }
      ],
      "return": "UserQueue"
    },
    "PATCH /api/v2/users/{userId}/queues": {
      "functionName": "PatchUserQueues",
      "signature": "PatchUserQueues(userId, body, divisionId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;UserQueue&gt;"
        },
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "UserQueueEntityListing"
    },
    "PATCH /api/v2/users/{userId}/routinglanguages/{languageId}": {
      "functionName": "PatchUserRoutinglanguage",
      "signature": "PatchUserRoutinglanguage(userId, languageId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "languageId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UserRoutingLanguage"
        }
      ],
      "return": "UserRoutingLanguage"
    },
    "PATCH /api/v2/users/{userId}/routinglanguages/bulk": {
      "functionName": "PatchUserRoutinglanguagesBulk",
      "signature": "PatchUserRoutinglanguagesBulk(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;UserRoutingLanguagePost&gt;"
        }
      ],
      "return": "UserLanguageEntityListing"
    },
    "PATCH /api/v2/users/{userId}/routingskills/bulk": {
      "functionName": "PatchUserRoutingskillsBulk",
      "signature": "PatchUserRoutingskillsBulk(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;UserRoutingSkillPost&gt;"
        }
      ],
      "return": "UserSkillEntityListing"
    },
    "PATCH /api/v2/users/bulk": {
      "functionName": "PatchUsersBulk",
      "signature": "PatchUsersBulk(body)",
      "parameters": [
        {
          "name": "body",
          "type": "List&lt;PatchUser&gt;"
        }
      ],
      "return": "UserEntityListing"
    },
    "POST /api/v2/analytics/users/aggregates/query": {
      "functionName": "PostAnalyticsUsersAggregatesQuery",
      "signature": "PostAnalyticsUsersAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UserAggregationQuery"
        }
      ],
      "return": "UserAggregateQueryResponse"
    },
    "POST /api/v2/analytics/users/details/jobs": {
      "functionName": "PostAnalyticsUsersDetailsJobs",
      "signature": "PostAnalyticsUsersDetailsJobs(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AsyncUserDetailsQuery"
        }
      ],
      "return": "AsyncQueryResponse"
    },
    "POST /api/v2/analytics/users/details/query": {
      "functionName": "PostAnalyticsUsersDetailsQuery",
      "signature": "PostAnalyticsUsersDetailsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UserDetailsQuery"
        }
      ],
      "return": "AnalyticsUserDetailsQueryResponse"
    },
    "POST /api/v2/analytics/users/observations/query": {
      "functionName": "PostAnalyticsUsersObservationsQuery",
      "signature": "PostAnalyticsUsersObservationsQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UserObservationQuery"
        }
      ],
      "return": "UserObservationQueryResponse"
    },
    "POST /api/v2/authorization/subjects/{subjectId}/bulkadd": {
      "functionName": "PostAuthorizationSubjectBulkadd",
      "signature": "PostAuthorizationSubjectBulkadd(subjectId, body, subjectType)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "RoleDivisionGrants"
        },
        {
          "name": "subjectType",
          "type": "string"
        }
      ]
    },
    "POST /api/v2/authorization/subjects/{subjectId}/bulkremove": {
      "functionName": "PostAuthorizationSubjectBulkremove",
      "signature": "PostAuthorizationSubjectBulkremove(subjectId, body)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "RoleDivisionGrants"
        }
      ]
    },
    "POST /api/v2/authorization/subjects/{subjectId}/bulkreplace": {
      "functionName": "PostAuthorizationSubjectBulkreplace",
      "signature": "PostAuthorizationSubjectBulkreplace(subjectId, body, subjectType)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "RoleDivisionGrants"
        },
        {
          "name": "subjectType",
          "type": "string"
        }
      ]
    },
    "POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}": {
      "functionName": "PostAuthorizationSubjectDivisionRole",
      "signature": "PostAuthorizationSubjectDivisionRole(subjectId, divisionId, roleId, subjectType)",
      "parameters": [
        {
          "name": "subjectId",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "string"
        },
        {
          "name": "roleId",
          "type": "string"
        },
        {
          "name": "subjectType",
          "type": "string"
        }
      ]
    },
    "POST /api/v2/users/{userId}/invite": {
      "functionName": "PostUserInvite",
      "signature": "PostUserInvite(userId, force)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "force",
          "type": "bool?"
        }
      ]
    },
    "POST /api/v2/users/{userId}/password": {
      "functionName": "PostUserPassword",
      "signature": "PostUserPassword(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "ChangePasswordRequest"
        }
      ]
    },
    "POST /api/v2/users/{userId}/routinglanguages": {
      "functionName": "PostUserRoutinglanguages",
      "signature": "PostUserRoutinglanguages(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UserRoutingLanguagePost"
        }
      ],
      "return": "UserRoutingLanguage"
    },
    "POST /api/v2/users/{userId}/routingskills": {
      "functionName": "PostUserRoutingskills",
      "signature": "PostUserRoutingskills(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UserRoutingSkillPost"
        }
      ],
      "return": "UserRoutingSkill"
    },
    "POST /api/v2/users": {
      "functionName": "PostUsers",
      "signature": "PostUsers(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateUser"
        }
      ],
      "return": "User"
    },
    "POST /api/v2/users/development/activities/aggregates/query": {
      "functionName": "PostUsersDevelopmentActivitiesAggregatesQuery",
      "signature": "PostUsersDevelopmentActivitiesAggregatesQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "DevelopmentActivityAggregateParam"
        }
      ],
      "return": "DevelopmentActivityAggregateResponse"
    },
    "POST /api/v2/users/me/password": {
      "functionName": "PostUsersMePassword",
      "signature": "PostUsersMePassword(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ChangeMyPasswordRequest"
        }
      ]
    },
    "POST /api/v2/users/search": {
      "functionName": "PostUsersSearch",
      "signature": "PostUsersSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UserSearchRequest"
        }
      ],
      "return": "UsersSearchResponse"
    },
    "PUT /api/v2/routing/users/{userId}/utilization": {
      "functionName": "PutRoutingUserUtilization",
      "signature": "PutRoutingUserUtilization(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "Utilization"
        }
      ],
      "return": "AgentMaxUtilization"
    },
    "PUT /api/v2/users/{userId}/callforwarding": {
      "functionName": "PutUserCallforwarding",
      "signature": "PutUserCallforwarding(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CallForwarding"
        }
      ],
      "return": "CallForwarding"
    },
    "PUT /api/v2/users/{userId}/outofoffice": {
      "functionName": "PutUserOutofoffice",
      "signature": "PutUserOutofoffice(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "OutOfOffice"
        }
      ],
      "return": "OutOfOffice"
    },
    "PUT /api/v2/users/{userId}/profileskills": {
      "functionName": "PutUserProfileskills",
      "signature": "PutUserProfileskills(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "List&lt;string&gt;"
    },
    "PUT /api/v2/users/{userId}/roles": {
      "functionName": "PutUserRoles",
      "signature": "PutUserRoles(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "UserAuthorization"
    },
    "PUT /api/v2/users/{userId}/routingskills/{skillId}": {
      "functionName": "PutUserRoutingskill",
      "signature": "PutUserRoutingskill(userId, skillId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "skillId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UserRoutingSkill"
        }
      ],
      "return": "UserRoutingSkill"
    },
    "PUT /api/v2/users/{userId}/routingskills/bulk": {
      "functionName": "PutUserRoutingskillsBulk",
      "signature": "PutUserRoutingskillsBulk(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "List&lt;UserRoutingSkillPost&gt;"
        }
      ],
      "return": "UserSkillEntityListing"
    },
    "PUT /api/v2/users/{userId}/routingstatus": {
      "functionName": "PutUserRoutingstatus",
      "signature": "PutUserRoutingstatus(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "RoutingStatus"
        }
      ],
      "return": "RoutingStatus"
    },
    "PUT /api/v2/users/{userId}/state": {
      "functionName": "PutUserState",
      "signature": "PutUserState(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UserState"
        }
      ],
      "return": "UserState"
    },
    "PUT /api/v2/users/{userId}/station/associatedstation/{stationId}": {
      "functionName": "PutUserStationAssociatedstationStationId",
      "signature": "PutUserStationAssociatedstationStationId(userId, stationId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "stationId",
          "type": "string"
        }
      ]
    },
    "PUT /api/v2/users/{userId}/station/defaultstation/{stationId}": {
      "functionName": "PutUserStationDefaultstationStationId",
      "signature": "PutUserStationDefaultstationStationId(userId, stationId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "stationId",
          "type": "string"
        }
      ]
    }
  },
  "utilities": {
    "GET /api/v2/date": {
      "functionName": "GetDate",
      "signature": "GetDate()",
      "return": "ServerDate"
    },
    "GET /api/v2/ipranges": {
      "functionName": "GetIpranges",
      "signature": "GetIpranges()",
      "return": "IpAddressRangeListing"
    },
    "GET /api/v2/timezones": {
      "functionName": "GetTimezones",
      "signature": "GetTimezones(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "TimeZoneEntityListing"
    },
    "POST /api/v2/certificate/details": {
      "functionName": "PostCertificateDetails",
      "signature": "PostCertificateDetails(body)",
      "parameters": [
        {
          "name": "body",
          "type": "Certificate"
        }
      ],
      "return": "ParsedCertificate"
    }
  },
  "voicemail": {
    "DELETE /api/v2/voicemail/messages/{messageId}": {
      "functionName": "DeleteVoicemailMessage",
      "signature": "DeleteVoicemailMessage(messageId)",
      "parameters": [
        {
          "name": "messageId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/voicemail/messages": {
      "functionName": "DeleteVoicemailMessages",
      "signature": "DeleteVoicemailMessages()"
    },
    "GET /api/v2/voicemail/groups/{groupId}/mailbox": {
      "functionName": "GetVoicemailGroupMailbox",
      "signature": "GetVoicemailGroupMailbox(groupId)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        }
      ],
      "return": "VoicemailMailboxInfo"
    },
    "GET /api/v2/voicemail/groups/{groupId}/messages": {
      "functionName": "GetVoicemailGroupMessages",
      "signature": "GetVoicemailGroupMessages(groupId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "VoicemailMessageEntityListing"
    },
    "GET /api/v2/voicemail/groups/{groupId}/policy": {
      "functionName": "GetVoicemailGroupPolicy",
      "signature": "GetVoicemailGroupPolicy(groupId)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        }
      ],
      "return": "VoicemailGroupPolicy"
    },
    "GET /api/v2/voicemail/mailbox": {
      "functionName": "GetVoicemailMailbox",
      "signature": "GetVoicemailMailbox()",
      "return": "VoicemailMailboxInfo"
    },
    "GET /api/v2/voicemail/me/mailbox": {
      "functionName": "GetVoicemailMeMailbox",
      "signature": "GetVoicemailMeMailbox()",
      "return": "VoicemailMailboxInfo"
    },
    "GET /api/v2/voicemail/me/messages": {
      "functionName": "GetVoicemailMeMessages",
      "signature": "GetVoicemailMeMessages(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "VoicemailMessageEntityListing"
    },
    "GET /api/v2/voicemail/me/policy": {
      "functionName": "GetVoicemailMePolicy",
      "signature": "GetVoicemailMePolicy()",
      "return": "VoicemailUserPolicy"
    },
    "GET /api/v2/voicemail/messages/{messageId}": {
      "functionName": "GetVoicemailMessage",
      "signature": "GetVoicemailMessage(messageId, expand)",
      "parameters": [
        {
          "name": "messageId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "VoicemailMessage"
    },
    "GET /api/v2/voicemail/messages/{messageId}/media": {
      "functionName": "GetVoicemailMessageMedia",
      "signature": "GetVoicemailMessageMedia(messageId, formatId)",
      "parameters": [
        {
          "name": "messageId",
          "type": "string"
        },
        {
          "name": "formatId",
          "type": "string"
        }
      ],
      "return": "VoicemailMediaInfo"
    },
    "GET /api/v2/voicemail/messages": {
      "functionName": "GetVoicemailMessages",
      "signature": "GetVoicemailMessages(ids, expand)",
      "parameters": [
        {
          "name": "ids",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "VoicemailMessageEntityListing"
    },
    "GET /api/v2/voicemail/policy": {
      "functionName": "GetVoicemailPolicy",
      "signature": "GetVoicemailPolicy()",
      "return": "VoicemailOrganizationPolicy"
    },
    "GET /api/v2/voicemail/queues/{queueId}/messages": {
      "functionName": "GetVoicemailQueueMessages",
      "signature": "GetVoicemailQueueMessages(queueId, pageSize, pageNumber)",
      "parameters": [
        {
          "name": "queueId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "VoicemailMessageEntityListing"
    },
    "GET /api/v2/voicemail/search": {
      "functionName": "GetVoicemailSearch",
      "signature": "GetVoicemailSearch(q64, expand)",
      "parameters": [
        {
          "name": "q64",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "VoicemailsSearchResponse"
    },
    "GET /api/v2/voicemail/userpolicies/{userId}": {
      "functionName": "GetVoicemailUserpolicy",
      "signature": "GetVoicemailUserpolicy(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        }
      ],
      "return": "VoicemailUserPolicy"
    },
    "PATCH /api/v2/voicemail/groups/{groupId}/policy": {
      "functionName": "PatchVoicemailGroupPolicy",
      "signature": "PatchVoicemailGroupPolicy(groupId, body)",
      "parameters": [
        {
          "name": "groupId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "VoicemailGroupPolicy"
        }
      ],
      "return": "VoicemailGroupPolicy"
    },
    "PATCH /api/v2/voicemail/me/policy": {
      "functionName": "PatchVoicemailMePolicy",
      "signature": "PatchVoicemailMePolicy(body)",
      "parameters": [
        {
          "name": "body",
          "type": "VoicemailUserPolicy"
        }
      ],
      "return": "VoicemailUserPolicy"
    },
    "PATCH /api/v2/voicemail/messages/{messageId}": {
      "functionName": "PatchVoicemailMessage",
      "signature": "PatchVoicemailMessage(messageId, body)",
      "parameters": [
        {
          "name": "messageId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "VoicemailMessage"
        }
      ],
      "return": "VoicemailMessage"
    },
    "PATCH /api/v2/voicemail/userpolicies/{userId}": {
      "functionName": "PatchVoicemailUserpolicy",
      "signature": "PatchVoicemailUserpolicy(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "VoicemailUserPolicy"
        }
      ],
      "return": "VoicemailUserPolicy"
    },
    "POST /api/v2/voicemail/messages": {
      "functionName": "PostVoicemailMessages",
      "signature": "PostVoicemailMessages(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CopyVoicemailMessage"
        }
      ],
      "return": "VoicemailMessage"
    },
    "POST /api/v2/voicemail/search": {
      "functionName": "PostVoicemailSearch",
      "signature": "PostVoicemailSearch(body)",
      "parameters": [
        {
          "name": "body",
          "type": "VoicemailSearchRequest"
        }
      ],
      "return": "VoicemailsSearchResponse"
    },
    "PUT /api/v2/voicemail/messages/{messageId}": {
      "functionName": "PutVoicemailMessage",
      "signature": "PutVoicemailMessage(messageId, body)",
      "parameters": [
        {
          "name": "messageId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "VoicemailMessage"
        }
      ],
      "return": "VoicemailMessage"
    },
    "PUT /api/v2/voicemail/policy": {
      "functionName": "PutVoicemailPolicy",
      "signature": "PutVoicemailPolicy(body)",
      "parameters": [
        {
          "name": "body",
          "type": "VoicemailOrganizationPolicy"
        }
      ],
      "return": "VoicemailOrganizationPolicy"
    },
    "PUT /api/v2/voicemail/userpolicies/{userId}": {
      "functionName": "PutVoicemailUserpolicy",
      "signature": "PutVoicemailUserpolicy(userId, body)",
      "parameters": [
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "VoicemailUserPolicy"
        }
      ],
      "return": "VoicemailUserPolicy"
    }
  },
  "webchat": {
    "DELETE /api/v2/webchat/deployments/{deploymentId}": {
      "functionName": "DeleteWebchatDeployment",
      "signature": "DeleteWebchatDeployment(deploymentId)",
      "parameters": [
        {
          "name": "deploymentId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}": {
      "functionName": "DeleteWebchatGuestConversationMember",
      "signature": "DeleteWebchatGuestConversationMember(conversationId, memberId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "memberId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/webchat/settings": {
      "functionName": "DeleteWebchatSettings",
      "signature": "DeleteWebchatSettings()"
    },
    "GET /api/v2/webchat/deployments/{deploymentId}": {
      "functionName": "GetWebchatDeployment",
      "signature": "GetWebchatDeployment(deploymentId)",
      "parameters": [
        {
          "name": "deploymentId",
          "type": "string"
        }
      ],
      "return": "WebChatDeployment"
    },
    "GET /api/v2/webchat/deployments": {
      "functionName": "GetWebchatDeployments",
      "signature": "GetWebchatDeployments()",
      "return": "WebChatDeploymentEntityListing"
    },
    "GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}": {
      "functionName": "GetWebchatGuestConversationMediarequest",
      "signature": "GetWebchatGuestConversationMediarequest(conversationId, mediaRequestId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "mediaRequestId",
          "type": "string"
        }
      ],
      "return": "WebChatGuestMediaRequest"
    },
    "GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests": {
      "functionName": "GetWebchatGuestConversationMediarequests",
      "signature": "GetWebchatGuestConversationMediarequests(conversationId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        }
      ],
      "return": "WebChatGuestMediaRequestEntityList"
    },
    "GET /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}": {
      "functionName": "GetWebchatGuestConversationMember",
      "signature": "GetWebchatGuestConversationMember(conversationId, memberId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "memberId",
          "type": "string"
        }
      ],
      "return": "WebChatMemberInfo"
    },
    "GET /api/v2/webchat/guest/conversations/{conversationId}/members": {
      "functionName": "GetWebchatGuestConversationMembers",
      "signature": "GetWebchatGuestConversationMembers(conversationId, pageSize, pageNumber, excludeDisconnectedMembers)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "excludeDisconnectedMembers",
          "type": "bool?"
        }
      ],
      "return": "WebChatMemberInfoEntityList"
    },
    "GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}": {
      "functionName": "GetWebchatGuestConversationMessage",
      "signature": "GetWebchatGuestConversationMessage(conversationId, messageId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "messageId",
          "type": "string"
        }
      ],
      "return": "WebChatMessage"
    },
    "GET /api/v2/webchat/guest/conversations/{conversationId}/messages": {
      "functionName": "GetWebchatGuestConversationMessages",
      "signature": "GetWebchatGuestConversationMessages(conversationId, after, before, sortOrder, maxResults)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "after",
          "type": "string"
        },
        {
          "name": "before",
          "type": "string"
        },
        {
          "name": "sortOrder",
          "type": "string"
        },
        {
          "name": "maxResults",
          "type": "int?"
        }
      ],
      "return": "WebChatMessageEntityList"
    },
    "GET /api/v2/webchat/settings": {
      "functionName": "GetWebchatSettings",
      "signature": "GetWebchatSettings()",
      "return": "WebChatSettings"
    },
    "PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}": {
      "functionName": "PatchWebchatGuestConversationMediarequest",
      "signature": "PatchWebchatGuestConversationMediarequest(conversationId, mediaRequestId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "mediaRequestId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "WebChatGuestMediaRequest"
        }
      ],
      "return": "WebChatGuestMediaRequest"
    },
    "POST /api/v2/webchat/deployments": {
      "functionName": "PostWebchatDeployments",
      "signature": "PostWebchatDeployments(body)",
      "parameters": [
        {
          "name": "body",
          "type": "WebChatDeployment"
        }
      ],
      "return": "WebChatDeployment"
    },
    "POST /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}/messages": {
      "functionName": "PostWebchatGuestConversationMemberMessages",
      "signature": "PostWebchatGuestConversationMemberMessages(conversationId, memberId, body)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "memberId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CreateWebChatMessageRequest"
        }
      ],
      "return": "WebChatMessage"
    },
    "POST /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}/typing": {
      "functionName": "PostWebchatGuestConversationMemberTyping",
      "signature": "PostWebchatGuestConversationMemberTyping(conversationId, memberId)",
      "parameters": [
        {
          "name": "conversationId",
          "type": "string"
        },
        {
          "name": "memberId",
          "type": "string"
        }
      ],
      "return": "WebChatTyping"
    },
    "POST /api/v2/webchat/guest/conversations": {
      "functionName": "PostWebchatGuestConversations",
      "signature": "PostWebchatGuestConversations(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateWebChatConversationRequest"
        }
      ],
      "return": "CreateWebChatConversationResponse"
    },
    "PUT /api/v2/webchat/deployments/{deploymentId}": {
      "functionName": "PutWebchatDeployment",
      "signature": "PutWebchatDeployment(deploymentId, body)",
      "parameters": [
        {
          "name": "deploymentId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "WebChatDeployment"
        }
      ],
      "return": "WebChatDeployment"
    },
    "PUT /api/v2/webchat/settings": {
      "functionName": "PutWebchatSettings",
      "signature": "PutWebchatSettings(body)",
      "parameters": [
        {
          "name": "body",
          "type": "WebChatSettings"
        }
      ],
      "return": "WebChatSettings"
    }
  },
  "webdeployments": {
    "DELETE /api/v2/webdeployments/configurations/{configurationId}": {
      "functionName": "DeleteWebdeploymentsConfiguration",
      "signature": "DeleteWebdeploymentsConfiguration(configurationId)",
      "parameters": [
        {
          "name": "configurationId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/webdeployments/deployments/{deploymentId}": {
      "functionName": "DeleteWebdeploymentsDeployment",
      "signature": "DeleteWebdeploymentsDeployment(deploymentId)",
      "parameters": [
        {
          "name": "deploymentId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/webdeployments/configurations/{configurationId}/versions/{versionId}": {
      "functionName": "GetWebdeploymentsConfigurationVersion",
      "signature": "GetWebdeploymentsConfigurationVersion(configurationId, versionId)",
      "parameters": [
        {
          "name": "configurationId",
          "type": "string"
        },
        {
          "name": "versionId",
          "type": "string"
        }
      ],
      "return": "WebDeploymentConfigurationVersion"
    },
    "GET /api/v2/webdeployments/configurations/{configurationId}/versions": {
      "functionName": "GetWebdeploymentsConfigurationVersions",
      "signature": "GetWebdeploymentsConfigurationVersions(configurationId)",
      "parameters": [
        {
          "name": "configurationId",
          "type": "string"
        }
      ],
      "return": "WebDeploymentConfigurationVersionEntityListing"
    },
    "GET /api/v2/webdeployments/configurations/{configurationId}/versions/draft": {
      "functionName": "GetWebdeploymentsConfigurationVersionsDraft",
      "signature": "GetWebdeploymentsConfigurationVersionsDraft(configurationId)",
      "parameters": [
        {
          "name": "configurationId",
          "type": "string"
        }
      ],
      "return": "WebDeploymentConfigurationVersion"
    },
    "GET /api/v2/webdeployments/configurations": {
      "functionName": "GetWebdeploymentsConfigurations",
      "signature": "GetWebdeploymentsConfigurations(showOnlyPublished)",
      "parameters": [
        {
          "name": "showOnlyPublished",
          "type": "bool?"
        }
      ],
      "return": "WebDeploymentConfigurationVersionEntityListing"
    },
    "GET /api/v2/webdeployments/deployments/{deploymentId}": {
      "functionName": "GetWebdeploymentsDeployment",
      "signature": "GetWebdeploymentsDeployment(deploymentId)",
      "parameters": [
        {
          "name": "deploymentId",
          "type": "string"
        }
      ],
      "return": "WebDeployment"
    },
    "GET /api/v2/webdeployments/deployments": {
      "functionName": "GetWebdeploymentsDeployments",
      "signature": "GetWebdeploymentsDeployments()",
      "return": "WebDeploymentEntityListing"
    },
    "POST /api/v2/webdeployments/configurations/{configurationId}/versions/draft/publish": {
      "functionName": "PostWebdeploymentsConfigurationVersionsDraftPublish",
      "signature": "PostWebdeploymentsConfigurationVersionsDraftPublish(configurationId)",
      "parameters": [
        {
          "name": "configurationId",
          "type": "string"
        }
      ],
      "return": "WebDeploymentConfigurationVersion"
    },
    "POST /api/v2/webdeployments/configurations": {
      "functionName": "PostWebdeploymentsConfigurations",
      "signature": "PostWebdeploymentsConfigurations(configurationVersion)",
      "parameters": [
        {
          "name": "configurationVersion",
          "type": "WebDeploymentConfigurationVersion"
        }
      ],
      "return": "WebDeploymentConfigurationVersion"
    },
    "POST /api/v2/webdeployments/deployments": {
      "functionName": "PostWebdeploymentsDeployments",
      "signature": "PostWebdeploymentsDeployments(deployment)",
      "parameters": [
        {
          "name": "deployment",
          "type": "WebDeployment"
        }
      ],
      "return": "WebDeployment"
    },
    "PUT /api/v2/webdeployments/configurations/{configurationId}/versions/draft": {
      "functionName": "PutWebdeploymentsConfigurationVersionsDraft",
      "signature": "PutWebdeploymentsConfigurationVersionsDraft(configurationId, configurationVersion)",
      "parameters": [
        {
          "name": "configurationId",
          "type": "string"
        },
        {
          "name": "configurationVersion",
          "type": "WebDeploymentConfigurationVersion"
        }
      ],
      "return": "WebDeploymentConfigurationVersion"
    },
    "PUT /api/v2/webdeployments/deployments/{deploymentId}": {
      "functionName": "PutWebdeploymentsDeployment",
      "signature": "PutWebdeploymentsDeployment(deploymentId, deployment)",
      "parameters": [
        {
          "name": "deploymentId",
          "type": "string"
        },
        {
          "name": "deployment",
          "type": "WebDeployment"
        }
      ],
      "return": "WebDeployment"
    }
  },
  "webmessaging": {
    "GET /api/v2/webmessaging/messages": {
      "functionName": "GetWebmessagingMessages",
      "signature": "GetWebmessagingMessages(pageSize, pageNumber)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        }
      ],
      "return": "WebMessagingMessageEntityList"
    }
  },
  "widgets": {
    "DELETE /api/v2/widgets/deployments/{deploymentId}": {
      "functionName": "DeleteWidgetsDeployment",
      "signature": "DeleteWidgetsDeployment(deploymentId)",
      "parameters": [
        {
          "name": "deploymentId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/widgets/deployments/{deploymentId}": {
      "functionName": "GetWidgetsDeployment",
      "signature": "GetWidgetsDeployment(deploymentId)",
      "parameters": [
        {
          "name": "deploymentId",
          "type": "string"
        }
      ],
      "return": "WidgetDeployment"
    },
    "GET /api/v2/widgets/deployments": {
      "functionName": "GetWidgetsDeployments",
      "signature": "GetWidgetsDeployments()",
      "return": "WidgetDeploymentEntityListing"
    },
    "POST /api/v2/widgets/deployments": {
      "functionName": "PostWidgetsDeployments",
      "signature": "PostWidgetsDeployments(body)",
      "parameters": [
        {
          "name": "body",
          "type": "WidgetDeployment"
        }
      ],
      "return": "WidgetDeployment"
    },
    "PUT /api/v2/widgets/deployments/{deploymentId}": {
      "functionName": "PutWidgetsDeployment",
      "signature": "PutWidgetsDeployment(deploymentId, body)",
      "parameters": [
        {
          "name": "deploymentId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "WidgetDeployment"
        }
      ],
      "return": "WidgetDeployment"
    }
  },
  "workforcemanagement": {
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}": {
      "functionName": "DeleteWorkforcemanagementBusinessunit",
      "signature": "DeleteWorkforcemanagementBusinessunit(businessUnitId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}": {
      "functionName": "DeleteWorkforcemanagementBusinessunitActivitycode",
      "signature": "DeleteWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "activityCodeId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}": {
      "functionName": "DeleteWorkforcemanagementBusinessunitPlanninggroup",
      "signature": "DeleteWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "planningGroupId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}": {
      "functionName": "DeleteWorkforcemanagementBusinessunitSchedulingRun",
      "signature": "DeleteWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "runId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}": {
      "functionName": "DeleteWorkforcemanagementBusinessunitServicegoaltemplate",
      "signature": "DeleteWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "serviceGoalTemplateId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}": {
      "functionName": "DeleteWorkforcemanagementBusinessunitWeekSchedule",
      "signature": "DeleteWorkforcemanagementBusinessunitWeekSchedule(businessUnitId, weekId, scheduleId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekId",
          "type": "String"
        },
        {
          "name": "scheduleId",
          "type": "string"
        }
      ],
      "return": "BuAsyncScheduleResponse"
    },
    "DELETE /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}": {
      "functionName": "DeleteWorkforcemanagementBusinessunitWeekShorttermforecast",
      "signature": "DeleteWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId, weekDateId, forecastId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekDateId",
          "type": "String"
        },
        {
          "name": "forecastId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/calendar/url/ics": {
      "functionName": "DeleteWorkforcemanagementCalendarUrlIcs",
      "signature": "DeleteWorkforcemanagementCalendarUrlIcs()"
    },
    "DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}": {
      "functionName": "DeleteWorkforcemanagementManagementunit",
      "signature": "DeleteWorkforcemanagementManagementunit(managementUnitId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}": {
      "functionName": "DeleteWorkforcemanagementManagementunitTimeofflimit",
      "signature": "DeleteWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "timeOffLimitId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans/{timeOffPlanId}": {
      "functionName": "DeleteWorkforcemanagementManagementunitTimeoffplan",
      "signature": "DeleteWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "timeOffPlanId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}": {
      "functionName": "DeleteWorkforcemanagementManagementunitWorkplan",
      "signature": "DeleteWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "workPlanId",
          "type": "string"
        }
      ]
    },
    "DELETE /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}": {
      "functionName": "DeleteWorkforcemanagementManagementunitWorkplanrotation",
      "signature": "DeleteWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "workPlanRotationId",
          "type": "string"
        }
      ]
    },
    "GET /api/v2/workforcemanagement/adherence": {
      "functionName": "GetWorkforcemanagementAdherence",
      "signature": "GetWorkforcemanagementAdherence(userId)",
      "parameters": [
        {
          "name": "userId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "List&lt;UserScheduleAdherence&gt;"
    },
    "GET /api/v2/workforcemanagement/adhocmodelingjobs/{jobId}": {
      "functionName": "GetWorkforcemanagementAdhocmodelingjob",
      "signature": "GetWorkforcemanagementAdhocmodelingjob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        }
      ],
      "return": "ModelingStatusResponse"
    },
    "GET /api/v2/workforcemanagement/agents/{agentId}/managementunit": {
      "functionName": "GetWorkforcemanagementAgentManagementunit",
      "signature": "GetWorkforcemanagementAgentManagementunit(agentId)",
      "parameters": [
        {
          "name": "agentId",
          "type": "string"
        }
      ],
      "return": "AgentManagementUnitReference"
    },
    "GET /api/v2/workforcemanagement/agents/me/managementunit": {
      "functionName": "GetWorkforcemanagementAgentsMeManagementunit",
      "signature": "GetWorkforcemanagementAgentsMeManagementunit()",
      "return": "AgentManagementUnitReference"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}": {
      "functionName": "GetWorkforcemanagementBusinessunit",
      "signature": "GetWorkforcemanagementBusinessunit(businessUnitId, expand)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "BusinessUnit"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}": {
      "functionName": "GetWorkforcemanagementBusinessunitActivitycode",
      "signature": "GetWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "activityCodeId",
          "type": "string"
        }
      ],
      "return": "BusinessUnitActivityCode"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes": {
      "functionName": "GetWorkforcemanagementBusinessunitActivitycodes",
      "signature": "GetWorkforcemanagementBusinessunitActivitycodes(businessUnitId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        }
      ],
      "return": "BusinessUnitActivityCodeListing"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/intraday/planninggroups": {
      "functionName": "GetWorkforcemanagementBusinessunitIntradayPlanninggroups",
      "signature": "GetWorkforcemanagementBusinessunitIntradayPlanninggroups(businessUnitId, date)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "date",
          "type": "String"
        }
      ],
      "return": "WfmIntradayPlanningGroupListing"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/managementunits": {
      "functionName": "GetWorkforcemanagementBusinessunitManagementunits",
      "signature": "GetWorkforcemanagementBusinessunitManagementunits(businessUnitId, feature, divisionId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "feature",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "string"
        }
      ],
      "return": "ManagementUnitListing"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}": {
      "functionName": "GetWorkforcemanagementBusinessunitPlanninggroup",
      "signature": "GetWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "planningGroupId",
          "type": "string"
        }
      ],
      "return": "PlanningGroup"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups": {
      "functionName": "GetWorkforcemanagementBusinessunitPlanninggroups",
      "signature": "GetWorkforcemanagementBusinessunitPlanninggroups(businessUnitId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        }
      ],
      "return": "PlanningGroupList"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}": {
      "functionName": "GetWorkforcemanagementBusinessunitSchedulingRun",
      "signature": "GetWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "runId",
          "type": "string"
        }
      ],
      "return": "BuScheduleRun"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}/result": {
      "functionName": "GetWorkforcemanagementBusinessunitSchedulingRunResult",
      "signature": "GetWorkforcemanagementBusinessunitSchedulingRunResult(businessUnitId, runId, managementUnitIds, expand)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "runId",
          "type": "string"
        },
        {
          "name": "managementUnitIds",
          "type": "List&lt;string&gt;"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "BuRescheduleResult"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs": {
      "functionName": "GetWorkforcemanagementBusinessunitSchedulingRuns",
      "signature": "GetWorkforcemanagementBusinessunitSchedulingRuns(businessUnitId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        }
      ],
      "return": "BuScheduleRunListing"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}": {
      "functionName": "GetWorkforcemanagementBusinessunitServicegoaltemplate",
      "signature": "GetWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "serviceGoalTemplateId",
          "type": "string"
        }
      ],
      "return": "ServiceGoalTemplate"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates": {
      "functionName": "GetWorkforcemanagementBusinessunitServicegoaltemplates",
      "signature": "GetWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        }
      ],
      "return": "ServiceGoalTemplateList"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}": {
      "functionName": "GetWorkforcemanagementBusinessunitWeekSchedule",
      "signature": "GetWorkforcemanagementBusinessunitWeekSchedule(businessUnitId, weekId, scheduleId, expand)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekId",
          "type": "String"
        },
        {
          "name": "scheduleId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "BuScheduleMetadata"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/generationresults": {
      "functionName": "GetWorkforcemanagementBusinessunitWeekScheduleGenerationresults",
      "signature": "GetWorkforcemanagementBusinessunitWeekScheduleGenerationresults(businessUnitId, weekId, scheduleId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekId",
          "type": "String"
        },
        {
          "name": "scheduleId",
          "type": "string"
        }
      ],
      "return": "ScheduleGenerationResult"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/headcountforecast": {
      "functionName": "GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast",
      "signature": "GetWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast(businessUnitId, weekId, scheduleId, forceDownload)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekId",
          "type": "String"
        },
        {
          "name": "scheduleId",
          "type": "string"
        },
        {
          "name": "forceDownload",
          "type": "bool?"
        }
      ],
      "return": "BuHeadcountForecastResponse"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/history/agents/{agentId}": {
      "functionName": "GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgent",
      "signature": "GetWorkforcemanagementBusinessunitWeekScheduleHistoryAgent(businessUnitId, weekId, scheduleId, agentId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekId",
          "type": "String"
        },
        {
          "name": "scheduleId",
          "type": "string"
        },
        {
          "name": "agentId",
          "type": "string"
        }
      ],
      "return": "BuAgentScheduleHistoryResponse"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules": {
      "functionName": "GetWorkforcemanagementBusinessunitWeekSchedules",
      "signature": "GetWorkforcemanagementBusinessunitWeekSchedules(businessUnitId, weekId, includeOnlyPublished, expand)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekId",
          "type": "string"
        },
        {
          "name": "includeOnlyPublished",
          "type": "bool?"
        },
        {
          "name": "expand",
          "type": "string"
        }
      ],
      "return": "BuScheduleListing"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}": {
      "functionName": "GetWorkforcemanagementBusinessunitWeekShorttermforecast",
      "signature": "GetWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId, weekDateId, forecastId, expand)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekDateId",
          "type": "String"
        },
        {
          "name": "forecastId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "BuShortTermForecast"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/data": {
      "functionName": "GetWorkforcemanagementBusinessunitWeekShorttermforecastData",
      "signature": "GetWorkforcemanagementBusinessunitWeekShorttermforecastData(businessUnitId, weekDateId, forecastId, weekNumber, forceDownloadService)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekDateId",
          "type": "String"
        },
        {
          "name": "forecastId",
          "type": "string"
        },
        {
          "name": "weekNumber",
          "type": "int?"
        },
        {
          "name": "forceDownloadService",
          "type": "bool?"
        }
      ],
      "return": "BuForecastResultResponse"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/generationresults": {
      "functionName": "GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults",
      "signature": "GetWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults(businessUnitId, weekDateId, forecastId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekDateId",
          "type": "String"
        },
        {
          "name": "forecastId",
          "type": "string"
        }
      ],
      "return": "BuForecastGenerationResult"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/longtermforecastdata": {
      "functionName": "GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata",
      "signature": "GetWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata(businessUnitId, weekDateId, forecastId, forceDownloadService)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekDateId",
          "type": "String"
        },
        {
          "name": "forecastId",
          "type": "string"
        },
        {
          "name": "forceDownloadService",
          "type": "bool?"
        }
      ],
      "return": "LongTermForecastResultResponse"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/planninggroups": {
      "functionName": "GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups",
      "signature": "GetWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups(businessUnitId, weekDateId, forecastId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekDateId",
          "type": "String"
        },
        {
          "name": "forecastId",
          "type": "string"
        }
      ],
      "return": "ForecastPlanningGroupsResponse"
    },
    "GET /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts": {
      "functionName": "GetWorkforcemanagementBusinessunitWeekShorttermforecasts",
      "signature": "GetWorkforcemanagementBusinessunitWeekShorttermforecasts(businessUnitId, weekDateId)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekDateId",
          "type": "string"
        }
      ],
      "return": "BuShortTermForecastListing"
    },
    "GET /api/v2/workforcemanagement/businessunits": {
      "functionName": "GetWorkforcemanagementBusinessunits",
      "signature": "GetWorkforcemanagementBusinessunits(feature, divisionId)",
      "parameters": [
        {
          "name": "feature",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "string"
        }
      ],
      "return": "BusinessUnitListing"
    },
    "GET /api/v2/workforcemanagement/businessunits/divisionviews": {
      "functionName": "GetWorkforcemanagementBusinessunitsDivisionviews",
      "signature": "GetWorkforcemanagementBusinessunitsDivisionviews(divisionId)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "BusinessUnitListing"
    },
    "GET /api/v2/workforcemanagement/calendar/data/ics": {
      "functionName": "GetWorkforcemanagementCalendarDataIcs",
      "signature": "GetWorkforcemanagementCalendarDataIcs(calendarId)",
      "parameters": [
        {
          "name": "calendarId",
          "type": "string"
        }
      ],
      "return": "string"
    },
    "GET /api/v2/workforcemanagement/calendar/url/ics": {
      "functionName": "GetWorkforcemanagementCalendarUrlIcs",
      "signature": "GetWorkforcemanagementCalendarUrlIcs()",
      "return": "CalendarUrlResponse"
    },
    "GET /api/v2/workforcemanagement/historicaldata/deletejob": {
      "functionName": "GetWorkforcemanagementHistoricaldataDeletejob",
      "signature": "GetWorkforcemanagementHistoricaldataDeletejob()",
      "return": "HistoricalImportDeleteJobResponse"
    },
    "GET /api/v2/workforcemanagement/historicaldata/importstatus": {
      "functionName": "GetWorkforcemanagementHistoricaldataImportstatus",
      "signature": "GetWorkforcemanagementHistoricaldataImportstatus()",
      "return": "HistoricalImportStatusListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}": {
      "functionName": "GetWorkforcemanagementManagementunit",
      "signature": "GetWorkforcemanagementManagementunit(managementUnitId, expand)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "ManagementUnit"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/activitycodes": {
      "functionName": "GetWorkforcemanagementManagementunitActivitycodes",
      "signature": "GetWorkforcemanagementManagementunitActivitycodes(managementUnitId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        }
      ],
      "return": "ActivityCodeContainer"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/adherence": {
      "functionName": "GetWorkforcemanagementManagementunitAdherence",
      "signature": "GetWorkforcemanagementManagementunitAdherence(managementUnitId, forceDownloadService)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "forceDownloadService",
          "type": "bool?"
        }
      ],
      "return": "UserScheduleAdherenceListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}": {
      "functionName": "GetWorkforcemanagementManagementunitAgent",
      "signature": "GetWorkforcemanagementManagementunitAgent(managementUnitId, agentId, excludeCapabilities)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "agentId",
          "type": "string"
        },
        {
          "name": "excludeCapabilities",
          "type": "bool?"
        }
      ],
      "return": "WfmAgent"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}/shifttrades": {
      "functionName": "GetWorkforcemanagementManagementunitAgentShifttrades",
      "signature": "GetWorkforcemanagementManagementunitAgentShifttrades(managementUnitId, agentId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "agentId",
          "type": "string"
        }
      ],
      "return": "ShiftTradeListResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/shifttrades/matched": {
      "functionName": "GetWorkforcemanagementManagementunitShifttradesMatched",
      "signature": "GetWorkforcemanagementManagementunitShifttradesMatched(managementUnitId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        }
      ],
      "return": "ShiftTradeMatchesSummaryResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/shifttrades/users": {
      "functionName": "GetWorkforcemanagementManagementunitShifttradesUsers",
      "signature": "GetWorkforcemanagementManagementunitShifttradesUsers(managementUnitId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        }
      ],
      "return": "WfmUserEntityListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}": {
      "functionName": "GetWorkforcemanagementManagementunitTimeofflimit",
      "signature": "GetWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "timeOffLimitId",
          "type": "string"
        }
      ],
      "return": "TimeOffLimit"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits": {
      "functionName": "GetWorkforcemanagementManagementunitTimeofflimits",
      "signature": "GetWorkforcemanagementManagementunitTimeofflimits(managementUnitId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        }
      ],
      "return": "TimeOffLimitListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans/{timeOffPlanId}": {
      "functionName": "GetWorkforcemanagementManagementunitTimeoffplan",
      "signature": "GetWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "timeOffPlanId",
          "type": "string"
        }
      ],
      "return": "TimeOffPlan"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans": {
      "functionName": "GetWorkforcemanagementManagementunitTimeoffplans",
      "signature": "GetWorkforcemanagementManagementunitTimeoffplans(managementUnitId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        }
      ],
      "return": "TimeOffPlanListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}": {
      "functionName": "GetWorkforcemanagementManagementunitUserTimeoffrequest",
      "signature": "GetWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId, userId, timeOffRequestId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "timeOffRequestId",
          "type": "string"
        }
      ],
      "return": "TimeOffRequestResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}/timeofflimits": {
      "functionName": "GetWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits",
      "signature": "GetWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits(managementUnitId, userId, timeOffRequestId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "timeOffRequestId",
          "type": "string"
        }
      ],
      "return": "QueryTimeOffLimitValuesResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests": {
      "functionName": "GetWorkforcemanagementManagementunitUserTimeoffrequests",
      "signature": "GetWorkforcemanagementManagementunitUserTimeoffrequests(managementUnitId, userId, recentlyReviewed)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "recentlyReviewed",
          "type": "bool?"
        }
      ],
      "return": "TimeOffRequestList"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/users": {
      "functionName": "GetWorkforcemanagementManagementunitUsers",
      "signature": "GetWorkforcemanagementManagementunitUsers(managementUnitId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        }
      ],
      "return": "WfmUserEntityListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}": {
      "functionName": "GetWorkforcemanagementManagementunitWeekSchedule",
      "signature": "GetWorkforcemanagementManagementunitWeekSchedule(managementUnitId, weekId, scheduleId, expand, forceDownloadService)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "weekId",
          "type": "string"
        },
        {
          "name": "scheduleId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "forceDownloadService",
          "type": "bool?"
        }
      ],
      "return": "WeekScheduleResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules": {
      "functionName": "GetWorkforcemanagementManagementunitWeekSchedules",
      "signature": "GetWorkforcemanagementManagementunitWeekSchedules(managementUnitId, weekId, includeOnlyPublished, earliestWeekDate, latestWeekDate)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "weekId",
          "type": "string"
        },
        {
          "name": "includeOnlyPublished",
          "type": "bool?"
        },
        {
          "name": "earliestWeekDate",
          "type": "string"
        },
        {
          "name": "latestWeekDate",
          "type": "string"
        }
      ],
      "return": "WeekScheduleListResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades": {
      "functionName": "GetWorkforcemanagementManagementunitWeekShifttrades",
      "signature": "GetWorkforcemanagementManagementunitWeekShifttrades(managementUnitId, weekDateId, evaluateMatches)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "weekDateId",
          "type": "String"
        },
        {
          "name": "evaluateMatches",
          "type": "bool?"
        }
      ],
      "return": "WeekShiftTradeListResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}": {
      "functionName": "GetWorkforcemanagementManagementunitWorkplan",
      "signature": "GetWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId, includeOnly)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "workPlanId",
          "type": "string"
        },
        {
          "name": "includeOnly",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "WorkPlan"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}": {
      "functionName": "GetWorkforcemanagementManagementunitWorkplanrotation",
      "signature": "GetWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "workPlanRotationId",
          "type": "string"
        }
      ],
      "return": "WorkPlanRotationResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations": {
      "functionName": "GetWorkforcemanagementManagementunitWorkplanrotations",
      "signature": "GetWorkforcemanagementManagementunitWorkplanrotations(managementUnitId, expand)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "WorkPlanRotationListResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans": {
      "functionName": "GetWorkforcemanagementManagementunitWorkplans",
      "signature": "GetWorkforcemanagementManagementunitWorkplans(managementUnitId, expand)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "WorkPlanListResponse"
    },
    "GET /api/v2/workforcemanagement/managementunits": {
      "functionName": "GetWorkforcemanagementManagementunits",
      "signature": "GetWorkforcemanagementManagementunits(pageSize, pageNumber, expand, feature, divisionId)",
      "parameters": [
        {
          "name": "pageSize",
          "type": "int?"
        },
        {
          "name": "pageNumber",
          "type": "int?"
        },
        {
          "name": "expand",
          "type": "string"
        },
        {
          "name": "feature",
          "type": "string"
        },
        {
          "name": "divisionId",
          "type": "string"
        }
      ],
      "return": "ManagementUnitListing"
    },
    "GET /api/v2/workforcemanagement/managementunits/divisionviews": {
      "functionName": "GetWorkforcemanagementManagementunitsDivisionviews",
      "signature": "GetWorkforcemanagementManagementunitsDivisionviews(divisionId)",
      "parameters": [
        {
          "name": "divisionId",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "ManagementUnitListing"
    },
    "GET /api/v2/workforcemanagement/notifications": {
      "functionName": "GetWorkforcemanagementNotifications",
      "signature": "GetWorkforcemanagementNotifications()",
      "return": "NotificationsResponse"
    },
    "GET /api/v2/workforcemanagement/schedulingjobs/{jobId}": {
      "functionName": "GetWorkforcemanagementSchedulingjob",
      "signature": "GetWorkforcemanagementSchedulingjob(jobId)",
      "parameters": [
        {
          "name": "jobId",
          "type": "string"
        }
      ],
      "return": "SchedulingStatusResponse"
    },
    "GET /api/v2/workforcemanagement/shifttrades": {
      "functionName": "GetWorkforcemanagementShifttrades",
      "signature": "GetWorkforcemanagementShifttrades()",
      "return": "ShiftTradeListResponse"
    },
    "GET /api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}": {
      "functionName": "GetWorkforcemanagementTimeoffrequest",
      "signature": "GetWorkforcemanagementTimeoffrequest(timeOffRequestId)",
      "parameters": [
        {
          "name": "timeOffRequestId",
          "type": "string"
        }
      ],
      "return": "TimeOffRequestResponse"
    },
    "GET /api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}/waitlistpositions": {
      "functionName": "GetWorkforcemanagementTimeoffrequestWaitlistpositions",
      "signature": "GetWorkforcemanagementTimeoffrequestWaitlistpositions(timeOffRequestId)",
      "parameters": [
        {
          "name": "timeOffRequestId",
          "type": "string"
        }
      ],
      "return": "WaitlistPositionListing"
    },
    "GET /api/v2/workforcemanagement/timeoffrequests": {
      "functionName": "GetWorkforcemanagementTimeoffrequests",
      "signature": "GetWorkforcemanagementTimeoffrequests(recentlyReviewed)",
      "parameters": [
        {
          "name": "recentlyReviewed",
          "type": "bool?"
        }
      ],
      "return": "TimeOffRequestList"
    },
    "PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}": {
      "functionName": "PatchWorkforcemanagementBusinessunit",
      "signature": "PatchWorkforcemanagementBusinessunit(businessUnitId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UpdateBusinessUnitRequest"
        }
      ],
      "return": "BusinessUnit"
    },
    "PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}": {
      "functionName": "PatchWorkforcemanagementBusinessunitActivitycode",
      "signature": "PatchWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "activityCodeId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UpdateActivityCodeRequest"
        }
      ],
      "return": "BusinessUnitActivityCode"
    },
    "PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}": {
      "functionName": "PatchWorkforcemanagementBusinessunitPlanninggroup",
      "signature": "PatchWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "planningGroupId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UpdatePlanningGroupRequest"
        }
      ],
      "return": "PlanningGroup"
    },
    "PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}": {
      "functionName": "PatchWorkforcemanagementBusinessunitSchedulingRun",
      "signature": "PatchWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "runId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "PatchBuScheduleRunRequest"
        }
      ]
    },
    "PATCH /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}": {
      "functionName": "PatchWorkforcemanagementBusinessunitServicegoaltemplate",
      "signature": "PatchWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "serviceGoalTemplateId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UpdateServiceGoalTemplate"
        }
      ],
      "return": "ServiceGoalTemplate"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}": {
      "functionName": "PatchWorkforcemanagementManagementunit",
      "signature": "PatchWorkforcemanagementManagementunit(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UpdateManagementUnitRequest"
        }
      ],
      "return": "ManagementUnit"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}": {
      "functionName": "PatchWorkforcemanagementManagementunitTimeofflimit",
      "signature": "PatchWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "timeOffLimitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UpdateTimeOffLimitRequest"
        }
      ],
      "return": "TimeOffLimit"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans/{timeOffPlanId}": {
      "functionName": "PatchWorkforcemanagementManagementunitTimeoffplan",
      "signature": "PatchWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "timeOffPlanId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UpdateTimeOffPlanRequest"
        }
      ],
      "return": "TimeOffPlan"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}": {
      "functionName": "PatchWorkforcemanagementManagementunitUserTimeoffrequest",
      "signature": "PatchWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId, userId, timeOffRequestId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "userId",
          "type": "string"
        },
        {
          "name": "timeOffRequestId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "AdminTimeOffRequestPatch"
        }
      ],
      "return": "TimeOffRequestResponse"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/{tradeId}": {
      "functionName": "PatchWorkforcemanagementManagementunitWeekShifttrade",
      "signature": "PatchWorkforcemanagementManagementunitWeekShifttrade(managementUnitId, weekDateId, body, tradeId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "weekDateId",
          "type": "String"
        },
        {
          "name": "body",
          "type": "PatchShiftTradeRequest"
        },
        {
          "name": "tradeId",
          "type": "string"
        }
      ],
      "return": "ShiftTradeResponse"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}": {
      "functionName": "PatchWorkforcemanagementManagementunitWorkplan",
      "signature": "PatchWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId, body, validationMode)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "workPlanId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "WorkPlan"
        },
        {
          "name": "validationMode",
          "type": "string"
        }
      ],
      "return": "WorkPlan"
    },
    "PATCH /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}": {
      "functionName": "PatchWorkforcemanagementManagementunitWorkplanrotation",
      "signature": "PatchWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "workPlanRotationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UpdateWorkPlanRotationRequest"
        }
      ],
      "return": "WorkPlanRotationResponse"
    },
    "PATCH /api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}": {
      "functionName": "PatchWorkforcemanagementTimeoffrequest",
      "signature": "PatchWorkforcemanagementTimeoffrequest(timeOffRequestId, body)",
      "parameters": [
        {
          "name": "timeOffRequestId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "AgentTimeOffRequestPatch"
        }
      ],
      "return": "TimeOffRequestResponse"
    },
    "POST /api/v2/workforcemanagement/adherence/historical": {
      "functionName": "PostWorkforcemanagementAdherenceHistorical",
      "signature": "PostWorkforcemanagementAdherenceHistorical(body)",
      "parameters": [
        {
          "name": "body",
          "type": "WfmHistoricalAdherenceQueryForUsers"
        }
      ],
      "return": "WfmHistoricalAdherenceResponse"
    },
    "POST /api/v2/workforcemanagement/agentschedules/mine": {
      "functionName": "PostWorkforcemanagementAgentschedulesMine",
      "signature": "PostWorkforcemanagementAgentschedulesMine(body)",
      "parameters": [
        {
          "name": "body",
          "type": "BuGetCurrentAgentScheduleRequest"
        }
      ],
      "return": "BuCurrentAgentScheduleSearchResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes": {
      "functionName": "PostWorkforcemanagementBusinessunitActivitycodes",
      "signature": "PostWorkforcemanagementBusinessunitActivitycodes(businessUnitId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CreateActivityCodeRequest"
        }
      ],
      "return": "BusinessUnitActivityCode"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/agentschedules/search": {
      "functionName": "PostWorkforcemanagementBusinessunitAgentschedulesSearch",
      "signature": "PostWorkforcemanagementBusinessunitAgentschedulesSearch(businessUnitId, body, forceAsync, forceDownloadService)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "BuSearchAgentSchedulesRequest"
        },
        {
          "name": "forceAsync",
          "type": "bool?"
        },
        {
          "name": "forceDownloadService",
          "type": "bool?"
        }
      ],
      "return": "BuAsyncAgentSchedulesSearchResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/intraday": {
      "functionName": "PostWorkforcemanagementBusinessunitIntraday",
      "signature": "PostWorkforcemanagementBusinessunitIntraday(businessUnitId, forceAsync, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "forceAsync",
          "type": "bool?"
        },
        {
          "name": "body",
          "type": "IntradayPlanningGroupRequest"
        }
      ],
      "return": "AsyncIntradayResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups": {
      "functionName": "PostWorkforcemanagementBusinessunitPlanninggroups",
      "signature": "PostWorkforcemanagementBusinessunitPlanninggroups(businessUnitId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CreatePlanningGroupRequest"
        }
      ],
      "return": "PlanningGroup"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates": {
      "functionName": "PostWorkforcemanagementBusinessunitServicegoaltemplates",
      "signature": "PostWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CreateServiceGoalTemplate"
        }
      ],
      "return": "ServiceGoalTemplate"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/agentschedules/query": {
      "functionName": "PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery",
      "signature": "PostWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery(businessUnitId, weekId, scheduleId, body, forceAsync, forceDownloadService)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekId",
          "type": "String"
        },
        {
          "name": "scheduleId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "BuQueryAgentSchedulesRequest"
        },
        {
          "name": "forceAsync",
          "type": "bool?"
        },
        {
          "name": "forceDownloadService",
          "type": "bool?"
        }
      ],
      "return": "BuAsyncAgentSchedulesQueryResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/copy": {
      "functionName": "PostWorkforcemanagementBusinessunitWeekScheduleCopy",
      "signature": "PostWorkforcemanagementBusinessunitWeekScheduleCopy(businessUnitId, weekId, scheduleId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekId",
          "type": "String"
        },
        {
          "name": "scheduleId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "BuCopyScheduleRequest"
        }
      ],
      "return": "BuAsyncScheduleResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/reschedule": {
      "functionName": "PostWorkforcemanagementBusinessunitWeekScheduleReschedule",
      "signature": "PostWorkforcemanagementBusinessunitWeekScheduleReschedule(businessUnitId, weekId, scheduleId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekId",
          "type": "String"
        },
        {
          "name": "scheduleId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "BuRescheduleRequest"
        }
      ],
      "return": "BuAsyncScheduleRunResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules": {
      "functionName": "PostWorkforcemanagementBusinessunitWeekSchedules",
      "signature": "PostWorkforcemanagementBusinessunitWeekSchedules(businessUnitId, weekId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekId",
          "type": "String"
        },
        {
          "name": "body",
          "type": "BuCreateBlankScheduleRequest"
        }
      ],
      "return": "BuScheduleMetadata"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/generate": {
      "functionName": "PostWorkforcemanagementBusinessunitWeekSchedulesGenerate",
      "signature": "PostWorkforcemanagementBusinessunitWeekSchedulesGenerate(businessUnitId, weekId, body)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekId",
          "type": "String"
        },
        {
          "name": "body",
          "type": "BuGenerateScheduleRequest"
        }
      ],
      "return": "BuAsyncScheduleRunResponse"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/copy": {
      "functionName": "PostWorkforcemanagementBusinessunitWeekShorttermforecastCopy",
      "signature": "PostWorkforcemanagementBusinessunitWeekShorttermforecastCopy(businessUnitId, weekDateId, forecastId, body, forceAsync)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekDateId",
          "type": "String"
        },
        {
          "name": "forecastId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CopyBuForecastRequest"
        },
        {
          "name": "forceAsync",
          "type": "bool?"
        }
      ],
      "return": "AsyncForecastOperationResult"
    },
    "POST /api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/generate": {
      "functionName": "PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate",
      "signature": "PostWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate(businessUnitId, weekDateId, body, forceAsync)",
      "parameters": [
        {
          "name": "businessUnitId",
          "type": "string"
        },
        {
          "name": "weekDateId",
          "type": "String"
        },
        {
          "name": "body",
          "type": "GenerateBuForecastRequest"
        },
        {
          "name": "forceAsync",
          "type": "bool?"
        }
      ],
      "return": "AsyncForecastOperationResult"
    },
    "POST /api/v2/workforcemanagement/businessunits": {
      "functionName": "PostWorkforcemanagementBusinessunits",
      "signature": "PostWorkforcemanagementBusinessunits(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateBusinessUnitRequest"
        }
      ],
      "return": "BusinessUnit"
    },
    "POST /api/v2/workforcemanagement/calendar/url/ics": {
      "functionName": "PostWorkforcemanagementCalendarUrlIcs",
      "signature": "PostWorkforcemanagementCalendarUrlIcs(language)",
      "parameters": [
        {
          "name": "language",
          "type": "string"
        }
      ],
      "return": "CalendarUrlResponse"
    },
    "POST /api/v2/workforcemanagement/historicaldata/deletejob": {
      "functionName": "PostWorkforcemanagementHistoricaldataDeletejob",
      "signature": "PostWorkforcemanagementHistoricaldataDeletejob()",
      "return": "HistoricalImportDeleteJobResponse"
    },
    "POST /api/v2/workforcemanagement/historicaldata/validate": {
      "functionName": "PostWorkforcemanagementHistoricaldataValidate",
      "signature": "PostWorkforcemanagementHistoricaldataValidate(body)",
      "parameters": [
        {
          "name": "body",
          "type": "ValidationServiceRequest"
        }
      ]
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/agentschedules/search": {
      "functionName": "PostWorkforcemanagementManagementunitAgentschedulesSearch",
      "signature": "PostWorkforcemanagementManagementunitAgentschedulesSearch(managementUnitId, body, forceAsync, forceDownloadService)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "BuSearchAgentSchedulesRequest"
        },
        {
          "name": "forceAsync",
          "type": "bool?"
        },
        {
          "name": "forceDownloadService",
          "type": "bool?"
        }
      ],
      "return": "BuAsyncAgentSchedulesSearchResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/historicaladherencequery": {
      "functionName": "PostWorkforcemanagementManagementunitHistoricaladherencequery",
      "signature": "PostWorkforcemanagementManagementunitHistoricaladherencequery(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "WfmHistoricalAdherenceQuery"
        }
      ],
      "return": "WfmHistoricalAdherenceResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/move": {
      "functionName": "PostWorkforcemanagementManagementunitMove",
      "signature": "PostWorkforcemanagementManagementunitMove(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "MoveManagementUnitRequest"
        }
      ],
      "return": "MoveManagementUnitResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/schedules/search": {
      "functionName": "PostWorkforcemanagementManagementunitSchedulesSearch",
      "signature": "PostWorkforcemanagementManagementunitSchedulesSearch(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "UserListScheduleRequestBody"
        }
      ],
      "return": "UserScheduleContainer"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits": {
      "functionName": "PostWorkforcemanagementManagementunitTimeofflimits",
      "signature": "PostWorkforcemanagementManagementunitTimeofflimits(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CreateTimeOffLimitRequest"
        }
      ],
      "return": "TimeOffLimit"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/values/query": {
      "functionName": "PostWorkforcemanagementManagementunitTimeofflimitsValuesQuery",
      "signature": "PostWorkforcemanagementManagementunitTimeofflimitsValuesQuery(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "QueryTimeOffLimitValuesRequest"
        }
      ],
      "return": "QueryTimeOffLimitValuesResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans": {
      "functionName": "PostWorkforcemanagementManagementunitTimeoffplans",
      "signature": "PostWorkforcemanagementManagementunitTimeoffplans(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CreateTimeOffPlanRequest"
        }
      ],
      "return": "TimeOffPlan"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests": {
      "functionName": "PostWorkforcemanagementManagementunitTimeoffrequests",
      "signature": "PostWorkforcemanagementManagementunitTimeoffrequests(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CreateAdminTimeOffRequest"
        }
      ],
      "return": "TimeOffRequestList"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/query": {
      "functionName": "PostWorkforcemanagementManagementunitTimeoffrequestsQuery",
      "signature": "PostWorkforcemanagementManagementunitTimeoffrequestsQuery(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "TimeOffRequestQueryBody"
        }
      ],
      "return": "TimeOffRequestListing"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/waitlistpositions/query": {
      "functionName": "PostWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery",
      "signature": "PostWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "QueryWaitlistPositionsRequest"
        }
      ],
      "return": "WaitlistPositionListing"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/{tradeId}/match": {
      "functionName": "PostWorkforcemanagementManagementunitWeekShifttradeMatch",
      "signature": "PostWorkforcemanagementManagementunitWeekShifttradeMatch(managementUnitId, weekDateId, body, tradeId)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "weekDateId",
          "type": "String"
        },
        {
          "name": "body",
          "type": "MatchShiftTradeRequest"
        },
        {
          "name": "tradeId",
          "type": "string"
        }
      ],
      "return": "MatchShiftTradeResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades": {
      "functionName": "PostWorkforcemanagementManagementunitWeekShifttrades",
      "signature": "PostWorkforcemanagementManagementunitWeekShifttrades(managementUnitId, weekDateId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "weekDateId",
          "type": "String"
        },
        {
          "name": "body",
          "type": "AddShiftTradeRequest"
        }
      ],
      "return": "ShiftTradeResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/search": {
      "functionName": "PostWorkforcemanagementManagementunitWeekShifttradesSearch",
      "signature": "PostWorkforcemanagementManagementunitWeekShifttradesSearch(managementUnitId, weekDateId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "weekDateId",
          "type": "String"
        },
        {
          "name": "body",
          "type": "SearchShiftTradesRequest"
        }
      ],
      "return": "SearchShiftTradesResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/state/bulk": {
      "functionName": "PostWorkforcemanagementManagementunitWeekShifttradesStateBulk",
      "signature": "PostWorkforcemanagementManagementunitWeekShifttradesStateBulk(managementUnitId, weekDateId, body, forceAsync)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "weekDateId",
          "type": "String"
        },
        {
          "name": "body",
          "type": "BulkShiftTradeStateUpdateRequest"
        },
        {
          "name": "forceAsync",
          "type": "bool?"
        }
      ],
      "return": "BulkUpdateShiftTradeStateResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/copy": {
      "functionName": "PostWorkforcemanagementManagementunitWorkplanCopy",
      "signature": "PostWorkforcemanagementManagementunitWorkplanCopy(managementUnitId, workPlanId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "workPlanId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CopyWorkPlan"
        }
      ],
      "return": "WorkPlan"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/validate": {
      "functionName": "PostWorkforcemanagementManagementunitWorkplanValidate",
      "signature": "PostWorkforcemanagementManagementunitWorkplanValidate(managementUnitId, workPlanId, body, expand)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "workPlanId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "WorkPlanValidationRequest"
        },
        {
          "name": "expand",
          "type": "List&lt;string&gt;"
        }
      ],
      "return": "ValidateWorkPlanResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}/copy": {
      "functionName": "PostWorkforcemanagementManagementunitWorkplanrotationCopy",
      "signature": "PostWorkforcemanagementManagementunitWorkplanrotationCopy(managementUnitId, workPlanRotationId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "workPlanRotationId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CopyWorkPlanRotationRequest"
        }
      ],
      "return": "WorkPlanRotationResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations": {
      "functionName": "PostWorkforcemanagementManagementunitWorkplanrotations",
      "signature": "PostWorkforcemanagementManagementunitWorkplanrotations(managementUnitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "AddWorkPlanRotationRequest"
        }
      ],
      "return": "WorkPlanRotationResponse"
    },
    "POST /api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans": {
      "functionName": "PostWorkforcemanagementManagementunitWorkplans",
      "signature": "PostWorkforcemanagementManagementunitWorkplans(managementUnitId, body, validationMode)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "CreateWorkPlan"
        },
        {
          "name": "validationMode",
          "type": "string"
        }
      ],
      "return": "WorkPlan"
    },
    "POST /api/v2/workforcemanagement/managementunits": {
      "functionName": "PostWorkforcemanagementManagementunits",
      "signature": "PostWorkforcemanagementManagementunits(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateManagementUnitApiRequest"
        }
      ],
      "return": "ManagementUnit"
    },
    "POST /api/v2/workforcemanagement/notifications/update": {
      "functionName": "PostWorkforcemanagementNotificationsUpdate",
      "signature": "PostWorkforcemanagementNotificationsUpdate(body)",
      "parameters": [
        {
          "name": "body",
          "type": "UpdateNotificationsRequest"
        }
      ],
      "return": "UpdateNotificationsResponse"
    },
    "POST /api/v2/workforcemanagement/schedules": {
      "functionName": "PostWorkforcemanagementSchedules",
      "signature": "PostWorkforcemanagementSchedules(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CurrentUserScheduleRequestBody"
        }
      ],
      "return": "UserScheduleContainer"
    },
    "POST /api/v2/workforcemanagement/timeofflimits/available/query": {
      "functionName": "PostWorkforcemanagementTimeofflimitsAvailableQuery",
      "signature": "PostWorkforcemanagementTimeofflimitsAvailableQuery(body)",
      "parameters": [
        {
          "name": "body",
          "type": "AvailableTimeOffRequest"
        }
      ],
      "return": "AvailableTimeOffResponse"
    },
    "POST /api/v2/workforcemanagement/timeoffrequests": {
      "functionName": "PostWorkforcemanagementTimeoffrequests",
      "signature": "PostWorkforcemanagementTimeoffrequests(body)",
      "parameters": [
        {
          "name": "body",
          "type": "CreateAgentTimeOffRequest"
        }
      ],
      "return": "TimeOffRequestResponse"
    },
    "PUT /api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}/values": {
      "functionName": "PutWorkforcemanagementManagementunitTimeofflimitValues",
      "signature": "PutWorkforcemanagementManagementunitTimeofflimitValues(managementUnitId, timeOffLimitId, body)",
      "parameters": [
        {
          "name": "managementUnitId",
          "type": "string"
        },
        {
          "name": "timeOffLimitId",
          "type": "string"
        },
        {
          "name": "body",
          "type": "SetTimeOffLimitValuesRequest"
        }
      ],
      "return": "TimeOffLimit"
    }
  }
}